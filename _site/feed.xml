<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.3">Jekyll</generator><link href="https://linotes.netlify.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://linotes.netlify.com/" rel="alternate" type="text/html" /><updated>2018-08-02T21:13:57+08:00</updated><id>https://linotes.netlify.com/</id><title type="html">LINOTES</title><subtitle>用简洁清晰的语言讨论技术</subtitle><author><name>Hawk Zhang</name><email>imhawkz@gmail.com</email></author><entry><title type="html">Bash 脚本 - 时间</title><link href="https://linotes.netlify.com/bash/time/" rel="alternate" type="text/html" title="Bash 脚本 - 时间" /><published>2017-07-01T00:00:00+08:00</published><updated>2017-07-01T00:00:00+08:00</updated><id>https://linotes.netlify.com/bash/time</id><content type="html" xml:base="https://linotes.netlify.com/bash/time/">&lt;h2 id=&quot;当前时间&quot;&gt;当前时间&lt;/h2&gt;

&lt;h3 id=&quot;标准时间&quot;&gt;标准时间&lt;/h3&gt;

&lt;h4 id=&quot;纳秒&quot;&gt;纳秒&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt; +%N
984593091
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;微秒&quot;&gt;微秒&lt;/h4&gt;

&lt;p&gt;直接从纳秒中舍入到前 6 位&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt; +%6N
873402
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;毫秒&quot;&gt;毫秒&lt;/h4&gt;

&lt;p&gt;直接从纳秒中舍入到前 3 位&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt; +%3N
873402
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;时分秒&quot;&gt;时分秒&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt; +%T     
23:10:35
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;####&lt;/p&gt;

&lt;h4 id=&quot;年月日-时分秒-毫秒&quot;&gt;年月日 时分秒 毫秒&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt; +&lt;span class=&quot;s2&quot;&gt;&quot;%Y%m%d.%H%M%S%3N&quot;&lt;/span&gt;
20170731.231433490
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;epoch-时间&quot;&gt;epoch 时间&lt;/h3&gt;

&lt;h4 id=&quot;秒&quot;&gt;秒&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo date&lt;/span&gt; +%s
1533092698
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;.&lt;/p&gt;</content><author><name>Hawk Zhang</name><email>imhawkz@gmail.com</email></author><category term="bash" /><category term="时间" /><category term="秒" /><category term="毫秒" /><category term="epoch" /></entry><entry><title type="html">Bash 脚本 - 存储空间</title><link href="https://linotes.netlify.com/bash/storage/" rel="alternate" type="text/html" title="Bash 脚本 - 存储空间" /><published>2017-07-01T00:00:00+08:00</published><updated>2017-07-01T00:00:00+08:00</updated><id>https://linotes.netlify.com/bash/storage</id><content type="html" xml:base="https://linotes.netlify.com/bash/storage/">&lt;h2 id=&quot;检查磁盘空间&quot;&gt;检查磁盘空间&lt;/h2&gt;

&lt;p&gt;把 &lt;code class=&quot;highlighter-rouge&quot;&gt;df -h&lt;/code&gt; 的结果按占用率排序，取最大的一行，截取占用率字段，去掉百分号，只保留数字。根据数字大小来决定显示什么消息，超过一定限制则发邮件。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# This script does a very simple test for checking disk space.&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;space&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{print $5}'&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; % | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; Use | &lt;span class=&quot;nb&quot;&gt;sort&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-1&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;cut&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;%&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f1&lt;/span&gt; -&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$space&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;1-6]&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;All is quiet.&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;7-8]&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Start thinking about cleaning out some stuff.  There's a partition that is &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$space&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; % full.&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
9[1-8]&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Better hurry with that new disk...  One partition is &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$space&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; % full.&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
99&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;I'm drowning here!  There's a partition at &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$space&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; %!&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;I seem to be running with an nonexistent amount of disk space...&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;esac&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$Message&lt;/span&gt; | mail &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;disk report &lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; anny
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;.&lt;/p&gt;</content><author><name>Hawk Zhang</name><email>imhawkz@gmail.com</email></author><category term="bash" /><category term="磁盘空间" /></entry><entry><title type="html">Bash 脚本 - 数字</title><link href="https://linotes.netlify.com/bash/numbers/" rel="alternate" type="text/html" title="Bash 脚本 - 数字" /><published>2017-07-01T00:00:00+08:00</published><updated>2017-07-01T00:00:00+08:00</updated><id>https://linotes.netlify.com/bash/numbers</id><content type="html" xml:base="https://linotes.netlify.com/bash/numbers/">&lt;h2 id=&quot;常用工具&quot;&gt;常用工具&lt;/h2&gt;

&lt;h3 id=&quot;rand&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rand()&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;srand()&lt;/code&gt; 搭配 &lt;code class=&quot;highlighter-rouge&quot;&gt;rand()&lt;/code&gt; 使用，前者为后者提供随机种子。范围为 0 ~ 32767。&lt;/p&gt;

&lt;h3 id=&quot;shuf&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;shuf&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;shuf&lt;/code&gt; 的作用是把给定范围的数字以随机的顺序按行排列，每行一个数字。所以可以利用这个特点来生成随机数。&lt;/p&gt;

&lt;h4 id=&quot;选项&quot;&gt;选项&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-i&lt;/code&gt; 指定范围&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-n&lt;/code&gt; 相当于 head，即取前 n 行.&lt;/p&gt;

&lt;h4 id=&quot;范例&quot;&gt;范例&lt;/h4&gt;

&lt;p&gt;取前两行随机数：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;shuf&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; 1-100 &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; 2
66
57
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;random&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$RANDOM&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$RANDOM&lt;/code&gt; 是 bash 的内部函数，它会返回一个伪随机整数。&lt;/p&gt;

&lt;p class=&quot;notice--warning&quot;&gt;只适用于简单的日常计算，不要用它来生成加密密钥。&lt;/p&gt;

&lt;h3 id=&quot;devurandom&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/urandom&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/random&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/urandom&lt;/code&gt; 是特殊文件，其自用是生成伪随机数。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/random&lt;/code&gt; 用来保存系统当前运行环境的实时数据（环境噪音），是阻塞的随机数发生器，读取有时需要等待；&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/urandom&lt;/code&gt; 是非阻塞随机数发生器，读取操作不会产生阻塞。&lt;/p&gt;

&lt;h2 id=&quot;算术运算方法&quot;&gt;算术运算方法&lt;/h2&gt;

&lt;h3 id=&quot;小于某数的整数&quot;&gt;小于某数的整数&lt;/h3&gt;

&lt;h4 id=&quot;取余&quot;&gt;取余&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;X=N%A&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;如果 N &amp;gt; A，则结果满足 0 &amp;lt;= X &amp;lt; A。&lt;/p&gt;

&lt;h3 id=&quot;给定范围的随机整数&quot;&gt;给定范围的随机整数&lt;/h3&gt;

&lt;p&gt;给定整数 A, B，要求随机生成 C，满足 A &amp;lt;= C &amp;lt;= B。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;N=B-A+1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;找一个容易取得的 &lt;strong&gt;大于&lt;/strong&gt; N 的随机数 R。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;C=R%N+A&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;因为 &lt;code class=&quot;highlighter-rouge&quot;&gt;0 &amp;lt;= R%N &amp;lt; N&lt;/code&gt;，这样就可以保证 C 落在要求的范围了。&lt;/p&gt;

&lt;h2 id=&quot;生成随机数&quot;&gt;生成随机数&lt;/h2&gt;

&lt;h3 id=&quot;使用-shuf&quot;&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;shuf&lt;/code&gt;&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;shuf&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; 1-100 &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;使用-ramdom&quot;&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;$RAMDOM&lt;/code&gt;&lt;/h3&gt;

&lt;h4 id=&quot;生成&quot;&gt;生成&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$RANDOM&lt;/span&gt;
13445
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果要生成更大的数字，可以把 &lt;code class=&quot;highlighter-rouge&quot;&gt;$RANDOM&lt;/code&gt; 生成的随机数加上一个更大的数，再求余&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;rand&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;dif&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$RANDOM&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$dif&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$min&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;rnd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;rand 400000 500000&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$rnd&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;date&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;date&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;%s&lt;/code&gt; ：epoch 秒数，10 位&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;%N&lt;/code&gt; ：当前纳秒数，9 位&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;date +%s%N&lt;/code&gt; 得到 19 位动态整数，用其&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;rand&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;dif&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt; +%s%N&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$dif&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$min&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;rnd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;rand 1 50&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$rnd&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;awk&quot;&gt;AWK&lt;/h3&gt;

&lt;h4 id=&quot;随机生成小于-100-的整数&quot;&gt;随机生成小于 100 的整数：&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'BEGIN{srand();print int(100*rand())}'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;devurandom-1&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/urandom&lt;/code&gt;&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;rand&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;difx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /dev/urandom | &lt;span class=&quot;nb&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; 10 | &lt;span class=&quot;nb&quot;&gt;cksum&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-F&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{print $1}'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$dif&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$min&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;rnd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;rand &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$rnd&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;.&lt;/p&gt;</content><author><name>Hawk Zhang</name><email>imhawkz@gmail.com</email></author><category term="bash" /><category term="数字" /><category term="随机数" /></entry><entry><title type="html">Bash 脚本 - 输入</title><link href="https://linotes.netlify.com/bash/input/" rel="alternate" type="text/html" title="Bash 脚本 - 输入" /><published>2017-07-01T00:00:00+08:00</published><updated>2017-07-01T00:00:00+08:00</updated><id>https://linotes.netlify.com/bash/input</id><content type="html" xml:base="https://linotes.netlify.com/bash/input/">&lt;h2 id=&quot;read&quot;&gt;read&lt;/h2&gt;

&lt;h3 id=&quot;读取一个变量&quot;&gt;读取一个变量&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#read name        #等待读取输入，直到回车后表示输入完毕，并将输入赋值给变量answer&lt;/span&gt;
HelloWorld            &lt;span class=&quot;c&quot;&gt;#控制台输入Hello&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#echo $1987name       #打印变量&lt;/span&gt;
HelloWorld
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;读取多个变量&quot;&gt;读取多个变量&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#read one two three&lt;/span&gt;
1 2 3                   &lt;span class=&quot;c&quot;&gt;#在控制台输入1 2 3，它们之间用空格隔开。&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#echo &quot;one = $one, two = $two, three = $three&quot;&lt;/span&gt;
one &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1, two &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 2, three &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;使用提示信息&quot;&gt;使用提示信息&lt;/h3&gt;

&lt;p&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;-p&lt;/code&gt; 选项&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#read -p &quot;Enter your name: &quot;            #输出文本提示，同时等待输入，并将结果赋值给REPLY。&lt;/span&gt;
Enter you name: stephen                 &lt;span class=&quot;c&quot;&gt;#在提示文本之后输入stephen&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#echo $REPLY&lt;/span&gt;
stephen
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;等待控制台输入，并将输入信息视为数组，赋值给数组变量friends，输入信息用空格隔开数组的每个元素。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#read -a friends&lt;/span&gt;
Tim Tom Helen

&lt;span class=&quot;c&quot;&gt;#echo &quot;They are ${friends[0]}, ${friends[1]} and ${friends[2]}.&quot;&lt;/span&gt;
They are Tim, Tom and Helen.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;终端输入密码时，不让密码显示出来&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;方法1：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;输入密码：&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;http://man.linuxde.net/pwd &lt;span class=&quot;s2&quot;&gt;&quot;pwd命令&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo
echo &lt;/span&gt;password &lt;span class=&quot;nb&quot;&gt;read&lt;/span&gt;, is &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$pwd&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;方法2：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;stty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;http://man.linuxde.net/stty &lt;span class=&quot;s2&quot;&gt;&quot;stty命令&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-echo&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;输入密码：&quot;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;pwd
stty echo
echo
echo &lt;/span&gt;输入完毕。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;其中，选项 &lt;code class=&quot;highlighter-rouge&quot;&gt;-echo&lt;/code&gt; 禁止将输出发送到终端，而选项 &lt;code class=&quot;highlighter-rouge&quot;&gt;echo&lt;/code&gt; 则允许发送输出。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;使用 read 命令从键盘读取变量值，并且将值赋给指定的变量，输入如下命令：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;v1 v3          &lt;span class=&quot;c&quot;&gt;#读取变量值&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;执行上面的指令以后，要求键入两个数据，如下所示：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Linux c+            &lt;span class=&quot;c&quot;&gt;#输入数据&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;完成之后，可以使用echo命令将指定的变量值输出查看，输入如下命令：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$v1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$v3&lt;/span&gt;       &lt;span class=&quot;c&quot;&gt;#输出变量的值&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;执行输出变量值的命令以后，将显示用户所输入的数据值，如下所示：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Linux c+           &lt;span class=&quot;c&quot;&gt;#输出变量值&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Hawk Zhang</name><email>imhawkz@gmail.com</email></author><category term="bash" /><category term="输入" /><category term="read" /></entry><entry><title type="html">Bash 脚本 - 调试</title><link href="https://linotes.netlify.com/bash/debug/" rel="alternate" type="text/html" title="Bash 脚本 - 调试" /><published>2017-07-01T00:00:00+08:00</published><updated>2017-07-01T00:00:00+08:00</updated><id>https://linotes.netlify.com/bash/debug</id><content type="html" xml:base="https://linotes.netlify.com/bash/debug/">&lt;h2 id=&quot;检查文件语法错误&quot;&gt;检查文件语法错误&lt;/h2&gt;

&lt;p&gt;通过检查返回状态来判断是否 sh 程序运行正确，进而判断是否脚本有语法错误。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;please type in the script name : &quot;&lt;/span&gt; file

&lt;span class=&quot;c&quot;&gt;# run the script if it's not empty&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
  &lt;/span&gt;sh &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /dev/null 2&amp;gt;&amp;amp;1
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-ne&lt;/span&gt; 0 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Syntax error detected. Press Q to exit. Press V to open it with vim&quot;&lt;/span&gt; answer
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$answer&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in
    &lt;/span&gt;q &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Q&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;0
      &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
    v &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; V &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      vim &lt;span class=&quot;nv&quot;&gt;$file&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;0
      &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;esac&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'no error detected, congratulations!'&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;fi
else
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$file&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; not exist&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;.&lt;/p&gt;</content><author><name>Hawk Zhang</name><email>imhawkz@gmail.com</email></author><category term="bash" /><category term="调试" /></entry><entry><title type="html">文件描述符简介</title><link href="https://linotes.netlify.com/kernel/filedescriptor/" rel="alternate" type="text/html" title="文件描述符简介" /><published>2017-06-01T00:00:00+08:00</published><updated>2017-06-01T00:00:00+08:00</updated><id>https://linotes.netlify.com/kernel/filedescriptor</id><content type="html" xml:base="https://linotes.netlify.com/kernel/filedescriptor/">&lt;h2 id=&quot;文件描述符&quot;&gt;文件描述符&lt;/h2&gt;

&lt;h3 id=&quot;文件-io&quot;&gt;文件 I/O&lt;/h3&gt;

&lt;p&gt;处理文件 I/O 的基本系统调用：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;open&lt;/code&gt; ：请求生成到某文件的连接&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;close&lt;/code&gt; ：请求关闭到某文件的连接&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;read&lt;/code&gt; ：请求通过特定连接来读取文件的部分字节&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;write&lt;/code&gt; ：请求通过特定连接来写入部分字节到文件&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;文件描述符-1&quot;&gt;文件描述符&lt;/h3&gt;

&lt;p&gt;File Descriptor&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;由 &lt;code class=&quot;highlighter-rouge&quot;&gt;open&lt;/code&gt; 系统调用返回的值称为文件描述符，本质上是内核维护的打开文件数组的一个索引。&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/dev/sr0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上面提到的数组即文件描述符表，文件描述符是该表的 &lt;strong&gt;索引&lt;/strong&gt;。针对每一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;open&lt;/code&gt; 系统调用，即进程打开一个文件时，内核就会创建一个文件描述符，并将其与底层的文件对象关联起来，该文件可以是设备文件，也可以是其它文件。&lt;/p&gt;

&lt;p&gt;文件描述符是内核为了高效管理被打开的文件所创建的索引，是一个非负整数（通常是小整数），用于 &lt;strong&gt;指代&lt;/strong&gt; 被打开的文件，所有执行 &lt;strong&gt;I/O 操作&lt;/strong&gt; 的系统调用都要通过文件描述符。&lt;/p&gt;

&lt;p&gt;每个 Unix 进程（除了可能的守护进程）均应有三个标准的 POSIX 文件描述符，对应于三个标准流：&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;文件描述符&lt;/td&gt;
      &lt;td&gt;用途&lt;/td&gt;
      &lt;td&gt;POSIX 名称&lt;/td&gt;
      &lt;td&gt;标准 I/O 流&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;标准输入&lt;/td&gt;
      &lt;td&gt;STDIN_FILENO&lt;/td&gt;
      &lt;td&gt;stdin&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;标准输出&lt;/td&gt;
      &lt;td&gt;STDOUT_FILENO&lt;/td&gt;
      &lt;td&gt;stdout&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;标准错误&lt;/td&gt;
      &lt;td&gt;STDERR_FILENO&lt;/td&gt;
      &lt;td&gt;stderr&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;程序刚刚启动的时候，0 是标准输入，1 是标准输出，2 是标准错误。如果此时去打开一个新的文件，它的文件描述符会是 3。&lt;/p&gt;

&lt;p&gt;文件描述符在形式上是一个非负整数。实际上，它是一个索引值，指向内核为每一个进程所维护的该进程打开文件的记录表。当程序打开一个现有文件或者创建一个新文件时，内核向进程返回一个文件描述符。在程序设计中，一些涉及底层的程序编写往往会围绕着文件描述符展开。但是文件描述符这一概念往往只适用于 UNIX、Linux 这样的操作系统。&lt;/p&gt;

&lt;p&gt;POSIX 标准要求每次打开文件时（含 socket）必须使用当前进程中可用的最小的文件描述符号码，因此，在网络通信过程中，稍不注意就有可能造成串话。&lt;/p&gt;

&lt;p&gt;在 Linux 的系统调用中，&lt;strong&gt;大量的系统调用都是依赖于文件描述符&lt;/strong&gt;。文件描述符为在该系列平台上进行设备相关的编程提供了一个统一的方法。&lt;/p&gt;

&lt;h4 id=&quot;流&quot;&gt;流&lt;/h4&gt;

&lt;p&gt;Stream&lt;/p&gt;

&lt;p&gt;文件描述符是个抽象的句柄，通过它可以访问一个文件或任何其它的输入、输出资源，如网络套接字或管道。只要文件处于打开状态，就可以随时使用其文件描述符来对其进行读写操作。而此时的文件不是通常意义上的磁盘中的文件，而是代表一个流，可以对流进行读取的操作。&lt;/p&gt;

&lt;p&gt;打开一个文件时，操作系统会创建一个到该文件的 &lt;strong&gt;流&lt;/strong&gt;，将其连接到打开的文件上。描述符实际上就代表了这个流。类似的，操作系统创建了一些默认的流，但它们不是连接到文件，而是连接到终端。因此，你在终端输入时，会发送到标准输入流和操作系统中。当你在终端键入 &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt; 命令时，操作系统会将结果输出到标准输出流。而标准输出流是连接到显示终端的，于是你看到了输出结果。&lt;/p&gt;

&lt;h3 id=&quot;文件描述符与-pcb&quot;&gt;文件描述符与 PCB&lt;/h3&gt;

&lt;p&gt;每个进程在 Linux 内核中都有一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;task_struct&lt;/code&gt; 结构体来维护进程相关的信息，称为进程描述符（Process Descriptor），而在操作系统理论中称为进程控制块（PCB，Process Control Block）。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;task_struct&lt;/code&gt; 中有一个指针（files）指向 &lt;code class=&quot;highlighter-rouge&quot;&gt;files_struct&lt;/code&gt; 结构体，称为文件描述符表，其中每个表项包含一个指向已打开的文件的指针，如下图。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017.4.1.fd.png&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;用户程序不能直接访问内核中的文件描述符表，只能使用文件描述符表的索引（即 0、1、2、3 这些数字），这些索引即文件描述符，用 int 型变量保存。&lt;/p&gt;

&lt;p&gt;当调用 open 打开一个文件或创建一个新文件时，内核分配一个文件描述符，并返回给用户程序，该文件描述符表项中的指针指向新打开的文件。当读写文件时，用户程序把文件描述符传给 read 或 write ，内核根据文件描述符找到相应的表项，再通过表项中的指针找到相应的文件。&lt;/p&gt;

&lt;h3 id=&quot;文件描述的限制&quot;&gt;文件描述的限制&lt;/h3&gt;

&lt;p&gt;文件描述符是系统的一个重要资源，虽然说系统内存有多少就可以打开多少的文件描述符，但是在实际实现过程中内核是会做相应的处理。&lt;/p&gt;

&lt;p&gt;整个系统可以打开的最大文件数通常限制在系统内存的 10%（以 KB 计算），称之为系统级限制。可用 &lt;code class=&quot;highlighter-rouge&quot;&gt;sysctl -a | grep fs.file-max&lt;/code&gt; 查看。&lt;/p&gt;

&lt;p&gt;为了避免某一个进程消耗掉所有的文件资源，内核也会对单个进程可打开的最大文件数加以限制，称用户级限制，默认值为 1024，用 &lt;code class=&quot;highlighter-rouge&quot;&gt;ulimit -n&lt;/code&gt; 查看。在 Web 服务器中，常通过更改该默认值来优化服务器。&lt;/p&gt;

&lt;h3 id=&quot;文件描述符与打开的文件&quot;&gt;文件描述符与打开的文件&lt;/h3&gt;

&lt;p&gt;每一个文件描述符与一个打开的文件相对应，不同的文件描述符可指向同一个文件。既它们之间的关系可以是 &lt;strong&gt;一对一&lt;/strong&gt;，也可以是 &lt;strong&gt;多对一&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;同一个文件可以被 &lt;strong&gt;不同的进程&lt;/strong&gt; 打开，也可以在 &lt;strong&gt;同一个进程&lt;/strong&gt; 中被 &lt;strong&gt;多次&lt;/strong&gt; 打开。&lt;/p&gt;

&lt;p&gt;系统为每个进程维护了一个文件描述符表，该表的值都是从 0 开始的，所以在不同的进程中你会看到相同的文件描述符，但相同的文件描述符不一定指向同一个文件。&lt;/p&gt;

&lt;p&gt;具体指向哪个文件，需要查看由内核维护的 3 个数据结构：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;进程级的文件描述符表&lt;/li&gt;
  &lt;li&gt;系统级的打开文件描述符表&lt;/li&gt;
  &lt;li&gt;文件系统的 i-node 表&lt;/li&gt;
&lt;/ol&gt;

&lt;p class=&quot;notice--info&quot;&gt;从在进程中打开一个文件，一直到获取文件内容，这期间要经历几级的间接寻址。从实施角度来看，经历某个级别通常意味着：在内核中翻译成为某种 &lt;strong&gt;数据结构&lt;/strong&gt;，然后指向下一级。&lt;/p&gt;

&lt;h4 id=&quot;进程级描述符表&quot;&gt;进程级描述符表&lt;/h4&gt;

&lt;p&gt;The per-process Open File Descriptor Table&lt;/p&gt;

&lt;p&gt;对于 &lt;strong&gt;每一个进程&lt;/strong&gt;，内核都为其维护一个打开文件描述符的表。表中的每个条目都记录了单个文件描述符的相关信息，包括：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;控制文件描述符操作的一组标签（目前，此类标志仅定义了一个，即 &lt;code class=&quot;highlighter-rouge&quot;&gt;close-on-exec&lt;/code&gt; 标签）&lt;/li&gt;
  &lt;li&gt;对打开文件描述符的引用&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;数据结构&quot;&gt;数据结构&lt;/h5&gt;

&lt;p&gt;在 Linux 系统中，进程打开的文件是由 &lt;code class=&quot;highlighter-rouge&quot;&gt;files_struct&lt;/code&gt; 结构来管理的，而该结构又是位于进程的 &lt;code class=&quot;highlighter-rouge&quot;&gt;task_struct&lt;/code&gt; 结构中：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;struct task_struct {
    ...
    /* open file information */
    struct files_struct *files;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;每进程的文件描述符表（fdt）位于 &lt;code class=&quot;highlighter-rouge&quot;&gt;files_strct&lt;/code&gt; 结构中：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;struct files_struct {
    ...
    struct fdtable __rcu *fdt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;当进程要打开文件时，它会产生一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;open&lt;/code&gt; 调用，继而调用 &lt;code class=&quot;highlighter-rouge&quot;&gt;sys_open&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sys_open(filename, …)
    // 1)   从用户空间拷贝文件名
    getname(filename)
            strncpy_from_user()
    // 2)  获取第一个未用的描述符，会将其返回给进程
    int fd = get_unused_fd()
        struct files_struct *files = current-&amp;gt;files
    // 3) 从文件系统获取文件
    struct file *f = file_open(filename)
        open_namei
            // lookup operation for filesystem
            dentry = cached_lookup or real_lookup
            // initializes file struct
            dentry_open
    // 4) 把文件系统返回的文件安装到进程的描述符表中
    fd_install
        current-&amp;gt;files-&amp;gt;fd[fd] = file
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;进程于是得到了返回的索引号，即描述符表指向该打开的文件的索引。&lt;/p&gt;

&lt;h4 id=&quot;系统级描述符表&quot;&gt;系统级描述符表&lt;/h4&gt;

&lt;p&gt;The system-wide table of open file descriptions，打开文件描述表&lt;/p&gt;

&lt;p class=&quot;notice&quot;&gt;注意：该结构保存的是 file description，是比较详细的文件描述信息，而描述符 file descriptor 只是一个数字而已。&lt;/p&gt;

&lt;p&gt;内核针对 &lt;strong&gt;所有打开的文件&lt;/strong&gt; 会维护一个系统级的描述表，也称 &lt;strong&gt;打开文件表&lt;/strong&gt;（open file table），并将表中各条目称为 &lt;strong&gt;打开文件句柄&lt;/strong&gt;（open file handle），其中存储了与一个打开文件相关的全部信息：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;当前文件偏移量（调用 &lt;code class=&quot;highlighter-rouge&quot;&gt;read()&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;write()&lt;/code&gt; 时更新，或使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;lseek()&lt;/code&gt; 直接修改）&lt;/li&gt;
  &lt;li&gt;打开文件时所使用的状态标识（即，&lt;code class=&quot;highlighter-rouge&quot;&gt;open()&lt;/code&gt; 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;flags&lt;/code&gt; 参数）&lt;/li&gt;
  &lt;li&gt;文件访问模式（如调用 &lt;code class=&quot;highlighter-rouge&quot;&gt;open()&lt;/code&gt; 时所设置的只读模式、只写模式或读写模式）&lt;/li&gt;
  &lt;li&gt;与信号驱动相关的设置&lt;/li&gt;
  &lt;li&gt;对该文件 i-node 对象的引用&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Linux 系统中，系统级描述符表是由 &lt;code class=&quot;highlighter-rouge&quot;&gt;struct file&lt;/code&gt; 数据结构实现的。&lt;/p&gt;

&lt;h4 id=&quot;文件系统-i-node-表&quot;&gt;文件系统 i-node 表&lt;/h4&gt;

&lt;p&gt;每个文件系统都有一个 i-node 表，维护整个文件系统所有的文件，其中的信息包括：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;文件类型（例如：常规文件、套接字或 FIFO）和访问权限&lt;/li&gt;
  &lt;li&gt;一个指针，指向该文件所持有的锁列表&lt;/li&gt;
  &lt;li&gt;文件的各种属性，包括文件大小以及与不同类型操作相关的时间戳&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;三个数据结构的关系&quot;&gt;三个数据结构的关系&lt;/h4&gt;

&lt;p&gt;下图展示了文件描述符、打开的文件句柄以及 i-node 之间的关系，图中，两个进程拥有诸多打开的文件描述符。&lt;/p&gt;

&lt;figure class=&quot;&quot;&gt;
  &lt;img src=&quot;https://linotes.netlify.com/assets/images/2017.4.1.pcb.inode.png&quot; alt=&quot;&quot; /&gt;
  
&lt;/figure&gt;

&lt;p&gt;图中，进程 A 的描述符 1 和 20 是指向打开文件表中同一个句柄的，这种情况可能是由调用 &lt;code class=&quot;highlighter-rouge&quot;&gt;dup()&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;dup2()&lt;/code&gt; 或 &lt;code class=&quot;highlighter-rouge&quot;&gt;fcntl()&lt;/code&gt; 导致的，即 &lt;strong&gt;复制了描述符&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;而进程 A 的描述符 2 与进程 B 的描述符 2 同时指向句柄 73。这种情况可能是因为调用了 &lt;code class=&quot;highlighter-rouge&quot;&gt;fork()&lt;/code&gt;，如 A 和 B 可能是父子进程关系，或者，&lt;strong&gt;一个进程通过域套接字传递了一个描述符给另一个进程&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;进程 A 的描述符 0 与进程 B 的描述符 3 虽然指向不同的句柄，但这些句柄是指向同一个 i-node 表条目 1976 的，即指向同一个文件。当 &lt;strong&gt;一个进程重复两次打开同一文件&lt;/strong&gt; 时会导致该结果。&lt;/p&gt;

&lt;h4 id=&quot;总结&quot;&gt;总结&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;由于进程级文件描述符表的存在，不同的进程中会出现相同的文件描述符，它们可能指向同一个文件，也可能指向不同的文件&lt;/li&gt;
  &lt;li&gt;如果两个不同的描述符指向同一个句柄，则这两个描述符共享相同的文件偏移量。因此，如果文件偏移量被其中的一个描述符修改了（&lt;code class=&quot;highlighter-rouge&quot;&gt;read()&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;write()&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;lseek()&lt;/code&gt; 都可导致），则该修改对于另一个描述符也是可见的。无论这两个描述符是属于同一进程还是不同进程，该情况都适用。当文件状态被某个描述符修改时，结果也是一样的。&lt;/li&gt;
  &lt;li&gt;描述符的标签（如 &lt;code class=&quot;highlighter-rouge&quot;&gt;close-on-exec&lt;/code&gt;）对于进程和描述符是私有的，修改这些标签不会影响另一个描述符。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;管道&quot;&gt;管道&lt;/h2&gt;

&lt;p&gt;管道是进程间通信的主要手段之一。&lt;/p&gt;

&lt;p&gt;Linux 管道有两种：&lt;strong&gt;匿名管道&lt;/strong&gt; 与 &lt;strong&gt;命名管道&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;管道有一个特点，如果管道中没有数据，那么取管道数据的操作就会滞留，直到管道内进入数据，然后读出后才会终止这一操作；同理，写入管道的操作如果没有读取管道的操作，这一动作就会滞留。&lt;/p&gt;

&lt;h3 id=&quot;管道的实现机制&quot;&gt;管道的实现机制&lt;/h3&gt;

&lt;p&gt;管道是由 &lt;strong&gt;内核管理&lt;/strong&gt; 的一个 &lt;strong&gt;缓冲区&lt;/strong&gt;，相当于我们放入内存中的一个纸条。&lt;/p&gt;

&lt;p&gt;管道的一端连接一个进程的输出。这个进程会向管道中放入信息。管道的另一端连接一个进程的输入，这个进程取出被放入管道的信息。&lt;/p&gt;

&lt;p&gt;一个缓冲区不需要很大，一般为 4K，它被设计成为 &lt;strong&gt;环形的数据结构&lt;/strong&gt;，以便管道可以被循环利用。当管道中没有信息时，从管道中读取的进程会等待，直到另一端的进程放入信息。当管道被放满信息的时候，尝试放入信息的进程会等待，直到另一端的进程取出信息。当两个进程都终结的时候，管道也自动消失。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017.4.1.pipe.fork.png&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;从原理上，管道利用 &lt;code class=&quot;highlighter-rouge&quot;&gt;fork&lt;/code&gt; 机制建立，从而让两个进程可以连接到同一个管道上：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;最开始的时候，管道的两端都连接在同一个进程上&lt;/li&gt;
  &lt;li&gt;复用 fork 复制进程时，会将这两个连接也复制到新进程上&lt;/li&gt;
  &lt;li&gt;随后，每个进程关闭自己不需要的一个连接，剩下的连接就构成了管道&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;匿名管道&quot;&gt;匿名管道&lt;/h3&gt;

&lt;p class=&quot;notice--info&quot;&gt;一个匿名管道实际上就是个 &lt;strong&gt;只存在于内存中的文件&lt;/strong&gt;，对这个文件的操作要通过两个已经打开的文件进行，它们分别代表管道的两端。&lt;/p&gt;

&lt;p&gt;匿名管道使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;|&lt;/code&gt; 作为操作符，两端是两个普通的、匿名的、打开的文件描述符：一个 &lt;strong&gt;只读端&lt;/strong&gt; 和一个 &lt;strong&gt;只写端&lt;/strong&gt;，这就让其它进程无法连接到该匿名管道。&lt;/p&gt;

&lt;p&gt;管道两端的进程均将该管道 &lt;strong&gt;看做一个文件&lt;/strong&gt;，一个进程负责往管道中写内容，而另一个从管道中读取。这种传输遵循 “先入先出”（FIFO）的规则。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;file | less
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;为了执行以上命令，shell 会创建两个进程来分别执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;cat&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;less&lt;/code&gt;：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017.4.1.pipe.png&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;两个进程都连接到了管道上，写入进程 &lt;code class=&quot;highlighter-rouge&quot;&gt;cat&lt;/code&gt; 将其标准输出（描述符 1）连接到了管道的写入端，读取进程 &lt;code class=&quot;highlighter-rouge&quot;&gt;less&lt;/code&gt; 将其标准输入（描述符 0）连接到了管道的读入端。实际上，两个进程并不知道管道的存在，它们只是从标准文件描述符中读取数据和写入数据。&lt;/p&gt;

&lt;h4 id=&quot;匿名管道的特点&quot;&gt;匿名管道的特点&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;半双工&lt;/strong&gt;：数据只能向 &lt;strong&gt;一个方向&lt;/strong&gt; 流动，需要双方通信时，需建立起两个管道&lt;/li&gt;
  &lt;li&gt;管道没有名字：因此只能用于有 &lt;strong&gt;亲缘关系&lt;/strong&gt; 的进程，如父子进程或兄弟进程之间&lt;/li&gt;
  &lt;li&gt;单独构成一种 &lt;strong&gt;独立的文件系统&lt;/strong&gt;：管道对于其两端的进程而言，就是一个文件，但不是普通的文件，不属于某种文件系统，而是单独构成一种文件系统，且只存在于内存中&lt;/li&gt;
  &lt;li&gt;数据的读取和写入：一个进程向管道中写入的内容被另一端的进程读取。&lt;strong&gt;写入&lt;/strong&gt; 的内容每次都添加在管道 &lt;strong&gt;缓冲区&lt;/strong&gt; 的 &lt;strong&gt;末尾&lt;/strong&gt;，并且每次都是从缓冲区的 &lt;strong&gt;头部&lt;/strong&gt; 读取数据&lt;/li&gt;
  &lt;li&gt;向管道中写入数据时，linux 将不保证写入的原子性，管道缓冲区一有空闲区域，写进程就会试图向管道写入数据。如果读进程不读走管道缓冲区中的数据，那么写操作将一直 &lt;strong&gt;阻塞&lt;/strong&gt;。&lt;/li&gt;
  &lt;li&gt;只有在管道的 &lt;strong&gt;读端存在&lt;/strong&gt; 时，向管道中写入数据才有意义。否则，向管道中写入数据的进程将收到内核传来的 SIFPIPE 信号，应用程序可以处理该信号，也可以忽略（默认动作则是应用程序终止）。&lt;/li&gt;
  &lt;li&gt;管道的 &lt;strong&gt;缓冲区是有限的&lt;/strong&gt;：管道只存在于内存中，创建管道时，为缓冲区分配一个页面大小&lt;/li&gt;
  &lt;li&gt;管道所传递的是 &lt;strong&gt;无格式字节流&lt;/strong&gt;：这就要求管道双方必须事先约定好数据的格式，比如多少字节算作一个消息、命令或记录&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;命名管道&quot;&gt;命名管道&lt;/h3&gt;

&lt;p&gt;命名管道是为了解决匿名管道只能用于近亲进程之间通信的缺陷而设计的，也称 FIFO。&lt;/p&gt;

&lt;p&gt;命名管道是建立在 &lt;strong&gt;实际的磁盘介质或文件系统上的有自己名字的文件&lt;/strong&gt;，任何进程可以在任何时间通过文件名或路径名与该文件建立联系。即使与 FIFO 的创建进程不存在亲缘关系的进程，只要可以访问该路径，就能够彼此通过 FIFO 相互通信，因此，通过 FIFO，&lt;strong&gt;不相关的进程也能交换数据&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;FIFO 严格遵循先进先出（first in first out），对管道及 FIFO 的读总是从 &lt;strong&gt;开始处&lt;/strong&gt; 返回数据，对它们的写则把数据添加到 &lt;strong&gt;末尾&lt;/strong&gt;。它们不支持诸如 &lt;code class=&quot;highlighter-rouge&quot;&gt;lseek()&lt;/code&gt; 等文件定位操作。&lt;/p&gt;

&lt;h4 id=&quot;命名管道的特点&quot;&gt;命名管道的特点&lt;/h4&gt;

&lt;p&gt;从语义上来讲，FIFO 其实与匿名管道类似，其特点为：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在文件系统中，FIFO 拥有 &lt;strong&gt;名称&lt;/strong&gt;，并且是以 &lt;strong&gt;设备特殊文件&lt;/strong&gt; 的形式存在的；&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;任何进程&lt;/strong&gt; 都可以通过 FIFO &lt;strong&gt;共享&lt;/strong&gt; 数据；&lt;/li&gt;
  &lt;li&gt;FIFO 两端必须同时有读与写的进程，否则 FIFO 的数据流通将会阻塞；&lt;/li&gt;
  &lt;li&gt;匿名管道是由 shell 自动创建的，存在于内核中；而 FIFO 则是由程序创建的（如 &lt;code class=&quot;highlighter-rouge&quot;&gt;mkfifo&lt;/code&gt; 命令），存在于 &lt;strong&gt;文件系统&lt;/strong&gt; 中；&lt;/li&gt;
  &lt;li&gt;匿名管道是单向的字节流，而 FIFO 则是 &lt;strong&gt;双向&lt;/strong&gt; 的字节流；&lt;/li&gt;
&lt;/ul&gt;

&lt;p class=&quot;notice--info&quot;&gt;匿名管道与命名管道的唯一区别就是它们 &lt;strong&gt;创建和打开的方式&lt;/strong&gt;，一旦这些任务完成，对管道的 I/O 操作在语义上是相同的。&lt;/p&gt;

&lt;h4 id=&quot;fifo-文件&quot;&gt;FIFO 文件&lt;/h4&gt;

&lt;p&gt;FIFO（First in, First out）为一种特殊的文件类型，它在文件系统中有对应的路径。&lt;/p&gt;

&lt;p&gt;为了实现命名管道，引入了一种新的文件类型 —— FIFO 文件（遵循先进先出的原则）。实现一个命名管道实际上就是实现一个 FIFO 文件。命名管道一旦建立，其读、写及关闭操作都与普通管道完全相同。虽然 FIFO 文件的 inode 节点在磁盘上，但是仅是一个节点而已，&lt;strong&gt;文件的数据&lt;/strong&gt; 还是存在于 &lt;strong&gt;内存&lt;/strong&gt; 缓冲页面中，和普通管道相同。&lt;/p&gt;

&lt;p&gt;FIFO 实际上也 &lt;strong&gt;由内核管理&lt;/strong&gt;，不与硬盘打交道。当进程之间通过 FIFO 进行数据交换时，内核 &lt;strong&gt;直接&lt;/strong&gt; 在管道内交换数据，而不会写入文件系统。因此，FIFO 文件在文件系统中没有任何内容，文件系统的入口只是作为一个引用点，以便进程能够使用文件系统中的 &lt;strong&gt;文件名&lt;/strong&gt; 来访问管道。&lt;/p&gt;

&lt;p&gt;FIFO 可以被 &lt;strong&gt;多个进程&lt;/strong&gt; 打开，进行读取或写入。但一个 FIFO 文件即使被多个进程打开，内核也同时只维护一个管道对象。而且，FIFO 必须同时在 &lt;strong&gt;两端都打开&lt;/strong&gt; 才能开始传递数据。当只有一端打开时，FIFO 会暂时 &lt;strong&gt;阻塞&lt;/strong&gt;，直到另一端也被打开。&lt;/p&gt;

&lt;p&gt;另外，一个进程也可以用非阻塞模式打开 FIFO，在这种情况下，即使写入端没有打开，以 &lt;strong&gt;只读方式&lt;/strong&gt; 也能够成功打开；但是，只有另一端打开时，才能以只写方式打开，否则会报 “找不到设备或地址” 的错误。&lt;/p&gt;

&lt;p&gt;当 &lt;strong&gt;删除&lt;/strong&gt; FIFO 文件时，管道连接也随之 &lt;strong&gt;消失&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;FIFO 的好处在于我们可以通过文件的路径来识别管道，从而让没有亲缘关系的进程之间可以建立连接。&lt;/p&gt;

&lt;p&gt;在 Linux 中，无论处于阻塞还是非阻塞模式，都可以打开 FIFO 成功地读写。POSIX 没有定义该行为，因此可以利用这一点，在 &lt;strong&gt;没有读取端&lt;/strong&gt; 时，打开 FIFO 进行 &lt;strong&gt;写入&lt;/strong&gt;。如果一个进程要复用管道的两端与自己通讯，一定要谨防死锁。&lt;/p&gt;

&lt;h4 id=&quot;fifo-读写规则&quot;&gt;FIFO 读写规则&lt;/h4&gt;

&lt;h5 id=&quot;关于文件的阻塞&quot;&gt;关于文件的阻塞&lt;/h5&gt;

&lt;p&gt;所谓的阻塞，即内核在对文件操作 I/O 系统调用时，如果条件不满足（可能需要产生 I/O），则内核会将该进程 &lt;strong&gt;挂起&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;非阻塞则是发现条件不满足就会 &lt;strong&gt;立即返回&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;此外需要注意的是非阻塞并不是轮询，不然就和阻塞没多大区别了，它只是调用不成功就直接返回了，不会再去看啥时候会满足条件，而是由你自己去选择接下来该做什么。&lt;/p&gt;

&lt;p&gt;read/write 系统调用 &lt;strong&gt;不会直接读写文件&lt;/strong&gt;，只是去操作文件所对应的内存页（此时的页为虚拟内存）：&lt;/p&gt;

&lt;p&gt;对于 read，如果在页中找到了想要读写的数据，则直接从页中将数据 &lt;strong&gt;复制到用户缓存&lt;/strong&gt; 即可；如果要读的页没有找到，只能从磁盘读出该页内容，缓存在内存中即可。所谓的读过程，其实文件系统所要做的只是 &lt;strong&gt;锁定页面&lt;/strong&gt;，然后 &lt;strong&gt;构造一个读请求&lt;/strong&gt;，并将请求发给底层的 I/O 子系统即可。linux 内核中默认 read 系统调用是阻塞的，write 调用是非阻塞的，因为写入时只是将用户态的数据写入缓存页面中即可返回。&lt;/p&gt;

&lt;h5 id=&quot;从-fifo-中读取数据&quot;&gt;从 FIFO 中读取数据&lt;/h5&gt;

&lt;p&gt;&lt;strong&gt;【 约定 】&lt;/strong&gt;：一个进程想从 FIFO 中读取数据，如果 &lt;strong&gt;以阻塞模式打开&lt;/strong&gt; FIFO，称该进程的读操作为 “&lt;strong&gt;设置了阻塞标志&lt;/strong&gt; 的” 读操作。&lt;/p&gt;

&lt;p&gt;以下把为了写入而打开 FIFO 简称 &lt;strong&gt;写打开&lt;/strong&gt;，为了读取数据而打开 FIFO 简称 &lt;strong&gt;读打开&lt;/strong&gt;。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如果有进程写打开 FIFO，且当前 FIFO 内没有数据，则设置了阻塞标志的读操作将一直阻塞，没有设置阻塞标志的读操会返回 -1，errno 值为 EAGAIN，提醒以后再试。&lt;/li&gt;
  &lt;li&gt;对于设置了阻塞标志的读操作，如果 FIFO 内没有数据，或 FIFO 内虽然有数据，但其它进程在读，会造成阻塞。只要 FIFO 中有新的数据写入，就会解阻塞。&lt;/li&gt;
  &lt;li&gt;读打开的阻塞标志只对本进程第一个读操作起作用，如果本进程内有多个读操作序列，则在第一个读操作被唤醒并完成读操作后，其它将要执行的读操作将不再阻塞，即使在执行读操作时，FIFO 中没有数据也一样（此时，读操作返回 0）。&lt;/li&gt;
  &lt;li&gt;如果没有进程写打开 FIFO，则设置了阻塞标志的读操作会阻塞。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;注：如果 FIFO 中有数据，则设置了阻塞标志的读操作不会因为 FIFO 中的字节数小于请求读的字节数而阻塞，此时，读操作会返回 FIFO 中现有的数据量。&lt;/p&gt;

&lt;h5 id=&quot;向-fifo-中写入数据&quot;&gt;向 FIFO 中写入数据&lt;/h5&gt;

&lt;p&gt;【 约定 】：如果一个进程为了向 FIFO 中写入数据而以阻塞模式打开 FIFO，那么称该进程内的写操作为 &lt;strong&gt;设置了阻塞标志&lt;/strong&gt; 的写操作。&lt;/p&gt;

&lt;h6 id=&quot;对于设置了阻塞标志的写操作&quot;&gt;对于设置了阻塞标志的写操作：&lt;/h6&gt;

&lt;p&gt;当要写入的数据量不大于 &lt;code class=&quot;highlighter-rouge&quot;&gt;PIPE_BUF&lt;/code&gt; 时，linux 将保证写入的原子性。如果此时管道可用缓冲区不足以容纳要写入的字节数，则进入睡眠，直到当缓冲区中能够容纳要写入的字节数时，才开始进行一次性写操作。&lt;/p&gt;

&lt;p&gt;当要写入的数据量大于 &lt;code class=&quot;highlighter-rouge&quot;&gt;PIPE_BUF&lt;/code&gt; 时，linux 将不再保证写入的原子性。FIFO 缓冲区一有可用区域，写进程就会试图向管道写入数据，写操作在写完所有请求写的数据后返回。&lt;/p&gt;

&lt;h6 id=&quot;对于没有设置阻塞标志的写操作&quot;&gt;对于没有设置阻塞标志的写操作：&lt;/h6&gt;

&lt;p&gt;当要写入的数据量不大于 &lt;code class=&quot;highlighter-rouge&quot;&gt;PIPE_BUF&lt;/code&gt; 时，linux 将保证写入的原子性。如果当前 FIFO 空闲缓冲区能够容纳请求写入的字节数，写完后成功返回；如果当前 FIFO 空闲缓冲区不能够容纳请求写入的字节数，则返回 EAGAIN 错误，提醒以后再写；&lt;/p&gt;

&lt;p&gt;当要写入的数据量大于 &lt;code class=&quot;highlighter-rouge&quot;&gt;PIPE_BUF&lt;/code&gt; 时，linux 将不再保证写入的原子性。在写满所有 FIFO 空闲缓冲区后，写操作返回。&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;</content><author><name>Hawk Zhang</name><email>imhawkz@gmail.com</email></author><category term="文件描述符" /><category term="管道" /></entry><entry><title type="html">Bash 入门 03</title><link href="https://linotes.netlify.com/programming/bash03/" rel="alternate" type="text/html" title="Bash 入门 03" /><published>2017-05-03T00:00:00+08:00</published><updated>2017-05-03T00:00:00+08:00</updated><id>https://linotes.netlify.com/programming/bash03</id><content type="html" xml:base="https://linotes.netlify.com/programming/bash03/">&lt;h2 id=&quot;9-重复性任务&quot;&gt;9. 重复性任务&lt;/h2&gt;

&lt;h3 id=&quot;91-for-循环&quot;&gt;9.1 &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; 循环&lt;/h3&gt;

&lt;h4 id=&quot;911-工作方式&quot;&gt;9.1.1 工作方式&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;for NAME [in LIST ]; do COMMANDS; done&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;按照 LIST 列表，逐次执行 COMMANDS，直到 LIST 结束。&lt;/p&gt;

&lt;p&gt;如果 [in LIST ] 不存在，则会用 &lt;code class=&quot;highlighter-rouge&quot;&gt;in $@&lt;/code&gt; 替换，并用每个位置参数来执行一次 COMMANDS。&lt;/p&gt;

&lt;p&gt;执行的最后一条命令的退出状态作为该循环的返回状态。如果因为 LIST 没扩展出任何条目，而导致没有执行任何命令，返回状态为 0。&lt;/p&gt;

&lt;p&gt;NAME 可以是变量名，经常习惯地使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt; 做变量名。&lt;/p&gt;

&lt;p&gt;LIST 可以是任何字段的列表，列表也可以由命令生成。&lt;/p&gt;

&lt;p&gt;COMMANDS 可以是任何命令、脚本、程序、语句。&lt;/p&gt;

&lt;h4 id=&quot;912-范例&quot;&gt;9.1.2 范例&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;i &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;1..100..2&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;do  
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sum+=i&quot;&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;done  

&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sum=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$sum&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;i 按步数 2 不断递增，计算 sum 值。&lt;/p&gt;

&lt;h5 id=&quot;用命令替换来指定列表条目&quot;&gt;用命令替换来指定列表条目&lt;/h5&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;for i in &lt;/code&gt;cat list&lt;code class=&quot;highlighter-rouge&quot;&gt;; do cp &quot;$i&quot; &quot;$i&quot;.bak ; done&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;for i in &lt;/code&gt;ls /sbin&lt;code class=&quot;highlighter-rouge&quot;&gt;; do file /sbin/$i | grep ASCII; done&lt;/code&gt;&lt;/p&gt;

&lt;h5 id=&quot;使用变量内容来指定列表条目&quot;&gt;使用变量内容来指定列表条目&lt;/h5&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;LIST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.html&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;i &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$LIST&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do
     &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;NEWNAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/html/php/'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;beginfile &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NEWNAME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
     &lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'1,25d'&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;tac&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'1,21d'&lt;/span&gt;| &lt;span class=&quot;nb&quot;&gt;tac&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NEWNAME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
     &lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;endfile &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NEWNAME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;计次循环&quot;&gt;计次循环&lt;/h5&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt; i &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; i &amp;lt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 100&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; i + 2 &lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;do  
     &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sum += i&quot;&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;done  
&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sum=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$sum&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;i = 1&lt;/code&gt; ：循环变量赋初值&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;i &amp;lt;= 100&lt;/code&gt; ：条件表达式，退出状态为 0 则继续循环，否则退出循环&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;i = i + 2&lt;/code&gt; ：循环变量自增&lt;/p&gt;

&lt;h3 id=&quot;92-while-循环&quot;&gt;9.2 &lt;code class=&quot;highlighter-rouge&quot;&gt;while&lt;/code&gt; 循环&lt;/h3&gt;

&lt;p&gt;也称为 &lt;strong&gt;前测试循环语句&lt;/strong&gt;，利用一个 &lt;strong&gt;条件&lt;/strong&gt; 来 &lt;strong&gt;控制&lt;/strong&gt; 是否继续 &lt;strong&gt;重复&lt;/strong&gt; 执行这个语句。&lt;/p&gt;

&lt;h4 id=&quot;921-工作方式&quot;&gt;9.2.1 工作方式&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;while CONTROL-COMMAND; do CONSEQUENT-COMMANDS; done&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;只要 CONTROL-COMMAND 条件为真，就不停地执行执行 CONSEQUENT-COMMANDS。一旦条件为假，立即退出循环，继续执行 done 之后，即循环之外的命令。&lt;/p&gt;

&lt;p&gt;为了 &lt;strong&gt;避免死循环&lt;/strong&gt;，必须保证循环体中包含 &lt;strong&gt;循环出口条件&lt;/strong&gt;，即表达式存在退出状态为非 0 的情况。&lt;/p&gt;

&lt;h4 id=&quot;922-范例&quot;&gt;9.2.2 范例&lt;/h4&gt;

&lt;h5 id=&quot;一般用法&quot;&gt;一般用法&lt;/h5&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-lt&lt;/span&gt; 4 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;do
&lt;/span&gt;xterm &amp;amp;
&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$[$i&lt;/span&gt;+1]
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;嵌套&quot;&gt;嵌套&lt;/h5&gt;

&lt;p&gt;以下脚本目的是把网络摄像头拍摄的照片自动归档。摄像头每 5 分钟会拍一张照片。&lt;/p&gt;

&lt;p&gt;每天创建一个当天的目录，每小时新建一个目录，用于保存这一小时内拍摄的照片。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;PICSDIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/home/carol/pics
&lt;span class=&quot;nv&quot;&gt;WEBDIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/var/www/carol/webcam

&lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do
	&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DATE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt; +%Y%m%d&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
	&lt;span class=&quot;nv&quot;&gt;HOUR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt; +%H&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$WEBDIR&lt;/span&gt;/&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$DATE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOUR&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-ne&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;00&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do
		&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DESTDIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$WEBDIR&lt;/span&gt;/&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$DATE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;/&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HOUR&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
		&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$DESTDIR&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
		&lt;span class=&quot;nb&quot;&gt;mv&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$PICDIR&lt;/span&gt;/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.jpg &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$DESTDIR&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;/
		&lt;span class=&quot;nb&quot;&gt;sleep &lt;/span&gt;3600
		&lt;span class=&quot;nv&quot;&gt;HOUR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt; +%H&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;done
done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; 语句时，代表无条件执行，直到被强制中断，也许是被 &lt;code class=&quot;highlighter-rouge&quot;&gt;kill&lt;/code&gt; 信号，或 &lt;code class=&quot;highlighter-rouge&quot;&gt;^C&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;下面的脚本可以用于生成测试文件：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do
&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;touch &lt;/span&gt;pic-&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt; +%s&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;.jpg
&lt;span class=&quot;nb&quot;&gt;sleep &lt;/span&gt;300
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;每 5 分钟生成一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;.jpg&lt;/code&gt; 文件。&lt;/p&gt;

&lt;h5 id=&quot;用键盘输入来控制循环&quot;&gt;用键盘输入来控制循环&lt;/h5&gt;

&lt;p&gt;以下脚本可以用 &lt;code class=&quot;highlighter-rouge&quot;&gt;^C&lt;/code&gt; 来终止运行：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;FORTUNE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/games/fortune

&lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do
&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;On which topic do you want advice?&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;topics&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
politics
startrek
kernelnewbies
sports
bofh-excuses
magic
love
literature
drugs
education
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;topics

&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo
echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Make your choice: &quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;topic
&lt;span class=&quot;nb&quot;&gt;echo
echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Free advice on the topic of &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$topic&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;: &quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$FORTUNE&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$topic&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;计算平均值&quot;&gt;计算平均值&lt;/h5&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;SCORE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;AVERAGE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SUM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;NUM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do

  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Enter your score [0-100%] ('q' for quit): &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;SCORE&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SCORE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &amp;lt; &lt;span class=&quot;s2&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SCORE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;100&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Be serious.  Common, try again: &quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SCORE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;q&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Average rating: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$AVERAGE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;%.&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;break
  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SUM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$[$SUM&lt;/span&gt; + &lt;span class=&quot;nv&quot;&gt;$SCORE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;NUM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$[$NUM&lt;/span&gt; + 1]
    &lt;span class=&quot;nv&quot;&gt;AVERAGE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$[$SUM&lt;/span&gt; / &lt;span class=&quot;nv&quot;&gt;$NUM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;fi

done

&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Exiting.&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;93--until-循环&quot;&gt;9.3  &lt;code class=&quot;highlighter-rouge&quot;&gt;until&lt;/code&gt; 循环&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;until TEST-COMMAND; do CONSEQUENT-COMMANDS; done&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;只要条件不满足，就一直循环运行，一旦满足，退出循环。&lt;/p&gt;

&lt;h4 id=&quot;范例&quot;&gt;范例&lt;/h4&gt;

&lt;p&gt;还是网络摄像头那个例子，加上磁盘空间的检测，一于磁盘空间不够用（占用率 &amp;gt; 90%），就自动转移图片。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do
	&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DISKFUL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$WEBDIR&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; File | &lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{print $5 }'&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;cut&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;%&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f1&lt;/span&gt; -&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;until&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$DISKFUL&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-ge&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;90&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do

        	&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DATE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt; +%Y%m%d&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
        	&lt;span class=&quot;nv&quot;&gt;HOUR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt; +%H&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
        	&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$WEBDIR&lt;/span&gt;/&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$DATE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

        	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOUR&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-ne&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;00&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do
                	&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DESTDIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$WEBDIR&lt;/span&gt;/&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$DATE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;/&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HOUR&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
                	&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$DESTDIR&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
                	&lt;span class=&quot;nb&quot;&gt;mv&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$PICDIR&lt;/span&gt;/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.jpg &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$DESTDIR&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;/
                	&lt;span class=&quot;nb&quot;&gt;sleep &lt;/span&gt;3600
                	&lt;span class=&quot;nv&quot;&gt;HOUR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt; +%H&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
        	&lt;span class=&quot;k&quot;&gt;done

	&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DISKFULL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$WEBDIR&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; File | &lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{ print $5 }'&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;cut&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;%&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f1&lt;/span&gt; -&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;done

	&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TOREMOVE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;find &lt;span class=&quot;nv&quot;&gt;$WEBDIR&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-type&lt;/span&gt; d &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-mtime&lt;/span&gt; +30&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;i &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$TOREMOVE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do
		&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;done

done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;94-io-重定向和循环&quot;&gt;9.4 I/O 重定向和循环&lt;/h3&gt;

&lt;h4 id=&quot;941-输入重定向&quot;&gt;9.4.1 输入重定向&lt;/h4&gt;

&lt;p&gt;除了通过一条命令的测试结果或用户的输入来控制循环以外，还可以指定一个文件，通过它来读取输入，借此控制循环。这种情况下，&lt;code class=&quot;highlighter-rouge&quot;&gt;read&lt;/code&gt; 通常是控制命令。只要有输入行的数据交给循环，循环的命令就一直执行。读完所有输入行以后，循环退出。&lt;/p&gt;

&lt;p&gt;因为循环结构基本上可以看作是一条命令的结构，因此重定向应该放在 &lt;code class=&quot;highlighter-rouge&quot;&gt;done&lt;/code&gt; 语句之后。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;command &amp;lt; file&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;what the fuck????&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;942-输出重定向&quot;&gt;9.4.2 输出重定向&lt;/h4&gt;

&lt;p&gt;下例中，&lt;code class=&quot;highlighter-rouge&quot;&gt;find&lt;/code&gt; 命令的输出作为 &lt;code class=&quot;highlighter-rouge&quot;&gt;read&lt;/code&gt; 命令的输入，用来控制 &lt;code class=&quot;highlighter-rouge&quot;&gt;while&lt;/code&gt; 循环：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;ARCHIVENR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt; +%Y%m%d&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;DESTDIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PWD&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/archive-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ARCHIVENR&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$DESTDIR&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

find &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PWD&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-type&lt;/span&gt; f &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-mtime&lt;/span&gt; +5 | &lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;$'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;00'&lt;/span&gt; file

&lt;span class=&quot;k&quot;&gt;do
&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;gzip&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$file&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;mv&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$file&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;.gz &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$DESTDIR&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$file&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; archived&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在当前目录创建子目录，把旧文件都移到那里。&lt;/p&gt;

&lt;h3 id=&quot;95-break-与-continue&quot;&gt;9.5 &lt;code class=&quot;highlighter-rouge&quot;&gt;break&lt;/code&gt; 与 &lt;code class=&quot;highlighter-rouge&quot;&gt;continue&lt;/code&gt;&lt;/h3&gt;

&lt;h4 id=&quot;951-break&quot;&gt;9.5.1 &lt;code class=&quot;highlighter-rouge&quot;&gt;break&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;break&lt;/code&gt; 语句用于在正常结束之前退出当前循环。&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;注意：&lt;code class=&quot;highlighter-rouge&quot;&gt;break&lt;/code&gt; 只是退出当前循环，而非脚本。&lt;/p&gt;

&lt;p&gt;在嵌套循环中，可以指定要退出哪个循环。&lt;/p&gt;

&lt;h4 id=&quot;952-continue&quot;&gt;9.5.2 &lt;code class=&quot;highlighter-rouge&quot;&gt;continue&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;continue&lt;/code&gt; 语句用于继续迭代循环。&lt;/p&gt;

&lt;p&gt;在 &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; 循环中使用时，控制变量会取列表中下一个元素的值。&lt;/p&gt;

&lt;p&gt;在 &lt;code class=&quot;highlighter-rouge&quot;&gt;while&lt;/code&gt; 或 &lt;code class=&quot;highlighter-rouge&quot;&gt;until&lt;/code&gt; 中使用时，则继续执行 TEST-COMMAND。&lt;/p&gt;

&lt;p&gt;以下脚本会把当前目录中所有文件名有含有大写字母的，一律修改为小写字母：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;LIST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;name &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$LIST&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do

if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt;:upper:]]&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
continue&lt;/span&gt;  
&lt;span class=&quot;c&quot;&gt;# 如果文件名中不含大写字母，循环运行到这一步就不再往下运行，&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 而是直接取列表中下一个文件名&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi

&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ORIG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;NEW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;tr&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'A-Z'&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'a-z'&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;mv&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ORIG&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NEW&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;new name for &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ORIG&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; is &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NEW&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;96-用-select-命令做选择菜单&quot;&gt;9.6 用 &lt;code class=&quot;highlighter-rouge&quot;&gt;select&lt;/code&gt; 命令做选择菜单&lt;/h3&gt;

&lt;h4 id=&quot;select-命令&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;select&lt;/code&gt; 命令&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;select&lt;/code&gt; 结构可以生成菜单：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;select WORD [in LIST]; do RESPECTIVE-COMMANDS; done&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;LIST 会被扩展开，生成一个项目列表。该扩展会被输出到标准错误，每个项目前面会自动加上一个序号。如果 &lt;code class=&quot;highlighter-rouge&quot;&gt;in LIST&lt;/code&gt; 不存在，则会把位置参数做为项目打印出来。&lt;/p&gt;

&lt;p&gt;在打印出所有项目后，会打印 &lt;code class=&quot;highlighter-rouge&quot;&gt;PS3&lt;/code&gt; 提示符，并且会从标准输入读取一行。如果该行包含与项目对应的数字之一，WORD 的值会被设置成该项目的名称。如果读取到的输入是空行，这些项目列表和提示符会重新显示一次。&lt;/p&gt;

&lt;p&gt;如果读取到 EOF 字符，循环会退出。&lt;/p&gt;

&lt;p&gt;因为大部分用户都不了解什么组合键是用来产生 EOF 的，因此，如果能单独添加一个含有 &lt;code class=&quot;highlighter-rouge&quot;&gt;break&lt;/code&gt; 命令的项目，算是对用户比较友好了。&lt;/p&gt;

&lt;p&gt;读取到的所有其它的值都会把 WORD 设置为空字符串。&lt;/p&gt;

&lt;p&gt;读取到的这一行内容被保存到变量 &lt;code class=&quot;highlighter-rouge&quot;&gt;REPLY&lt;/code&gt; 中。&lt;/p&gt;

&lt;p&gt;用户每次做出选择，都会执行 RESPECTIVE-COMMANDS 中的命令，直到做出的选择导致了 &lt;code class=&quot;highlighter-rouge&quot;&gt;break&lt;/code&gt; 语句的运行，才会退出循环。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;This script can make any of the files in this directory private.&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Enter the number of the file you want to protect:&quot;&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;PS3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Your choice: &quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;QUIT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;QUIT THIS PROGRAM - I feel safe now.&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;touch&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$QUIT&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;select &lt;/span&gt;FILENAME &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;do
  case&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$FILENAME&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$QUIT&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Exiting.&quot;&lt;/span&gt;
          &lt;span class=&quot;nb&quot;&gt;break&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;You picked &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$FILENAME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; (&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$REPLY&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;)&quot;&lt;/span&gt;
          &lt;span class=&quot;nb&quot;&gt;chmod &lt;/span&gt;go-rwx &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$FILENAME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;esac&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done
&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$QUIT&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;子菜单&quot;&gt;子菜单&lt;/h4&gt;

&lt;p&gt;通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;select&lt;/code&gt; 结构的嵌套就可以实现子菜单。&lt;/p&gt;

&lt;p&gt;默认情况下，进行嵌套 &lt;code class=&quot;highlighter-rouge&quot;&gt;select&lt;/code&gt; 循环时，&lt;code class=&quot;highlighter-rouge&quot;&gt;PS3&lt;/code&gt; 变量不会改变，如果需要，可以在子 &lt;code class=&quot;highlighter-rouge&quot;&gt;select&lt;/code&gt; 结构中单独设定。&lt;/p&gt;

&lt;h3 id=&quot;97-shift&quot;&gt;9.7 &lt;code class=&quot;highlighter-rouge&quot;&gt;shift&lt;/code&gt;&lt;/h3&gt;

&lt;h4 id=&quot;971-shift-简介&quot;&gt;9.7.1 &lt;code class=&quot;highlighter-rouge&quot;&gt;shift&lt;/code&gt; 简介&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;shift&lt;/code&gt; 为 bash 内建命令，接受一个数字 N 做为参数。所有的位置参数会由于这个数字 N 而整体向左移动。于是原来的位置参数 &lt;code class=&quot;highlighter-rouge&quot;&gt;$#&lt;/code&gt; 变成了 &lt;code class=&quot;highlighter-rouge&quot;&gt;$# - N+1&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;假如有个命令使用了 10 个参数，而且 N=4，则 &lt;code class=&quot;highlighter-rouge&quot;&gt;$4&lt;/code&gt; 变成了 &lt;code class=&quot;highlighter-rouge&quot;&gt;$1&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;$5&lt;/code&gt; 变成了 &lt;code class=&quot;highlighter-rouge&quot;&gt;$2&lt;/code&gt; 等等。而原来的 &lt;code class=&quot;highlighter-rouge&quot;&gt;$1&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;$2&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;$3&lt;/code&gt; 被 &lt;strong&gt;丢弃&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;如果 N 为 0 或大于 &lt;code class=&quot;highlighter-rouge&quot;&gt;$#&lt;/code&gt;，位置参数则不会改变，&lt;code class=&quot;highlighter-rouge&quot;&gt;shift&lt;/code&gt; 命令也没有什么效果。如果 N 不存在，会假定 N=1。&lt;/p&gt;

&lt;p&gt;如果 N 介于 0 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;$#&lt;/code&gt; 之间，则返回状态为 0，否则为非 0。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;shift&lt;/code&gt; 应用的场合主要是某个命令要使用的参数不能提前预知时，用户则可以提前准备许多参数。这种情况下，通常使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;while&lt;/code&gt; 循环来处理这些参数，把 &lt;code class=&quot;highlighter-rouge&quot;&gt;(( $# ))&lt;/code&gt; 做为测试条件。只要参数的总数大于 0，条件就为真。&lt;code class=&quot;highlighter-rouge&quot;&gt;$1&lt;/code&gt; 变量和 &lt;code class=&quot;highlighter-rouge&quot;&gt;shift&lt;/code&gt; 语句会处理每一个参数。每次执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;shift&lt;/code&gt; 以后，参数的总数就会减少，直到最终为 0，&lt;code class=&quot;highlighter-rouge&quot;&gt;while&lt;/code&gt; 循环就会退出。&lt;/p&gt;

&lt;h5 id=&quot;范例-1&quot;&gt;范例&lt;/h5&gt;

&lt;p&gt;以下脚本用于删除超过一年以上未访问的文件，使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;shift&lt;/code&gt; 语句来处理由 &lt;code class=&quot;highlighter-rouge&quot;&gt;find&lt;/code&gt; 生成的文件列表中的每个文件。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;USAGE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Usage: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; dir1 dir2 dir3 ... dirN&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;$#&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
	&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$USAGE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
&lt;span class=&quot;k&quot;&gt;fi

while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;$#&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do

if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
	&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Empty directory, nothing to be done.&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else
	&lt;/span&gt;find &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-type&lt;/span&gt; f &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-atime&lt;/span&gt; +365 | xargs &lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi

&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;shift

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;以下脚本用于安装软件包：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$# &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-lt&lt;/span&gt; 1 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
        &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Usage: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; package(s)&quot;&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
&lt;span class=&quot;k&quot;&gt;fi
while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$#)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do
	&lt;/span&gt;yum &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CONFIRM&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
y
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CONFIRM
&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;shift
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;10-变量&quot;&gt;10. 变量&lt;/h2&gt;

&lt;h3 id=&quot;101-变量的类别&quot;&gt;10.1 变量的类别&lt;/h3&gt;

&lt;h4 id=&quot;1011-一般的赋值方法&quot;&gt;10.1.1 一般的赋值方法&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;VARIABLE=string&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;通常在脚本开始处对常量进行赋值，以便整个脚本中可以引用变量名。&lt;/p&gt;

&lt;h4 id=&quot;1012-delcare-命令&quot;&gt;10.1.2 &lt;code class=&quot;highlighter-rouge&quot;&gt;delcare&lt;/code&gt; 命令&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;declare&lt;/code&gt; 为内建命令，用于限制为该变量赋值的范围。一旦使用了 &lt;code class=&quot;highlighter-rouge&quot;&gt;delcare&lt;/code&gt; 对变量的赋值范围进行限定，它就只能接受这类的数据了。&lt;/p&gt;

&lt;p&gt;常用的限制为整数、常量或数组。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;declare OPTION(s) VARIABLE=value&lt;/code&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;选项&lt;/th&gt;
      &lt;th&gt;用途&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-a&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;变量是数组&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-f&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;仅使用函数名做变量&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-i&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;变量会被作为整数处理&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-p&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;显示每个变量的属性和值，只要使用了 &lt;code class=&quot;highlighter-rouge&quot;&gt;-p&lt;/code&gt; 选项，其它所有选项都会被忽略&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-r&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;让变量为只读。不能被后续命令所赋值，也不能被 unset&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-t&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;为变量设置 trace 属性&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-x&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;标记变量，用于通过环境变量导出到后续命令&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;以上选项，如果把 &lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt; 变成 &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; 就会关闭该选项。&lt;/p&gt;

&lt;p&gt;如果 &lt;code class=&quot;highlighter-rouge&quot;&gt;declare&lt;/code&gt; 是在函数中进行的，会创建局部变量。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;declare&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;VARIABLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;12
&lt;span class=&quot;nv&quot;&gt;$ VARIABLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;string
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$VARIABLE&lt;/span&gt;
0
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;declare&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; VARIABLE
&lt;span class=&quot;nb&quot;&gt;declare&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;VARIABLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;bash 可以用 &lt;code class=&quot;highlighter-rouge&quot;&gt;-i&lt;/code&gt; 声明数字变量，但没有选项可以声明字符串变量。因为每个变量默认可以赋予任何数据。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ OTHERVAR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;blah
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;declare&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; OTHERVAR
&lt;span class=&quot;nb&quot;&gt;declare&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;OTHERVAR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;blah&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;1013-常量&quot;&gt;10.1.3 常量&lt;/h4&gt;

&lt;p&gt;bash 中，通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;readonly&lt;/code&gt; 命令来创建只读变量，来创建常量。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;readonly OPTION VARIABLE(s)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;一经该命令的赋值，该变量的值就再也无法被后续命令修改。&lt;/p&gt;

&lt;p&gt;如果使用了 &lt;code class=&quot;highlighter-rouge&quot;&gt;-f&lt;/code&gt; 选项，则每个变量都是指一个 shell 函数。&lt;/p&gt;

&lt;p&gt;如果使用了 &lt;code class=&quot;highlighter-rouge&quot;&gt;-a&lt;/code&gt; 选项，每个变量都是指一个数组变量。&lt;/p&gt;

&lt;p&gt;如果使用了 &lt;code class=&quot;highlighter-rouge&quot;&gt;-p&lt;/code&gt; 选项，输出可以被当作输入来重用。&lt;/p&gt;

&lt;p&gt;如果没有使用参数，或使用了 &lt;code class=&quot;highlighter-rouge&quot;&gt;-p&lt;/code&gt; 选项，会列出所有只读变量。&lt;/p&gt;

&lt;h3 id=&quot;102-数组变量&quot;&gt;10.2 数组变量&lt;/h3&gt;

&lt;h4 id=&quot;1021-创建数组&quot;&gt;10.2.1 创建数组&lt;/h4&gt;

&lt;p&gt;数组变量包含多个值，所有的变量都可以做为数组来使用。没有数组大小的限制，也不必连续赋值。&lt;/p&gt;

&lt;p&gt;数组是从 0 开始索引的。&lt;/p&gt;

&lt;h5 id=&quot;为数组的某个索引赋值&quot;&gt;为数组的某个索引赋值&lt;/h5&gt;

&lt;p&gt;间接声明数组的一种方式。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ARRAY[INDEXNR]=value&lt;/code&gt;   如 &lt;code class=&quot;highlighter-rouge&quot;&gt;SHIT[0]=thor&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;INDEXNR&lt;/code&gt; 会以算术表达式被对待，必须最终算出一个正数。&lt;/p&gt;

&lt;h5 id=&quot;显式声明数组&quot;&gt;显式声明数组&lt;/h5&gt;

&lt;p&gt;可以用 &lt;code class=&quot;highlighter-rouge&quot;&gt;declare&lt;/code&gt; 显式声明一个数组：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;declare -a SHIT&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;声明时如果使用了索引编号，会被忽略。&lt;/p&gt;

&lt;p&gt;可以使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;declare&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;readonly&lt;/code&gt; 来为数组设定属性。属性会应用到数组中的所有变量中。&lt;/p&gt;

&lt;h5 id=&quot;为数组全部索引赋值&quot;&gt;为数组全部索引赋值&lt;/h5&gt;

&lt;p&gt;间接声明数组的另一种方式。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ARRAY=(value1 value2 ... valueN)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;赋值时如果没有指定索引值，则索引会从 0 开始。&lt;/p&gt;

&lt;h4 id=&quot;1022-引用数组变量&quot;&gt;10.2.2 引用数组变量&lt;/h4&gt;

&lt;p&gt;要想引用数组中某个项目的内容，需要用大括号 &lt;code class=&quot;highlighter-rouge&quot;&gt;{ARRAY[5]}&lt;/code&gt;。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ ARRAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;one two three&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ARRAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[*]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
one two three

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ARRAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
one[&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ARRAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[2]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
three
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果索引号为 &lt;code class=&quot;highlighter-rouge&quot;&gt;@&lt;/code&gt; 或 &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; 则相当于引用了数组中所有成员。&lt;/p&gt;

&lt;p&gt;如果没有索引号，则相当于引用第一个索引，即 ARRAY[0]。&lt;/p&gt;

&lt;h4 id=&quot;1023-删除数据变量&quot;&gt;10.2.3 删除数据变量&lt;/h4&gt;

&lt;p&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;unset&lt;/code&gt; 可以清除整个数组或某个变量成员。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;unset &lt;/span&gt;ARRAY[1]
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ARRAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[*]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
one three four

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;unset &lt;/span&gt;ARRAY
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ARRAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[*]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&amp;lt;&lt;span class=&quot;nt&quot;&gt;--no&lt;/span&gt; output--&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;1024-范例&quot;&gt;10.2.4 范例&lt;/h4&gt;

&lt;p&gt;把 Apache 配置文件分发到各主机。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;whoami&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'root'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
        &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Must be root to run &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi
if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-z&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
        &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Usage: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &amp;lt;/path/to/httpd.conf&amp;gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
&lt;span class=&quot;k&quot;&gt;fi

&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;httpd_conf_new&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;httpd_conf_path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/usr/local/apache/conf&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;htuser

&lt;span class=&quot;nv&quot;&gt;farm_hosts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;web03 web04 web05 web06 web07&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;i &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;farm_hosts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[@]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do
        &lt;/span&gt;su &lt;span class=&quot;nv&quot;&gt;$login&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;scp &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$httpd_conf_new&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;httpd_conf_path&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
        su &lt;span class=&quot;nv&quot;&gt;$login&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ssh &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; sudo /usr/local/apache/bin/apachectl graceful&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;done
&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;某公司网站上有一些演示程序，每周要由人对所有这些程序进程测试。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# This is get-tester-address.sh&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# First, we test whether bash supports arrays.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# (Support for arrays was only added recently.)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
whotest[0]&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'test'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Failure: arrays not supported in this version of
bash.'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Our list of candidates. (Feel free to add or&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# remove candidates.)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;wholist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;
     &lt;span class=&quot;s1&quot;&gt;'Bob Smith &amp;lt;bob@example.com&amp;gt;'&lt;/span&gt;
     &lt;span class=&quot;s1&quot;&gt;'Jane L. Williams &amp;lt;jane@example.com&amp;gt;'&lt;/span&gt;
     &lt;span class=&quot;s1&quot;&gt;'Eric S. Raymond &amp;lt;esr@example.com&amp;gt;'&lt;/span&gt;
     &lt;span class=&quot;s1&quot;&gt;'Larry Wall &amp;lt;wall@example.com&amp;gt;'&lt;/span&gt;
     &lt;span class=&quot;s1&quot;&gt;'Linus Torvalds &amp;lt;linus@example.com&amp;gt;'&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Count the number of possible testers.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# (Loop until we find an empty string.)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;wholist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[count]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;x&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;do
   &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$((&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Now we calculate whose turn it is.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;week&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'+%W'&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;    	&lt;span class=&quot;c&quot;&gt;# The week of the year (0..53).&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;week&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;week&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;#0&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;       	&lt;span class=&quot;c&quot;&gt;# Remove possible leading zero.&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;index = &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$week&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; % &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$count&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;# week modulo count = the lucky person&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;wholist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[index]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;     &lt;span class=&quot;c&quot;&gt;# Get the lucky person's e-mail address.&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$email&lt;/span&gt;     	&lt;span class=&quot;c&quot;&gt;# Output the person's e-mail address.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;103-对变量的操作&quot;&gt;10.3 对变量的操作&lt;/h3&gt;

&lt;h4 id=&quot;1031-变量长度&quot;&gt;10.3.1 变量长度&lt;/h4&gt;

&lt;p&gt;用 &lt;code class=&quot;highlighter-rouge&quot;&gt;${#VAR}&lt;/code&gt; 来表示变量的字符总数。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$SHELL&lt;/span&gt;
/bin/bash

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${#&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SHELL&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
9
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果变量是 &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; 或 &lt;code class=&quot;highlighter-rouge&quot;&gt;@&lt;/code&gt;，其变量值会用位置参数的总数或数组元素的数量来替换。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ ARRAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;one two three&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${#&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ARRAY&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;1032-变量的转换&quot;&gt;10.3.2 变量的转换&lt;/h4&gt;

&lt;h5 id=&quot;变量替换&quot;&gt;变量替换&lt;/h5&gt;

&lt;h6 id=&quot;var-word--或--varword&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${VAR:-WORD}&lt;/code&gt;  或  &lt;code class=&quot;highlighter-rouge&quot;&gt;${VAR:=WORD}&lt;/code&gt;&lt;/h6&gt;

&lt;p&gt;如果 VAR 未定义或为空，就用 WORD 的扩展来替换，否则用变量值替换。即 &lt;strong&gt;只替换空变量&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;常用来做条件测试。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ TEST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'mother fucker!'&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TEST&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
mother fucker!
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TEST&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
mother fucker!
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;unset &lt;/span&gt;TEST
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TEST&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
hello
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TEST&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果 &lt;code class=&quot;highlighter-rouge&quot;&gt;TEST&lt;/code&gt; 未定义或为空，则结果会显示 shit，否则显示 &lt;code class=&quot;highlighter-rouge&quot;&gt;TEST&lt;/code&gt; 变量的值。&lt;/p&gt;

&lt;h6 id=&quot;varother-或-varother&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${var+$OTHER}&lt;/code&gt; 或 &lt;code class=&quot;highlighter-rouge&quot;&gt;${var:+$OTHER}&lt;/code&gt;&lt;/h6&gt;

&lt;p&gt;如果变量已定义，表达式求值结果为 &lt;code class=&quot;highlighter-rouge&quot;&gt;$OTHER&lt;/code&gt;，否则为空。即 &lt;strong&gt;只替换非空变量&lt;/strong&gt;。&lt;/p&gt;

&lt;h5 id=&quot;删除子串&quot;&gt;删除子串&lt;/h5&gt;

&lt;h6 id=&quot;varoffsetlength&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${VAR:OFFSET:LENGTH}&lt;/code&gt;&lt;/h6&gt;

&lt;p&gt;😈 想像在 WORD 中编辑文字，光标在该字符串最前面，现在你想从字符串中截取一部分留下，其余的删除。该语法是指光标向右移动 OFFSET 个字符，从新位置向右保留 LENGTH 个字符。其余的删除。如果 LENGTH 被省略，则从新光标处到字符串结尾的字符都保留。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2017.3.3.bash03.strip.substring.png&quot; alt=&quot;image-center&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;STRING&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;thisisaverylongname&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;STRING&lt;/span&gt;:4&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
isaverylongname
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;STRING&lt;/span&gt;:11:4&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
long
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h6 id=&quot;varword-及-varword&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${VAR#WORD}&lt;/code&gt; 及 &lt;code class=&quot;highlighter-rouge&quot;&gt;${VAR##WORD}&lt;/code&gt;&lt;/h6&gt;

&lt;p&gt;在 &lt;code class=&quot;highlighter-rouge&quot;&gt;VAR&lt;/code&gt; 中删除子串 &lt;code class=&quot;highlighter-rouge&quot;&gt;WORD&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;WORD&lt;/code&gt; 会被扩展以生成一个模板，用来匹配子串。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${VAR#WORD}&lt;/code&gt; ：从 VAR 的开头删除 WORD 的最短匹配&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${VAR##WORD}&lt;/code&gt; ：从 VAR 的开头删除 WORD 的最长匹配&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ VAR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;abcdefg
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;VAR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;#a*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
bcdefg
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;VAR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;##a*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果 VAR 是 &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; 或 &lt;code class=&quot;highlighter-rouge&quot;&gt;@&lt;/code&gt;，则删除模板的操作符被依次应用于每个位置参数。&lt;/p&gt;

&lt;p&gt;如果 VAR 是用 &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; 或 &lt;code class=&quot;highlighter-rouge&quot;&gt;@&lt;/code&gt; 表示的数组变量，操作符则依次应用于数组中的每个成员。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ARRAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[*]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
one two one three one four

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ARRAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[*]#one&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
two three four

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ARRAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[*]#t&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
one wo one hree one four

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ARRAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[*]#t*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
one wo one hree one four

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ARRAY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[*]##t*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
one one one four
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h6 id=&quot;varword-及-varword-1&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${VAR%WORD}&lt;/code&gt; 及 &lt;code class=&quot;highlighter-rouge&quot;&gt;${VAR%%WORD}&lt;/code&gt;&lt;/h6&gt;

&lt;p&gt;与上面相反，这是从字符串的尾部开始匹配的。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$STRING&lt;/span&gt;
thisisaverylongname

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;STRING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%name&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
thisisaverylong
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;对变量值进行部分替换&quot;&gt;对变量值进行部分替换&lt;/h5&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${VAR/PATTERN/STRING}&lt;/code&gt;  替换第一个匹配&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${VAR//PATTERN/STRING}&lt;/code&gt;  替换所有匹配&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;STRING&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;thisisaverylongname&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;STRING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/name/string&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
thisisaverylongstring
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;11-函数&quot;&gt;11. 函数&lt;/h2&gt;

&lt;h3 id=&quot;111-函数简介&quot;&gt;11.1 函数简介&lt;/h3&gt;

&lt;p&gt;函数就是把命令组合在一起，便于随后执行。给组合（即 routine）起个名字。函数的名字在 shell 或脚本内必须是 &lt;strong&gt;唯一&lt;/strong&gt; 的。&lt;/p&gt;

&lt;p class=&quot;notice&quot;&gt;函数比别名使用起来更灵活，而且适应用户的环境也更加简单和容易。&lt;/p&gt;

&lt;p&gt;组成函数的所有命令都像一般命令一样地执行。用简单命令名调用一个函数时，与该函数关联的命令列表即被执行。&lt;/p&gt;

&lt;p&gt;如果函数是在当前 shell 被声明，它也会仅在当前 shell 执行，不会产生新进程。&lt;/p&gt;

&lt;p&gt;在进行命令查找时，这些内建命令会先于函数被查找：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;break&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;:&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;continue&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;eval&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;exec&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;exit&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;export&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;readonly&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;set&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;shift&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;trap&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;unset&lt;/code&gt;。&lt;/p&gt;

&lt;h4 id=&quot;1111-函数的语法&quot;&gt;11.1.1 函数的语法&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;function TEST { COMMANDS; }&lt;/code&gt;  &lt;code class=&quot;highlighter-rouge&quot;&gt;function&lt;/code&gt; 为内建命令&lt;/p&gt;

&lt;p&gt;或&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TEST () { COMMANDS; }&lt;/code&gt;  不使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;function&lt;/code&gt; 命令，就必须要使用括号&lt;/p&gt;

&lt;p&gt;以上语法都可以定义函数 TEST。&lt;/p&gt;

&lt;p&gt;括号左右都要有 &lt;strong&gt;空格&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;大括号中的命令列表构成了函数的主体，只要 TEST 作为命令名称被指定，这些命令就会执行。&lt;/p&gt;

&lt;p&gt;函数主体必须以 &lt;strong&gt;分号&lt;/strong&gt; 或 &lt;strong&gt;换行符&lt;/strong&gt; 结束。&lt;/p&gt;

&lt;p&gt;退出状态以函数中最后一个命令为准。&lt;/p&gt;

&lt;h4 id=&quot;1112-函数中的位置参数&quot;&gt;11.1.2 函数中的位置参数&lt;/h4&gt;

&lt;p&gt;函数很像迷你的脚本，它们可以 &lt;strong&gt;接受参数&lt;/strong&gt;、使用 &lt;strong&gt;内部变量&lt;/strong&gt;，还可以向调用它的 shell &lt;strong&gt;返回值&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;函数也会解析位置参数，但其位置参数与传递给命令或脚本的有些不同。&lt;/p&gt;

&lt;p&gt;函数被执行时，传递给函数的参数成为位置参数。&lt;code class=&quot;highlighter-rouge&quot;&gt;$#&lt;/code&gt; 扩展成位置参数的总个数，&lt;code class=&quot;highlighter-rouge&quot;&gt;$0&lt;/code&gt; 不变，bash 变量 &lt;code class=&quot;highlighter-rouge&quot;&gt;FUNCNAME&lt;/code&gt; 更新为该函数名称。&lt;/p&gt;

&lt;p&gt;如果在函数中执行了 &lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt; 内建命令，则函数立即结束。返回继续执行调用该函数命令的下一个命令。&lt;/p&gt;

&lt;p&gt;函数结束时，其位置参数的值与参数的个数被恢复成调用函数之前的值。&lt;/p&gt;

&lt;p&gt;函数的返回值经常保存在变量里，以便之后可以引用。函数的返回值经常做为整个脚本的退出码来使用。如 &lt;code class=&quot;highlighter-rouge&quot;&gt;exit $RETVAL&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;如果随 &lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt; 命令给了一个数字，则将其作为返回值。&lt;/p&gt;

&lt;p&gt;范例：以下为脚本 &lt;code class=&quot;highlighter-rouge&quot;&gt;showparams.sh&lt;/code&gt; 的内容：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Positional parameter 1 for the script is &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.&quot;&lt;/span&gt;


&lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Positional parameter 1 in the function is &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;RETURN_VALUE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;The exit code of this function is &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$RETURN_VALUE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;FUNCPARA
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;运行脚本以测试：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./showparams.sh SCRPARA
Positional parameter 1 for the script is SCRPARA.
Positional parameter 1 in the function is FUNCPARA.
The exit code of this function is 0.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;1114-查看函数&quot;&gt;11.1.4 查看函数&lt;/h4&gt;

&lt;p&gt;所有当前 shell 已知的函数都可以通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;set&lt;/code&gt; 命令查看。这些函数通常在 &lt;strong&gt;启动配置文件&lt;/strong&gt; 中定义。&lt;/p&gt;

&lt;p&gt;默认情况下，函数被使用后仍然存在，除非用 &lt;code class=&quot;highlighter-rouge&quot;&gt;unset&lt;/code&gt; 来取消定义。&lt;/p&gt;

&lt;p&gt;用 &lt;code class=&quot;highlighter-rouge&quot;&gt;which&lt;/code&gt; 可以查看具体的函数内容。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;which zless
zless is a &lt;span class=&quot;k&quot;&gt;function
&lt;/span&gt;zless &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    zcat &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$@&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; | &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PAGER&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;112-范例脚本中的函数&quot;&gt;11.2 范例：脚本中的函数&lt;/h3&gt;

&lt;h4 id=&quot;1121-循环使用&quot;&gt;11.2.1 循环使用&lt;/h4&gt;

&lt;p&gt;系统中有很多脚本是 把使用函数作为一个结构化的方法 来管理一系列的命令的。&lt;/p&gt;

&lt;p&gt;例如，在某些 Linux 中，会使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/rc.d/init.d/functions&lt;/code&gt; 文件来专门定义函数，该文件会在所有初始化脚本中被调用。通过这种方法，类似于 “检查进程是否在运行、启动或暂停服务” 等比较通用的任务就只需编写一次就可以了，平时在需要时尽可循环使用。&lt;/p&gt;

&lt;p&gt;用户可以创建自己的 &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/functions&lt;/code&gt; 文件，把自己会用到的函数写到其中，使用时，只需在脚本的开始处加上 &lt;code class=&quot;highlighter-rouge&quot;&gt;. /etc/functions&lt;/code&gt; 即可循环使用这些函数了。&lt;/p&gt;

&lt;h4 id=&quot;1122-设置路径&quot;&gt;11.2.2 设置路径&lt;/h4&gt;

&lt;p&gt;这个例子取自 &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/profile&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;pathmunge&lt;/code&gt; 函数用于为 root 和其他用户设置路径。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pathmunge &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt; | /bin/egrep &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;(^|:)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$|&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:)&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
           if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;after&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
              &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;:&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
           &lt;span class=&quot;k&quot;&gt;else
              &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;:&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;
           &lt;span class=&quot;k&quot;&gt;fi
        fi&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Path manipulation&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
        &lt;/span&gt;pathmunge /sbin
        pathmunge /usr/sbin
        pathmunge /usr/local/sbin
&lt;span class=&quot;k&quot;&gt;fi

&lt;/span&gt;pathmunge /usr/X11R6/bin after

&lt;span class=&quot;nb&quot;&gt;unset &lt;/span&gt;pathmunge
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;该函数将其第一个参数做为路径名。如果在当前路径尚未加入 &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt;，则会加进去。&lt;/p&gt;

&lt;p&gt;第二个参数用来指定要加到 &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt; 的前面还是后面。&lt;/p&gt;

&lt;p&gt;如果是超级用户，则加入 4 个路径，如果是普通用户，只加入最后那个路径。&lt;/p&gt;

&lt;h4 id=&quot;1123-远程备份&quot;&gt;11.2.3 远程备份&lt;/h4&gt;

&lt;p&gt;本例使用 SSH 密钥来进行远程连接，定义了两个函数 &lt;code class=&quot;highlighter-rouge&quot;&gt;buplinux&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;bupbash&lt;/code&gt;，各自都会生成一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;.tar&lt;/code&gt; 文件，然后会进一步压缩，发送给远程服务端。最后删除本地副本。&lt;/p&gt;

&lt;p&gt;星期天的时候只执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;bupbash&lt;/code&gt;。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#/bin/bash&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;LOGFILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/nethome/tille/log/backupscript.log&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Starting backups for &lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$LOGFILE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

buplinux&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;DIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/nethome/tille/xml/db/linux-basics/&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;TAR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Linux.tar&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;BZIP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$TAR&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.bz2&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SERVER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;rincewind&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;RDIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/var/www/intra/tille/html/training/&quot;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$DIR&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;tar &lt;/span&gt;cf &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$TAR&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; src/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.xml src/images/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.png src/images/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.eps
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Compressing &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$TAR&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;...&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$LOGFILE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
bzip2 &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$TAR&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;...done.&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$LOGFILE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Copying to &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SERVER&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;...&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$LOGFILE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
scp &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$BZIP&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SERVER&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$RDIR&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /dev/null 2&amp;gt;&amp;amp;1
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;...done.&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$LOGFILE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Done backing up Linux course:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Source files, PNG and EPS images.&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Rubbish removed.&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$LOGFILE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$BZIP&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

bupbash&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;DIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/nethome/tille/xml/db/&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;TAR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Bash.tar&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;BZIP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$TAR&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.bz2&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;FILES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bash-programming/&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SERVER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;rincewind&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;RDIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/var/www/intra/tille/html/training/&quot;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$DIR&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;tar &lt;/span&gt;cf &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$TAR&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$FILES&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Compressing &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$TAR&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;...&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$LOGFILE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
bzip2 &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$TAR&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;...done.&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$LOGFILE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Copying to &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SERVER&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;...&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$LOGFILE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
scp &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$BZIP&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SERVER&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$RDIR&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /dev/null 2&amp;gt;&amp;amp;1
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;...done.&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$LOGFILE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Done backing up Bash course:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$FILES&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Rubbish removed.&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$LOGFILE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$BZIP&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;DAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt; +%w&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$DAY&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-lt&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;2&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;It is &lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt; +%A&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;, only backing up Bash course.&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$LOGFILE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  bupbash
&lt;span class=&quot;k&quot;&gt;else
  &lt;/span&gt;buplinux
  bupbash
&lt;span class=&quot;k&quot;&gt;fi


&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Remote backup &lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; SUCCESS&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;----------&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$LOGFILE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;把脚本交给 &lt;code class=&quot;highlighter-rouge&quot;&gt;cron&lt;/code&gt; 来定期运行，无需用户干预，因此把标准错误重定向给 &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/null&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;虽然完全可以压缩成一条命令：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;tar &lt;/span&gt;c dir_to_backup/ | bzip2 | ssh server &lt;span class=&quot;s2&quot;&gt;&quot;cat &amp;gt; backup.tar.bz2&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;但是，把命令分解会得到更详细的中间记录，有利于排错。&lt;/p&gt;

&lt;h2 id=&quot;12-捕捉信号&quot;&gt;12. 捕捉信号&lt;/h2&gt;

&lt;h3 id=&quot;121-信号&quot;&gt;12.1 信号&lt;/h3&gt;

&lt;h4 id=&quot;1211-信号简介&quot;&gt;12.1.1 信号简介&lt;/h4&gt;

&lt;h5 id=&quot;查阅信号帮助文档&quot;&gt;查阅信号帮助文档&lt;/h5&gt;

&lt;p&gt;一般的 Linux 系统都会有所有可用信号的帮助文档列表，多数情况可以用 &lt;code class=&quot;highlighter-rouge&quot;&gt;man 7 signal&lt;/code&gt; 来查阅。&lt;/p&gt;

&lt;p&gt;用 &lt;code class=&quot;highlighter-rouge&quot;&gt;kill -l&lt;/code&gt; 可以查看所有信号的名字。&lt;/p&gt;

&lt;h5 id=&quot;给-bash-发送的信号&quot;&gt;给 bash 发送的信号&lt;/h5&gt;

&lt;p&gt;如果交互式 bash shell 不包含任何的 &lt;code class=&quot;highlighter-rouge&quot;&gt;trap&lt;/code&gt; 命令，则会忽略 &lt;code class=&quot;highlighter-rouge&quot;&gt;SIGTERM&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;SIGQUIT&lt;/code&gt; 信号。&lt;/p&gt;

&lt;p&gt;如果启用了作业控制，会捕捉并处理 &lt;code class=&quot;highlighter-rouge&quot;&gt;SIGINT&lt;/code&gt; 信号，忽略 &lt;code class=&quot;highlighter-rouge&quot;&gt;SIGTTIN&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;SIGTTOU&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;SIGTSTP&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;如果是键盘产生的信号，作为命令替换的结果来运行的命令，也会忽略它们。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SIGHUP&lt;/code&gt; 信号默认会 &lt;strong&gt;退出 shell&lt;/strong&gt;。交互式 shell 会给所有运行和暂停的作业发送一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;SIGHUP&lt;/code&gt; 信号，如果希望为了某个进程而禁用该默认行为，可以查看 &lt;code class=&quot;highlighter-rouge&quot;&gt;disown&lt;/code&gt; 命令的帮助文档。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;shopt -s huponexit&lt;/code&gt; 可以实现收到 &lt;code class=&quot;highlighter-rouge&quot;&gt;SIGHUP&lt;/code&gt; 信号时杀掉所有作业。&lt;/p&gt;

&lt;h5 id=&quot;用-shell-发信号&quot;&gt;用 shell 发信号&lt;/h5&gt;

&lt;p&gt;用 bash shell 可以发送以下信号：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;快捷键&lt;/th&gt;
      &lt;th&gt;作用&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;^C&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;中断信号，发送 &lt;code class=&quot;highlighter-rouge&quot;&gt;SIGINT&lt;/code&gt; 给前台运行的作业&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;^Y&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;延迟休眠信号，运行的进程要从终端读取数据时会被暂停，把控制权交还 shell，然后用户可以把进程放到前台或后台运行，或杀掉。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;^Z&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;休眠信号，给运行中进程发送 &lt;code class=&quot;highlighter-rouge&quot;&gt;SIGTSTP&lt;/code&gt; 信号，将其暂停，把控制权交还 shell。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;1212-用-kill-发送信号&quot;&gt;12.1.2 用 &lt;code class=&quot;highlighter-rouge&quot;&gt;kill&lt;/code&gt; 发送信号&lt;/h4&gt;

&lt;p&gt;现今大多数 shell，包括 bash，都有 &lt;code class=&quot;highlighter-rouge&quot;&gt;kill&lt;/code&gt; 这个内建命令。在 bash 中，信号的名称和编号都可以做为选项，可以把作业或进程 ID 做为参数。启用 &lt;code class=&quot;highlighter-rouge&quot;&gt;-l&lt;/code&gt; 选项可以反馈退出状态，只要有一个信号成功发送就会返回 0，否则返回非 0。&lt;/p&gt;

&lt;p&gt;如果以 &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/bin/kill&lt;/code&gt; 绝对路径运行，可以启用一些额外的选项，如可以杀掉不属于你的进程，可以用进程的名称来做参数。&lt;/p&gt;

&lt;p&gt;执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;kill&lt;/code&gt; 命令时，如果不指定信号，则默认会发送 &lt;code class=&quot;highlighter-rouge&quot;&gt;SIGTERM&lt;/code&gt; 信号。&lt;/p&gt;

&lt;p&gt;常用的信号：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;信号名&lt;/th&gt;
      &lt;th&gt;编号&lt;/th&gt;
      &lt;th&gt;作用&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SIGHUP&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;告诉进程其控制终端已关闭&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SIGINT&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;中断进程&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SIGKILL&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;杀掉进程&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SIGTERM&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;15&lt;/td&gt;
      &lt;td&gt;优雅终止进程&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SIGSTOP&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;17, 19, 23&lt;/td&gt;
      &lt;td&gt;暂停进程&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a href=&quot;https://liloli.github.io/basic/signal/#2223-linux-%E4%BF%A1%E5%8F%B7%E5%88%97%E8%A1%A8&quot;&gt;更多信号的解释&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;notice&quot;&gt;杀掉一个或一系列进程时，普通的认知是先用危险性最小的信号 &lt;code class=&quot;highlighter-rouge&quot;&gt;SIGTERM&lt;/code&gt; 来尝试。于是，那些比较在意 &lt;strong&gt;按特定顺序关闭&lt;/strong&gt; 的程序，收到 &lt;code class=&quot;highlighter-rouge&quot;&gt;SIGTERM&lt;/code&gt; 信号时，就有机会按照其设计的流程有序地执行。比如 &lt;strong&gt;清除临时文件、关闭打开的文件&lt;/strong&gt; 等操作。&lt;/p&gt;

&lt;p&gt;反之，如果直接给进程发送 &lt;code class=&quot;highlighter-rouge&quot;&gt;SIGKILL&lt;/code&gt; 信号，就会剥夺了它清除临时文件再关闭的机会，有可能会造成不可预期的后果。&lt;/p&gt;

&lt;p&gt;如果用 &lt;code class=&quot;highlighter-rouge&quot;&gt;SIGTERM&lt;/code&gt; 信号无法优雅地结束进程，也许只能用 &lt;code class=&quot;highlighter-rouge&quot;&gt;SIGINT&lt;/code&gt; 或 &lt;code class=&quot;highlighter-rouge&quot;&gt;SIGKILL&lt;/code&gt; 了。例如，当进程对 &lt;code class=&quot;highlighter-rouge&quot;&gt;^C&lt;/code&gt; 没有响应时，最好用 &lt;code class=&quot;highlighter-rouge&quot;&gt;kill -9&lt;/code&gt; 来结束。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ps &lt;span class=&quot;nt&quot;&gt;-ef&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;stuck_process
maud    5607   2214  0 20:05 pts/5    00:00:02 stuck_process

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;kill&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-9&lt;/span&gt; 5607

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ps &lt;span class=&quot;nt&quot;&gt;-ef&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;stuck_process
maud    5614    2214 0 20:15 pts/5    00:00:00 &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;stuck_process
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果同一个进程启动了多个实例，更适合用 &lt;code class=&quot;highlighter-rouge&quot;&gt;killall&lt;/code&gt; 来干掉。它会作用于指定进程的所有实例。&lt;/p&gt;

&lt;h3 id=&quot;122-trap&quot;&gt;12.2 Trap&lt;/h3&gt;

&lt;h4 id=&quot;1221-trap-简介&quot;&gt;12.2.1 &lt;code class=&quot;highlighter-rouge&quot;&gt;trap&lt;/code&gt; 简介&lt;/h4&gt;

&lt;p&gt;在某些情况下，你可能不希望使用脚本的用户过早地用快捷键退出，例如因为要接受一些输入，或清理临时文件等。&lt;code class=&quot;highlighter-rouge&quot;&gt;trap&lt;/code&gt; 语句会捕捉这些信号，并可以设计成根据捕捉到的信号执行不同的命令。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;trap [COMMANDS] [SIGNALS]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;trap&lt;/code&gt; 会捕捉 SIGNALS 信号，信号的表示可以用标准的信号名称或编号。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如果信号是 &lt;code class=&quot;highlighter-rouge&quot;&gt;EXIT&lt;/code&gt; 或 0，shell 退出时会执行 COMMANDS。&lt;/li&gt;
  &lt;li&gt;如果其中一个信号是 &lt;code class=&quot;highlighter-rouge&quot;&gt;DEBUG&lt;/code&gt;，则 COMMANDS 会在每个简单命令之后执行。&lt;/li&gt;
  &lt;li&gt;如果信号是 &lt;code class=&quot;highlighter-rouge&quot;&gt;ERR&lt;/code&gt;，则每当一个简单命令的退出状态为非 0 时才会执行 COMMANDS。&lt;/li&gt;
  &lt;li&gt;如果非 0 的退出状态是从 &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;while&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;until&lt;/code&gt; 语句内部得到的，COMMANDS 不会执行。&lt;/li&gt;
  &lt;li&gt;如果逻辑与 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&amp;amp;&lt;/code&gt; 或逻辑或 &lt;code class=&quot;highlighter-rouge&quot;&gt;||&lt;/code&gt; 得到的是非 0 退出状态，COMMANDS 也不会执行。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;trap&lt;/code&gt; 命令自身的退出状态是 0，除非指定了无效的信号。&lt;/p&gt;

&lt;p class=&quot;notice&quot;&gt;脚本中可以有多个 &lt;code class=&quot;highlighter-rouge&quot;&gt;trap&lt;/code&gt; ，可以为不同的信号定义不同的行为，也可以修改、删除已定义的 &lt;code class=&quot;highlighter-rouge&quot;&gt;trap&lt;/code&gt; 。每个 &lt;code class=&quot;highlighter-rouge&quot;&gt;trap&lt;/code&gt; 也有其作用范围，如果把它放在函数中，它将只在这个函数里有效。&lt;/p&gt;

&lt;h4 id=&quot;1222-exit&quot;&gt;12.2.2 &lt;code class=&quot;highlighter-rouge&quot;&gt;EXIT&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;虽然 &lt;code class=&quot;highlighter-rouge&quot;&gt;EXIT&lt;/code&gt; 通常被当作信号来使用，但实际上它不是真正意义上的信号。&lt;/p&gt;

&lt;p&gt;一个针对 &lt;code class=&quot;highlighter-rouge&quot;&gt;EXIT&lt;/code&gt; 定义的 trap 会在 &lt;strong&gt;脚本因任何原因退出&lt;/strong&gt; 时被执行。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;EXIT&lt;/code&gt; 这个特殊的名字是 POSIX 定义的，可以被任何信号处理器解析，其作用仅仅是在退出脚本时进行一些 &lt;strong&gt;清理&lt;/strong&gt; 工作，它不会做复杂的操作。&lt;/p&gt;

&lt;p&gt;要想退出前进行清理，只需针对 &lt;code class=&quot;highlighter-rouge&quot;&gt;EXIT&lt;/code&gt; 定义一个 trap，调用一个清理函数。虽然 bash 支持，也不要一次 trap 太多信号，其它 shell 中，只有在其它信号都无法促成退出时才会使用它。&lt;/p&gt;

&lt;p class=&quot;notice--warning&quot;&gt;警告：&lt;code class=&quot;highlighter-rouge&quot;&gt;EXIT&lt;/code&gt; 只支持 &lt;strong&gt;非交互式 shell&lt;/strong&gt;，即脚本，在交互式 shell 中是不会被调用的。&lt;/p&gt;

&lt;h4 id=&quot;1223-trap-是捕捉信号的时机&quot;&gt;12.2.3 &lt;code class=&quot;highlighter-rouge&quot;&gt;trap&lt;/code&gt; 是捕捉信号的时机&lt;/h4&gt;

&lt;p class=&quot;notice--success&quot;&gt;当 bash 收到一个被 trap 定义的信号时，如果当前正有一个外部命令在 &lt;strong&gt;前台&lt;/strong&gt; 执行，那么 trap 会等待当前命令 &lt;strong&gt;结束以后&lt;/strong&gt; 再处理信号队列中的信号。如果 bash 正通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;wait&lt;/code&gt; 命令在等待一个 &lt;strong&gt;异步&lt;/strong&gt; 命令，则该信号会促使 &lt;code class=&quot;highlighter-rouge&quot;&gt;wait&lt;/code&gt; &lt;strong&gt;立即返回&lt;/strong&gt;，退出状态会大于 128。&lt;/p&gt;

&lt;h5 id=&quot;外部命令前台运行完才处理信号&quot;&gt;外部命令前台运行完才处理信号&lt;/h5&gt;

&lt;p&gt;当 bash 在 &lt;strong&gt;前台&lt;/strong&gt; 执行一个外部命令时，直到 &lt;strong&gt;进程终止&lt;/strong&gt;，它才会处理接收到的信号。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;trap&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'echo &quot;doing some cleaning&quot;'&lt;/span&gt; EXIT
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;waiting a bit&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sleep &lt;/span&gt;10000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;该脚本执行后，如果在终端上直接按 &lt;code class=&quot;highlighter-rouge&quot;&gt;^C&lt;/code&gt; 会立即退出脚本。&lt;/p&gt;

&lt;p&gt;但，如果登陆另一终端，用 &lt;code class=&quot;highlighter-rouge&quot;&gt;kill -SIGINT pid&lt;/code&gt; 来尝试终止该进程，bash 会一直等到 &lt;code class=&quot;highlighter-rouge&quot;&gt;sleep 10000&lt;/code&gt; 运行完毕，才肯调用 &lt;code class=&quot;highlighter-rouge&quot;&gt;trap&lt;/code&gt; 退出脚本，这可能不是你希望看到的结果。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;【 为什么同一信号会出现不同的结果？】
使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;^C&lt;/code&gt; 按键组合会向进程组发送 &lt;code class=&quot;highlighter-rouge&quot;&gt;SIGINT&lt;/code&gt; 信号，因此在同一个进程组中的子进程 sleep 也会收到信号，所以它会退出，返回主进程后 trap 捕捉到了信号，脚本退出。
而使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;kill -SIGINT pid&lt;/code&gt; 只会针对脚本这个进程发信号，需要等到 sleep 这个外部命令运行完毕，才能捕捉到信号。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;针对这个问题，一个解决办法是把 sleep 切割成 1 秒的 &lt;strong&gt;小 sleep 循环&lt;/strong&gt;。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;trap&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'echo &quot;doing some cleaning&quot;'&lt;/span&gt; EXIT
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;waiting a bit&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; :
&lt;span class=&quot;k&quot;&gt;do
	&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sleep &lt;/span&gt;1
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样一来，脚本对信号做出反应的机会就大了很多。&lt;/p&gt;

&lt;h5 id=&quot;内部命令立即处理信号&quot;&gt;内部命令立即处理信号&lt;/h5&gt;

&lt;p&gt;所有的 &lt;strong&gt;bash 内部命令&lt;/strong&gt; 都会被非忽略的信号所中断。&lt;/p&gt;

&lt;p&gt;若想实现对信号能立即做出反应，另一个解决办法是使用可被中断的内建命令，比如 &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;wait&lt;/code&gt;&lt;/strong&gt;：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;trap&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'echo &quot;doing some cleaning&quot;'&lt;/span&gt; EXIT
&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;waiting a bit
&lt;span class=&quot;nb&quot;&gt;sleep &lt;/span&gt;10000 &amp;amp; &lt;span class=&quot;nb&quot;&gt;wait&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$!&lt;/code&gt; 扩展为新放入后台的进程 ID。把 sleep 放到后台运行，再用内建的 &lt;code class=&quot;highlighter-rouge&quot;&gt;wait&lt;/code&gt; 去等待其执行结束。&lt;/p&gt;

&lt;p&gt;注意：虽然这样一来 &lt;code class=&quot;highlighter-rouge&quot;&gt;^C&lt;/code&gt; 终于可以让脚本退出了，但此时 &lt;code class=&quot;highlighter-rouge&quot;&gt;sleep 10000&lt;/code&gt; 还在后台运行呢，不会被杀掉，而是继续运行。如果希望脚本被终止时，&lt;code class=&quot;highlighter-rouge&quot;&gt;sleep&lt;/code&gt; 这样的 &lt;strong&gt;后台作业也能够被杀掉&lt;/strong&gt;：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;trap&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'[[ $pid ]] &amp;amp;&amp;amp; kill $pid'&lt;/span&gt; EXIT
&lt;span class=&quot;nb&quot;&gt;sleep &lt;/span&gt;10000 &amp;amp; &lt;span class=&quot;nv&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$!&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;wait
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样，当脚本无论因何退出时，不仅会立即退出，而且会终止后台运行的 &lt;code class=&quot;highlighter-rouge&quot;&gt;sleep&lt;/code&gt; 作业。&lt;/p&gt;

&lt;p&gt;如果不喜欢 &lt;code class=&quot;highlighter-rouge&quot;&gt;wait&lt;/code&gt;，还可以使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;read&lt;/code&gt;。可以通过从一个永远不会给出任何数据的 &lt;strong&gt;管道&lt;/strong&gt; 中读取数据，来实现一个 &lt;strong&gt;无休止的睡眠&lt;/strong&gt;。&lt;code class=&quot;highlighter-rouge&quot;&gt;read&lt;/code&gt; 会一直阻塞下去，无需像外部命令 &lt;code class=&quot;highlighter-rouge&quot;&gt;sleep&lt;/code&gt; 一样还得持续跟踪。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;trap&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'echo &quot;we get signal&quot;; rm -f ~/fifo'&lt;/span&gt; EXIT
&lt;span class=&quot;nb&quot;&gt;mkfifo&lt;/span&gt; ~/fifo &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exit
chmod &lt;/span&gt;400 ~/fifo
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sleeping&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;read&lt;/span&gt; &amp;lt; ~/fifo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;用 &lt;code class=&quot;highlighter-rouge&quot;&gt;mkfifo&lt;/code&gt; 创建临时管道，然后将其重定向给标准输入，交给 &lt;code class=&quot;highlighter-rouge&quot;&gt;read&lt;/code&gt;。退出时自动删除临时管道。&lt;/p&gt;

&lt;h4 id=&quot;1224-sigint-注意事项&quot;&gt;12.2.4 &lt;code class=&quot;highlighter-rouge&quot;&gt;SIGINT&lt;/code&gt; 注意事项&lt;/h4&gt;

&lt;p&gt;如果选择不用 &lt;code class=&quot;highlighter-rouge&quot;&gt;EXIT&lt;/code&gt; 来 trap，而是用 &lt;code class=&quot;highlighter-rouge&quot;&gt;SIGINT&lt;/code&gt;，应该要注意的是，进程收到该信号退出时，应该把自己杀掉，而不是单纯的退出，以防止对其调用者造成问题。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;trap&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'rm -f &quot;$tempfile&quot;; trap - INT; kill -INT $$'&lt;/span&gt; INT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rm&lt;/code&gt; 删除临时文件，&lt;code class=&quot;highlighter-rouge&quot;&gt;trap - INT&lt;/code&gt; 恢复 INT 默认动作，&lt;code class=&quot;highlighter-rouge&quot;&gt;kill&lt;/code&gt; 杀掉自己。&lt;/p&gt;

&lt;h4 id=&quot;1225-其它范例&quot;&gt;12.2.5 其它范例&lt;/h4&gt;

&lt;h5 id=&quot;检测变量什么时候被使用了&quot;&gt;检测变量什么时候被使用了&lt;/h5&gt;

&lt;p&gt;在调试比较长的脚本时，可能会需要给变量赋予 trace 属性，以便追踪该变量的调试信息。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;declare&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;VARIABLE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;value

&lt;span class=&quot;nb&quot;&gt;trap&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;echo VARIABLE is being used here.&quot;&lt;/span&gt; DEBUG
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;退出时删除垃圾文件&quot;&gt;退出时删除垃圾文件&lt;/h5&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;LOCKFILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/var/lock/makewhatis.lock

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$LOCKFILE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;0

&lt;span class=&quot;nb&quot;&gt;trap&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;{ rm -f &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$LOCKFILE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; ; exit 255; }&quot;&lt;/span&gt; EXIT

&lt;span class=&quot;nb&quot;&gt;touch&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$LOCKFILE&lt;/span&gt;
makewhatis &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-w&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;……….&lt;/p&gt;</content><author><name>Hawk Zhang</name><email>imhawkz@gmail.com</email></author><category term="bash" /><category term="for" /><category term="while" /><category term="until" /><category term="变量" /><summary type="html">循环，变量，函数，捕捉信号</summary></entry><entry><title type="html">Bash 入门 02</title><link href="https://linotes.netlify.com/programming/bash02/" rel="alternate" type="text/html" title="Bash 入门 02" /><published>2017-05-03T00:00:00+08:00</published><updated>2017-05-03T00:00:00+08:00</updated><id>https://linotes.netlify.com/programming/bash02</id><content type="html" xml:base="https://linotes.netlify.com/programming/bash02/">&lt;h2 id=&quot;4-正则表达式&quot;&gt;4. 正则表达式&lt;/h2&gt;

&lt;p&gt;Regular Expressions&lt;/p&gt;

&lt;h3 id=&quot;41-正则表达式&quot;&gt;4.1 正则表达式&lt;/h3&gt;

&lt;h4 id=&quot;411-正则表达式简介&quot;&gt;4.1.1 正则表达式简介&lt;/h4&gt;

&lt;p&gt;正则表达式就是用模板来表示一组字符。&lt;/p&gt;

&lt;p&gt;与算术表达式类似，正则表达式也是通过 “用各种操作符连接较小的表达式” 而构建起来的。&lt;/p&gt;

&lt;p&gt;基本的组件是用来匹配 &lt;strong&gt;单个字符&lt;/strong&gt; 的表达式。包括所有字母及标点在内的大部分字符都可用来匹配自己。有特殊含义的 &lt;strong&gt;元字符&lt;/strong&gt; 可以用 &lt;strong&gt;反斜线&lt;/strong&gt; 来转义。&lt;/p&gt;

&lt;h4 id=&quot;412-正则表达式元字符&quot;&gt;4.1.2 正则表达式元字符&lt;/h4&gt;

&lt;p&gt;一个正则表达式后面可以跟一个或多个 &lt;strong&gt;元字符&lt;/strong&gt;。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;元字符：一个字符，并不仅仅表示它自身，而是有特殊的含义。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;正则表达式操作符：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;操作符&lt;/th&gt;
      &lt;th&gt;效果&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;匹配任何单个字符&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;?&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;最多匹配一次&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;最少匹配一次&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;任意次匹配（零或更多次）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;{N}&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;前面字符串匹配 N 次&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;{N,}&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;前面字符串匹配 N 或更多次&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;{N,M}&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;前面字符串匹配 N ~ M 次&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;若其不在列表的两头、不是列表中某范围的结束点，代表范围&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;^&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;匹配行首空字符，或把字符串从范围排除&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;匹配行尾空字符&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\b&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;匹配字段外沿相邻空字符&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\B&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;匹配字段外非相邻空字符&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\&amp;lt;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;匹配字段开头空字符&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\&amp;gt;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;匹配字段结尾空字符&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&quot;各操作的优先级&quot;&gt;各操作的优先级&lt;/h5&gt;

&lt;p&gt;处理优先级从高到低：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(R)&lt;/code&gt; 组合操作&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;R*&lt;/code&gt; 数量限定操作&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;R1R2&lt;/code&gt; 串接操作&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;R1 | R2&lt;/code&gt; 选择操作&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;为了避免括号，星号有最高优先级，接着是串接，接着是选择。如果没有歧义则可以省略括号。&lt;/p&gt;

&lt;p&gt;因此 &lt;code class=&quot;highlighter-rouge&quot;&gt;ab*c|d&lt;/code&gt; 会被解析为 &lt;code class=&quot;highlighter-rouge&quot;&gt;((a(b*))c)|d&lt;/code&gt;。解析流程：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;因为没有括号，所以首先处理数量限定操作 &lt;code class=&quot;highlighter-rouge&quot;&gt;b*&lt;/code&gt;，得到 &lt;code class=&quot;highlighter-rouge&quot;&gt;(b*)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;再处理串接操作 &lt;code class=&quot;highlighter-rouge&quot;&gt;a(b*)c&lt;/code&gt;，得到 &lt;code class=&quot;highlighter-rouge&quot;&gt;(a(b*)c)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;最后处理选择操作，得到 &lt;code class=&quot;highlighter-rouge&quot;&gt;((a(b*))c)|d&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;组合操作&quot;&gt;组合操作&lt;/h6&gt;

&lt;p&gt;用 &lt;strong&gt;括号&lt;/strong&gt; 把字符强制组合在一起，组合操作具有最高优先级。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;go!(go!)*&lt;/code&gt; 匹配 &lt;code class=&quot;highlighter-rouge&quot;&gt;go!&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;go!go!&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;go!go!go!&lt;/code&gt; 等。&lt;/p&gt;

&lt;h6 id=&quot;数量限定操作&quot;&gt;数量限定操作&lt;/h6&gt;

&lt;p&gt;用 &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;?&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; 等操作符来限定左侧字符串出现的次数。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;booo*&lt;/code&gt; 匹配 &lt;code class=&quot;highlighter-rouge&quot;&gt;boo&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;booo&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;boooo&lt;/code&gt; 等。&lt;/p&gt;

&lt;h6 id=&quot;串接操作&quot;&gt;串接操作&lt;/h6&gt;

&lt;p&gt;Concatenation&lt;/p&gt;

&lt;p&gt;把两个正则表达式直接放在一起就是串接操作。相邻的字符默认为串接关系。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt; 串接 &lt;code class=&quot;highlighter-rouge&quot;&gt;o&lt;/code&gt; 得到 &lt;code class=&quot;highlighter-rouge&quot;&gt;fo&lt;/code&gt;，只匹配 &lt;code class=&quot;highlighter-rouge&quot;&gt;fo&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt; 串接 &lt;code class=&quot;highlighter-rouge&quot;&gt;o*&lt;/code&gt; 得到 &lt;code class=&quot;highlighter-rouge&quot;&gt;fo*&lt;/code&gt;，匹配 &lt;code class=&quot;highlighter-rouge&quot;&gt;fo&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;foo&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;fool&lt;/code&gt; 等&lt;/p&gt;

&lt;h6 id=&quot;选择操作&quot;&gt;选择操作&lt;/h6&gt;

&lt;p&gt;Alternation&lt;/p&gt;

&lt;p&gt;两个正则表达式可以用 &lt;code class=&quot;highlighter-rouge&quot;&gt;|&lt;/code&gt; 操作符连接起来，得到的表达式匹配它们的 &lt;strong&gt;或集&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;trick|treat&lt;/code&gt; 匹配 &lt;code class=&quot;highlighter-rouge&quot;&gt;trick&lt;/code&gt; 或 &lt;code class=&quot;highlighter-rouge&quot;&gt;treat&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;413-基本正则表达式与扩展正则表达式&quot;&gt;4.1.3 基本正则表达式与扩展正则表达式&lt;/h4&gt;

&lt;p&gt;POSIX 定义了两种正则表达式语法：基本正则表达式（BRE）和扩展正则表达式（ERE）。&lt;/p&gt;

&lt;p&gt;在 BRE 中，这些元字符失去了其特殊功能，要想让它们再做为元字符使用，必须用反斜线转义：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;?&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;{&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;|&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;(&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;BRE 定义的语法符号&lt;/strong&gt; 包括：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt;       - 匹配任意一个字符。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[]&lt;/code&gt;      - 字符集匹配，匹配方括号中定义的字符集之一。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[^]&lt;/code&gt;     - 字符集否定匹配，匹配没有在方括号中定义的字符。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;^&lt;/code&gt;       - 匹配开始位置。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt;       - 匹配结束位置。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\(\)&lt;/code&gt;    - 定义子表达式。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\n&lt;/code&gt;      - 子表达式向前引用，n 为 1-9 之间的数字。 由于此功能已超出正则语义，需&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;        要在字符串中回溯，因此需要使用 NFA 算法进行匹配。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;       - 任意次匹配（零次或多次匹配）。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\{m,n\}&lt;/code&gt; - 至少 m 次，至多 n 次匹配；{m} 表示 m 次精确匹配；{m,} 表示至少 m&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;        次匹配。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;ERE&lt;/strong&gt; 修改了 BRE 中的部分语法，并 &lt;strong&gt;增加了以下语法符号&lt;/strong&gt;：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;?&lt;/code&gt;       - 最多一次匹配（零次或一次匹配）。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt;       - 至少一次匹配（一次或更多次匹配）。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;|&lt;/code&gt;       - 或运算，其左右操作数均可以为一个子表达式。&lt;/p&gt;

&lt;p&gt;同时，ERE 在使用子表达式 &lt;code class=&quot;highlighter-rouge&quot;&gt;()&lt;/code&gt; 和 次数匹配 &lt;code class=&quot;highlighter-rouge&quot;&gt;{m,n}&lt;/code&gt; 语法符号时，不再需要转义符。 与此同时， ERE 也取消了非正则语义的子表达式向前引用能力。&lt;/p&gt;

&lt;p&gt;BRE 和 ERE 共享同样的 &lt;strong&gt;POSIX 字符类定义&lt;/strong&gt;。同时，它们还支持 &lt;strong&gt;字符类比较操作&lt;/strong&gt; “[. .]” 和字符类等效体 “[= =]” 操作，但很少被使用。&lt;/p&gt;

&lt;h3 id=&quot;42-用-grep-做范例&quot;&gt;4.2 用 GREP 做范例&lt;/h3&gt;

&lt;h4 id=&quot;421-grep-简介&quot;&gt;4.2.1 GREP 简介&lt;/h4&gt;

&lt;p&gt;对于给定的模板，grep 会在输入文件中查找匹配的 &lt;strong&gt;行&lt;/strong&gt;，如果在某一行中发现了匹配内容，它默认会将该行的内容复制到标准输出，或用户指定的其它输出。&lt;/p&gt;

&lt;p&gt;如果输入文件的 &lt;strong&gt;结尾&lt;/strong&gt; 不是换行符，grep 会 &lt;strong&gt;自动加上一个换行符&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;因为换行符是分隔符之一，所以无法被匹配。&lt;/p&gt;

&lt;h4 id=&quot;422-grep-与正则表达式&quot;&gt;4.2.2 GREP 与正则表达式&lt;/h4&gt;

&lt;h5 id=&quot;4221-行与字段锚点&quot;&gt;4.2.2.1 行与字段锚点&lt;/h5&gt;

&lt;p&gt;锚点是指定义模板时，关键字的位置，如：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;行首：&lt;code class=&quot;highlighter-rouge&quot;&gt;grep ^root /etc/passwd&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;行尾：&lt;code class=&quot;highlighter-rouge&quot;&gt;gep :$ /etc/passwd&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;字段头：&lt;code class=&quot;highlighter-rouge&quot;&gt;grep '\&amp;lt;PATH' file&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;字段尾：&lt;code class=&quot;highlighter-rouge&quot;&gt;grep 'bash\&amp;gt;' file&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;单独字段：&lt;code class=&quot;highlighter-rouge&quot;&gt;grep -w / /etc/fstab&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;4222-字符类&quot;&gt;4.2.2.2 字符类&lt;/h5&gt;

&lt;p&gt;一对方括号可以用于定义一个字符列表，用来匹配其中的任意 &lt;strong&gt;单个&lt;/strong&gt; 字符。如果列表开头为 &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;^&lt;/code&gt;&lt;/strong&gt;，表示 &lt;strong&gt;取反&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;如果方括号中的字符列表是一段连续的字符，即某个 &lt;strong&gt;范围&lt;/strong&gt; 内的字符，为了简化，可以在首尾两个字符中间使用 &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt;&lt;/strong&gt; 来表示，如 &lt;code class=&quot;highlighter-rouge&quot;&gt;[a-d]&lt;/code&gt;。&lt;/p&gt;

&lt;h6 id=&quot;字典顺序&quot;&gt;字典顺序&lt;/h6&gt;

&lt;p&gt;但是，&lt;code class=&quot;highlighter-rouge&quot;&gt;[a-d]&lt;/code&gt; 并不一定代表 &lt;code class=&quot;highlighter-rouge&quot;&gt;[abcd]&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;如果系统语系是默认的 C，&lt;code class=&quot;highlighter-rouge&quot;&gt;[a-d]&lt;/code&gt; 是代表 &lt;code class=&quot;highlighter-rouge&quot;&gt;[abcd]&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;但有许多其它语系是按字典顺序来排列字符的，在那些语系中，&lt;code class=&quot;highlighter-rouge&quot;&gt;[a-d]&lt;/code&gt; 代表 &lt;code class=&quot;highlighter-rouge&quot;&gt;[aBbCcDd]&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;因此，如果希望得到预想的结果，建议把 &lt;code class=&quot;highlighter-rouge&quot;&gt;LC-ALL&lt;/code&gt; 变量设置为 &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;C&lt;/code&gt;&lt;/strong&gt;。&lt;/p&gt;

&lt;h5 id=&quot;4223-通配符&quot;&gt;4.2.2.3 通配符&lt;/h5&gt;

&lt;h6&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt;&lt;/h6&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt; 作为通配符时，用来匹配任意单个字符，因此 &lt;code class=&quot;highlighter-rouge&quot;&gt;grep '\&amp;lt;c...r\&amp;gt;'&lt;/code&gt; 可以匹配 &lt;code class=&quot;highlighter-rouge&quot;&gt;color&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;如果要匹配 &lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt; 本身，即句点，则要使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;grep -F&lt;/code&gt; 选项。&lt;/p&gt;

&lt;h6 id=&quot;-1&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;&lt;/h6&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; 作为通配符时，用来匹配多个字符，如 &lt;code class=&quot;highlighter-rouge&quot;&gt;grep '\&amp;lt;c.*h' .&lt;/code&gt; 匹配当前目录中以 &lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt; 开头 &lt;code class=&quot;highlighter-rouge&quot;&gt;h&lt;/code&gt; 结尾的文件名。&lt;/p&gt;

&lt;p&gt;如果要匹配 &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; 自身，即星号，可以用 &lt;strong&gt;单引号&lt;/strong&gt; 将其 &lt;strong&gt;引用&lt;/strong&gt;，如 &lt;code class=&quot;highlighter-rouge&quot;&gt;grep '*' /etc/profile&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&quot;43-用-bash-的功能来匹配&quot;&gt;4.3 用 bash 的功能来匹配&lt;/h3&gt;

&lt;h4 id=&quot;431-字符范围&quot;&gt;4.3.1 字符范围&lt;/h4&gt;

&lt;p&gt;除了 grep 和正则表达式，实际上在 shell 中可以直接使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;?&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;[ ]&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;!&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;^&lt;/code&gt; 这些元字符进行匹配，而无需任何第三方程序。&lt;/p&gt;

&lt;p&gt;如果要匹配它们自身，也需要将其 &lt;strong&gt;引用&lt;/strong&gt;，如 &lt;code class=&quot;highlighter-rouge&quot;&gt;'*'&lt;/code&gt; 或 &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;*&quot;&lt;/code&gt; 都可以。&lt;/p&gt;

&lt;p&gt;同样可以用 &lt;strong&gt;方括号&lt;/strong&gt; 来指定字符范围：&lt;code class=&quot;highlighter-rouge&quot;&gt;ls -ld [a-cx-z]*&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;用 &lt;code class=&quot;highlighter-rouge&quot;&gt;!&lt;/code&gt; 或 &lt;code class=&quot;highlighter-rouge&quot;&gt;^&lt;/code&gt; 来取反。&lt;/p&gt;

&lt;h4 id=&quot;432-字符类&quot;&gt;4.3.2 字符类&lt;/h4&gt;

&lt;p&gt;方括号中还以指定字符类，语法为 &lt;code class=&quot;highlighter-rouge&quot;&gt;[:CLASS:]&lt;/code&gt;，其中 &lt;code class=&quot;highlighter-rouge&quot;&gt;CLASS&lt;/code&gt; 是 POSIX 定义的标准，主要有以下值：&lt;/p&gt;

&lt;p&gt;[:alnum:]  字母数字&lt;/p&gt;

&lt;p&gt;[:alpha:]  字母&lt;/p&gt;

&lt;p&gt;[:ascii:]  ASCII 字符&lt;/p&gt;

&lt;p&gt;[:blank:]  空格与制表符&lt;/p&gt;

&lt;p&gt;[:cntrl:]  控制字符&lt;/p&gt;

&lt;p&gt;[:digit:]  数字&lt;/p&gt;

&lt;p&gt;[:graph:]  可见字符（非空白、非控制字符）&lt;/p&gt;

&lt;p&gt;[:lower:]  小写字母&lt;/p&gt;

&lt;p&gt;[:print:]  可见字符与空格&lt;/p&gt;

&lt;p&gt;[:punct:]  标点&lt;/p&gt;

&lt;p&gt;[:space:]  所有空白字符（换行符、空格、制表符）&lt;/p&gt;

&lt;p&gt;[:upper:]  大写字母&lt;/p&gt;

&lt;p&gt;[:word:]  字母、数字、下划线&lt;/p&gt;

&lt;p&gt;[:xdigit:]  十六进制数字&lt;/p&gt;

&lt;p&gt;如果 shell 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;extglob&lt;/code&gt; 选项被启用，还可以使用其它几个扩展的操作符。&lt;/p&gt;

&lt;h2 id=&quot;5-sed&quot;&gt;5. SED&lt;/h2&gt;

&lt;p&gt;GDN sed 流编辑器。&lt;/p&gt;

&lt;h3 id=&quot;51-sed-简介&quot;&gt;5.1 SED 简介&lt;/h3&gt;

&lt;p&gt;SED，&lt;strong&gt;S&lt;/strong&gt;tream &lt;strong&gt;ED&lt;/strong&gt;itor，&lt;strong&gt;流编辑器&lt;/strong&gt; 用于把从文件或管道读取的文本进行一些基本的转换，转换的结果被发送给 &lt;strong&gt;基本输出&lt;/strong&gt;。SED &lt;strong&gt;不会直接修改原始文件&lt;/strong&gt;，可以用重定向将修改结果另存为文件。&lt;/p&gt;

&lt;p&gt;sed 与 &lt;code class=&quot;highlighter-rouge&quot;&gt;vi&lt;/code&gt; 等编辑器的区别在于，它可以 &lt;strong&gt;过滤&lt;/strong&gt; 来自于管道的文本。你无需与其交互，因此 sed 又被称为批处理编辑器。它允许把多个文本编辑的命令保存到脚本中，大大简化了重复的编辑任务。它可以在大量文件中进行 &lt;strong&gt;批量的文本替换&lt;/strong&gt;。&lt;/p&gt;

&lt;h4 id=&quot;sed-命令&quot;&gt;sed 命令&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sed&lt;/code&gt; 程序可以使用正则表达式，进行文本的 &lt;strong&gt;替换&lt;/strong&gt; 和 &lt;strong&gt;删除&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sed SCRIPT INPUTFILE&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h5 id=&quot;sed-编辑命令&quot;&gt;sed 编辑命令&lt;/h5&gt;

&lt;p&gt;其编辑文本的命令与 &lt;code class=&quot;highlighter-rouge&quot;&gt;vi&lt;/code&gt; 有些类似：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;命令&lt;/th&gt;
      &lt;th&gt;作用&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a\&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;在当前行下面追加文本&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;c\&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;修改当前行文本&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;d&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;删除匹配行&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;i\&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;在当前行上面插入文本&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;p&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;打印匹配行&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;r&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;读取文件&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;查找并替换文本&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;w&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;写入文件&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&quot;sed-选项&quot;&gt;sed 选项&lt;/h5&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;选项&lt;/th&gt;
      &lt;th&gt;作用&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-e SCRIPT&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;用 &lt;strong&gt;脚本&lt;/strong&gt; 来处理输入&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-f&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;用 &lt;strong&gt;脚本文件&lt;/strong&gt; 中的命令来处理输入&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-n&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;不打印原文件&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-V&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;查看 sed 版本&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/^foo/d'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; script2.sed input.txt &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; output.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;52-交互式编辑&quot;&gt;5.2 交互式编辑&lt;/h3&gt;

&lt;h4 id=&quot;521-打印匹配行&quot;&gt;5.2.1 打印匹配行&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/erors/p'&lt;/span&gt; example
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-n&lt;/code&gt; 确保不打印全部原文&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;p&lt;/code&gt; 打印匹配行&lt;/p&gt;

&lt;h4 id=&quot;522-删除匹配行&quot;&gt;5.2.2 删除匹配行&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/erors/d'&lt;/span&gt; example
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;d&lt;/code&gt; 删除匹配行。即 &lt;strong&gt;取反&lt;/strong&gt;，打印不匹配的行。&lt;/p&gt;

&lt;h4 id=&quot;523-根据行号限定行&quot;&gt;5.2.3 根据行号限定行&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'2,4d'&lt;/span&gt; example
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;删除第 2 行 ~ 第 4 行。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'3,$d'&lt;/span&gt; example
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;删除第 3 行到末行，即仅保留前 2 行。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/a text/,/This/p'&lt;/span&gt; example
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;匹配的起始行为 &lt;code class=&quot;highlighter-rouge&quot;&gt;a text&lt;/code&gt; 所在行，结束行为 &lt;code class=&quot;highlighter-rouge&quot;&gt;This&lt;/code&gt; 所在行。&lt;/p&gt;

&lt;h4 id=&quot;524-查找并替换&quot;&gt;5.2.4 查找并替换&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/erors/errors/'&lt;/span&gt; example
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;查找 &lt;code class=&quot;highlighter-rouge&quot;&gt;erors&lt;/code&gt;，替换为 &lt;code class=&quot;highlighter-rouge&quot;&gt;errors&lt;/code&gt;，但仅针对每行找到的 &lt;strong&gt;第一个&lt;/strong&gt; 字段。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/erors/errors/g'&lt;/span&gt; example
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;查找替换所有字段。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/^/&amp;gt; /'&lt;/span&gt; example
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在每行开头插入 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt; &lt;/code&gt;。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/$/EOL/'&lt;/span&gt; example
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在每行结尾插入 &lt;code class=&quot;highlighter-rouge&quot;&gt;EOL&lt;/code&gt;。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/erors/errors/g'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/last/final/g'&lt;/span&gt; example
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;同时进行多个查找与替换。&lt;/p&gt;

&lt;h3 id=&quot;53-非交互式编辑&quot;&gt;5.3 非交互式编辑&lt;/h3&gt;

&lt;h4 id=&quot;531-从文件中读取-sed-命令&quot;&gt;5.3.1 从文件中读取 sed 命令&lt;/h4&gt;

&lt;p&gt;可以把多个 sed 命令写入文件，然后用 &lt;code class=&quot;highlighter-rouge&quot;&gt;sed -f file.sed&lt;/code&gt; 选项来执行。创建 sed 文件时，要确保：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;每行结尾不能有空白&lt;/li&gt;
  &lt;li&gt;不能使用引用&lt;/li&gt;
  &lt;li&gt;如果要插入或替换文本，除最后一行外，每行要以反斜线 &lt;code class=&quot;highlighter-rouge&quot;&gt;\&lt;/code&gt; 结束&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;532-输出文件另存为&quot;&gt;5.3.2 输出文件另存为&lt;/h4&gt;

&lt;p&gt;需要借助输出重定向操作系统 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt; 来把输出另存为文件。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;SCRIPT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/home/sandy/scripts/script.sed&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;TEMPFILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/var/tmp/sed.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PID&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.tmp&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;s/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/^M/&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$SCRIPT&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;s/^M/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$TEMPFILE&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;mv&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$TEMPFILE&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$NAME&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;6-awk&quot;&gt;6. AWK&lt;/h2&gt;

&lt;h3 id=&quot;61-从-gawk-开始&quot;&gt;6.1 从 gawk 开始&lt;/h3&gt;

&lt;h4 id=&quot;611-gawk-是什么&quot;&gt;6.1.1 gawk 是什么&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;awk&lt;/code&gt; 是一个 UNIX 程序，而 &lt;code class=&quot;highlighter-rouge&quot;&gt;gawk&lt;/code&gt; 是其常用的 GNU 版本，它是另一个流编辑器。实际上 &lt;code class=&quot;highlighter-rouge&quot;&gt;awk&lt;/code&gt; 程序通常是 &lt;code class=&quot;highlighter-rouge&quot;&gt;gawk&lt;/code&gt; 的符号链接。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;awk&lt;/code&gt; 的基本功能是按照 &lt;strong&gt;一个或多个模板&lt;/strong&gt;，查找文件的匹配 &lt;strong&gt;行&lt;/strong&gt; 或 &lt;strong&gt;其它匹配单位&lt;/strong&gt;，可以针对匹配行进行特殊的操作。&lt;/p&gt;

&lt;p&gt;通常的程序是 “程序化” 的，需要在程序中详细描述每一步它应该做什么，很难清楚地表达程序要处理的数据。&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;而 &lt;code class=&quot;highlighter-rouge&quot;&gt;awk&lt;/code&gt; 中的众多程序比较特别，它们是 “&lt;strong&gt;数据驱动&lt;/strong&gt;” 的，你可以先描述要处理的 &lt;strong&gt;数据是什么样的&lt;/strong&gt;，然后告诉程序找到这些数据以后要 &lt;strong&gt;做什么&lt;/strong&gt;*。&lt;/p&gt;

&lt;h4 id=&quot;612-gawk-命令&quot;&gt;6.1.2 gawk 命令&lt;/h4&gt;

&lt;p&gt;运行 &lt;code class=&quot;highlighter-rouge&quot;&gt;awk&lt;/code&gt; 时，需要指定一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;awk&lt;/code&gt; 程序来 &lt;strong&gt;处理匹配数据&lt;/strong&gt;。该程序由一系列规则组成，其中可以包含函数定义、循环、条件等编程组件。每条规则指定 &lt;strong&gt;一个模板&lt;/strong&gt; 用来查找，&lt;strong&gt;一个动作&lt;/strong&gt; 用来处理匹配。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;awk&lt;/code&gt; 有多种运行方式，通常使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;awk PROGRAM inputfile(s)&lt;/code&gt; 格式。&lt;/p&gt;

&lt;p&gt;如果要对多个文件、进行多种修改，最好把 &lt;code class=&quot;highlighter-rouge&quot;&gt;awk&lt;/code&gt; 命令写入脚本文件，以如下方式运行：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; PROGRAM-FILE inputfile&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;62-print-程序&quot;&gt;6.2 &lt;code class=&quot;highlighter-rouge&quot;&gt;print&lt;/code&gt; 程序&lt;/h3&gt;

&lt;h4 id=&quot;621-打印所选字段&quot;&gt;6.2.1 打印所选字段&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;awk&lt;/code&gt; 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;print&lt;/code&gt; 命令用于将所选数据打印出来。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;awk&lt;/code&gt; 从文件中读取一行时，会基于字段分隔符（FS）将该行分割成字段。&lt;code class=&quot;highlighter-rouge&quot;&gt;FS&lt;/code&gt; 是一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;awk&lt;/code&gt; 的变量，默认为一个或多个空白字符。&lt;/p&gt;

&lt;p&gt;变量 &lt;code class=&quot;highlighter-rouge&quot;&gt;$1&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;$2&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;$3&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;$4&lt;/code&gt; 等用于保存分割后的每个字段的值，&lt;code class=&quot;highlighter-rouge&quot;&gt;$0&lt;/code&gt; 用于保存整行的内容。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{ print $5 &quot;\t&quot; $9 }'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;622-格式化字段&quot;&gt;6.2.2 格式化字段&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-ldh&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; total | &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{ print &quot;Size is &quot; $5 &quot; bytes for &quot; $9 }'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;要想让  &lt;code class=&quot;highlighter-rouge&quot;&gt;awk&lt;/code&gt; 的输出更加易于阅读，还是需要人为地为格式化做些努力。如在适当的位置插入一些文字说明、空格、制表符等。&lt;/p&gt;

&lt;p&gt;需要时还可以使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;sort&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;head&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;tail&lt;/code&gt; 等来排序、截取。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;sort&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-rnk&lt;/span&gt; 5 | &lt;span class=&quot;nb&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-3&lt;/span&gt; | &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{ print &quot;Partition &quot; $6 &quot;\t: &quot; $5 &quot; used.&quot; }'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;特殊格式化字符&quot;&gt;特殊格式化字符&lt;/h5&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;字符&lt;/th&gt;
      &lt;th&gt;作用&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\a&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;提示音&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\n&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;换行符&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\t&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;制表符&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;623-print-命令与正则表达式&quot;&gt;6.2.3 &lt;code class=&quot;highlighter-rouge&quot;&gt;print&lt;/code&gt; 命令与正则表达式&lt;/h4&gt;

&lt;p&gt;把正则表达式放到一对斜线中，可以用来做模板来匹配。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;awk 'EXPRESSION { PROGRAM }' file(s)&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/dev\/hd/ { print $6 &quot;\t: &quot; $5 }'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/dev\/hd/&lt;/code&gt; 表达式中的斜线必须转义。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/\&amp;lt;(a|x).*\.conf$/ { print $9 }'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;匹配以 a 或 x 开头的 &lt;code class=&quot;highlighter-rouge&quot;&gt;.conf&lt;/code&gt; 文件。表达式中第一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt; 为通配符，第二个 &lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt; 为句点本身，所以被转义。&lt;/p&gt;

&lt;h4 id=&quot;624-在输出中添加注释&quot;&gt;6.2.4 在输出中添加注释&lt;/h4&gt;

&lt;p&gt;要想在输出的前面或后面添加注释，需要使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;BEGIN&lt;/code&gt; 或 &lt;code class=&quot;highlighter-rouge&quot;&gt;END&lt;/code&gt; 来标记：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; | &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'BEGIN { print &quot;Files found:\n&quot; } /\&amp;lt;[a|x].*\.conf$/ { print $9 }'&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; | &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/\&amp;lt;[a|x].*\.conf$/ { print $9 } END { print \
&quot;these files are found.&quot; }'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;625-gawk-脚本&quot;&gt;6.2.5 gawk 脚本&lt;/h4&gt;

&lt;p&gt;把 &lt;code class=&quot;highlighter-rouge&quot;&gt;awk&lt;/code&gt; 命令写入脚本文件，以便重用。&lt;code class=&quot;highlighter-rouge&quot;&gt;awk&lt;/code&gt; 脚本可以包含 &lt;code class=&quot;highlighter-rouge&quot;&gt;awk&lt;/code&gt; &lt;strong&gt;声明&lt;/strong&gt;，通过声明来 &lt;strong&gt;定义模板和动作&lt;/strong&gt;。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cat diskrep.awk
BEGIN { print &quot;*** WARNING WARNING WARNING ***&quot; }
/\&amp;lt;[8|9][0-9]%/ { print &quot;Partition &quot; $6 &quot;\t: &quot; $5 &quot; full!&quot; }
END { print &quot;*** Give money for new disks URGENTLY! ***&quot; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;匹配 &lt;code class=&quot;highlighter-rouge&quot;&gt;80% ~ 99%&lt;/code&gt; 。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; diskrep.awk
&lt;span class=&quot;k&quot;&gt;***&lt;/span&gt; WARNING WARNING WARNING &lt;span class=&quot;k&quot;&gt;***&lt;/span&gt;
Partition /usr  : 97% full!
&lt;span class=&quot;k&quot;&gt;***&lt;/span&gt; Give money &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;new disks URGENTLY! &lt;span class=&quot;k&quot;&gt;***&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;63-gawk-变量&quot;&gt;6.3 gawk 变量&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;awk&lt;/code&gt; 处理输入文件时，要用到几个变量，其中有的是可修改的，有的是只读的。&lt;/p&gt;

&lt;h4 id=&quot;631-输入字段分隔符&quot;&gt;6.3.1 输入字段分隔符&lt;/h4&gt;

&lt;p&gt;Field Separator，FS&lt;/p&gt;

&lt;p&gt;字段分隔符可以是单个字符，也可以是一个正则表达式，用来控制 &lt;code class=&quot;highlighter-rouge&quot;&gt;awk&lt;/code&gt; 如何把输入分割成字段。&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;字段分隔符用内建变量 &lt;code class=&quot;highlighter-rouge&quot;&gt;FS&lt;/code&gt; 表示，注意，它与兼容 POSIX 的 shell 所使用的 &lt;code class=&quot;highlighter-rouge&quot;&gt;IFS&lt;/code&gt; 变量不是一回事。&lt;/p&gt;

&lt;p&gt;字段分隔符的值可以用 &lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt; 来修改。通常对它的定义需要在 &lt;code class=&quot;highlighter-rouge&quot;&gt;BEGIN&lt;/code&gt; 模板中进行：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'BEGIN { FS=&quot;:&quot; } { print $1 &quot;\t&quot; $5 }'&lt;/span&gt; /etc/passwd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果写到脚本中：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cat printnames.awk
BEGIN { FS=&quot;:&quot; }
{ print $1 &quot;\t&quot; $5 }

$ awk -f printnames.awk /etc/passwd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;定义分隔符时一定要小心，否则容易出问题。&lt;/p&gt;

&lt;h4 id=&quot;632-输出分隔符&quot;&gt;6.3.2 输出分隔符&lt;/h4&gt;

&lt;h5 id=&quot;6321-输出字段分隔符&quot;&gt;6.3.2.1 输出字段分隔符&lt;/h5&gt;

&lt;p&gt;Output Field Separator，OFS，也是内建变量。通常为空格。&lt;/p&gt;

&lt;p&gt;输出的字段通常用空格分隔，但只有在用逗号来分隔 &lt;code class=&quot;highlighter-rouge&quot;&gt;print&lt;/code&gt; 的参数时才会使用：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat test
&lt;/span&gt;record1         data1
record2         data2

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{ print $1 $2}'&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#      参数  $1 和 $2 之间没有逗号&lt;/span&gt;
record1data1
record2data2
&lt;span class=&quot;c&quot;&gt;#  输出就不会用空格，而是把 $1$2 做为一个参数&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#  所以它们的输出是连在一起的&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{ print $1, $2}'&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#                ^  有逗号分隔&lt;/span&gt;
record1 data1
record2 data2
&lt;span class=&quot;c&quot;&gt;# 所以 $1 和 $2 被当作两个参数对待&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 在它们的输出之间自动添加空格&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;6322-输出记录分隔符&quot;&gt;6.3.2.2 输出记录分隔符&lt;/h5&gt;

&lt;p&gt;Output Record Separator，ORS，内建变量。&lt;/p&gt;

&lt;p&gt;一条 &lt;code class=&quot;highlighter-rouge&quot;&gt;print&lt;/code&gt; 语句的整体输出称为一条输出记录。每个 &lt;code class=&quot;highlighter-rouge&quot;&gt;print&lt;/code&gt; 命令都会产生一个输出记录，其后跟着一个字符串，即 ORS。该变量的默认值为换行符 &lt;code class=&quot;highlighter-rouge&quot;&gt;\n&lt;/code&gt;，因此，每条 &lt;code class=&quot;highlighter-rouge&quot;&gt;print&lt;/code&gt; 语句才会产生一个单独的行。&lt;/p&gt;

&lt;p&gt;要想修改分割输出字段和输出记录的方式，可以通过为 &lt;code class=&quot;highlighter-rouge&quot;&gt;OFS&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;ORS&lt;/code&gt; 变量赋值：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'BEGIN { OFS=&quot;;&quot; ; ORS=&quot;\n--&amp;gt;\n&quot; } \
	{ print $1,$2}'&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;test
&lt;/span&gt;record1&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;data1
&lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
record2&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;data2
&lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果 &lt;code class=&quot;highlighter-rouge&quot;&gt;ORS&lt;/code&gt; 中没有换行符，全部输入就会变成一行。&lt;/p&gt;

&lt;h4 id=&quot;633-记录数&quot;&gt;6.3.3 记录数&lt;/h4&gt;

&lt;p&gt;Number of Records，NR，内建变量。&lt;/p&gt;

&lt;p&gt;该变量用于保存 &lt;code class=&quot;highlighter-rouge&quot;&gt;awk&lt;/code&gt; 处理的记录数量。每读取一行新的输入，就会加 1。可以在脚本结尾处，用来统计记录总数。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cat processed.awk
BEGIN { OFS=&quot;-&quot; ; ORS=&quot;\n--&amp;gt; done\n&quot; }
{ print &quot;Record number &quot; NR &quot;:\t&quot; $1,$2 }
END { print &quot;Number of records processed: &quot; NR }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;634-自定义变量&quot;&gt;6.3.4 自定义变量&lt;/h4&gt;

&lt;p&gt;除了内建变量，用户可以根据需要来自定义自己的变量。&lt;/p&gt;

&lt;p&gt;如果 &lt;code class=&quot;highlighter-rouge&quot;&gt;awk&lt;/code&gt; 遇到对一个新变量的引用，如果该变量之前没有定义，则会立即创建，并为其赋空值。&lt;/p&gt;

&lt;p&gt;可以用 &lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt; 为变量赋值。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cat revenues
20021009        20021013        consultancy     BigComp         2500
20021015        20021020        training        EduComp         2000
20021112        20021123        appdev          SmartComp       10000
20021204        20021215        training        EduComp         5000

$ cat total.awk
{ total=total + $5 }
{ print &quot;Send bill for &quot; $5 &quot; dollar to &quot; $4 }
END { print &quot;---------------------------------\nTotal revenue: &quot; total }

$ awk -f total.awk test
Send bill for 2500 dollar to BigComp
Send bill for 2000 dollar to EduComp
Send bill for 10000 dollar to SmartComp
Send bill for 5000 dollar to EduComp
---------------------------------
Total revenue: 19500
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;也支持使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;VAR+= value&lt;/code&gt; 的自增格式。&lt;/p&gt;

&lt;h4 id=&quot;635-printf-命令&quot;&gt;6.3.5 &lt;code class=&quot;highlighter-rouge&quot;&gt;printf&lt;/code&gt; 命令&lt;/h4&gt;

&lt;p&gt;要想达到更加精确地格式化，可以使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;printf&lt;/code&gt; 命令。&lt;/p&gt;

&lt;p&gt;它可以针对每一个具体的字段进行个性化的格式设定。&lt;/p&gt;

&lt;h2 id=&quot;7-条件语句&quot;&gt;7. 条件语句&lt;/h2&gt;

&lt;h3 id=&quot;71-if-简介&quot;&gt;7.1 &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; 简介&lt;/h3&gt;

&lt;h4 id=&quot;711-if-的一般用法&quot;&gt;7.1.1 &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; 的一般用法&lt;/h4&gt;

&lt;p&gt;根据某命令的运行结果来进行下一个操作。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;if TEST-COMMANDS; then CONSEQUENT-COMMANDS; fi&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;如果 &lt;code class=&quot;highlighter-rouge&quot;&gt;TEST-COMMANDS&lt;/code&gt; 运行后返回的状态为 0，则会执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;CONSEQUENT-COMMANDS&lt;/code&gt; 中的命令。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CONSEQUENT-COMMANDS&lt;/code&gt; 经常会涉及到对数字或字符串的比较，当然也可以是任何其它命令。&lt;/p&gt;

&lt;p&gt;通常用 &lt;strong&gt;一元表达式&lt;/strong&gt; 来检查文件的状态，如果被检查的文件参数为 &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/fd/N&lt;/code&gt; 形式，则会检查文件描述符 N。&lt;/p&gt;

&lt;p&gt;标准输入、标准输出、标准错误及它们对应的描述符也可以用来测试。&lt;/p&gt;

&lt;h5 id=&quot;7111-常用的-if-表达式&quot;&gt;7.1.1.1 常用的 &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; 表达式&lt;/h5&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TEST-COMMANDS&lt;/code&gt; 如果是条件测试，则需要用中括号 &lt;code class=&quot;highlighter-rouge&quot;&gt;[ expressions ]&lt;/code&gt; 把表达式括起来。&lt;/p&gt;

&lt;p&gt;针对文件的条件测试：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;表达式&lt;/th&gt;
      &lt;th&gt;为 &lt;code class=&quot;highlighter-rouge&quot;&gt;真&lt;/code&gt; 的测试结果&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[ -a FILE ]&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;文件存在&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[ -b FILE ]&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;文件存在，为块设备&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[ -c FILE ]&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;文件存在，为字符设备&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[ -d FILE ]&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;文件存在，为目录&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[ -e FILE ]&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;文件存在&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[ -f FILE ]&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;文件存在，普通文件&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[ -g FILE ]&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;文件存在，SGID 位被设置&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[ -h FILE ]&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;文件存在，符号链接&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[ -k FILE ]&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;文件存在，SBIT 位被设置&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[ -p FILE ]&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;文件存在，FIFO 文件&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[ -r FILE ]&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;文件存在，可读&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[ -s FILE ]&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;文件存在，大小大于零&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[ -t FD ]&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;文件描述符被打开，指代某终端&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[ -u FILE ]&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;文件存在，SUID 位被设置&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[ -w FILE ]&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;文件存在，可写&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[ -x FILE ]&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;文件存在，可执行&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[ -O FILE ]&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;文件存在，所有者为 EUID&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[ -G FILE ]&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;文件存在，所有者为 EGID&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[ -L FILE ]&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;文件存在，符号链接&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[ -N FILE ]&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;文件存在，最近读取后被修改过&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[ -S FILE ]&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;文件存在，套接字&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[ FILE1 -nt FILE2 ]&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FILE1&lt;/code&gt; 的修改时间比 &lt;code class=&quot;highlighter-rouge&quot;&gt;FILE2&lt;/code&gt; 新，或 &lt;code class=&quot;highlighter-rouge&quot;&gt;FILE1&lt;/code&gt; 存在而 &lt;code class=&quot;highlighter-rouge&quot;&gt;FILE2&lt;/code&gt; 不存在&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[ FILE1 -ot FILE2 ]&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FILE1&lt;/code&gt; 的修改时间比 &lt;code class=&quot;highlighter-rouge&quot;&gt;FILE2&lt;/code&gt; 旧，或 &lt;code class=&quot;highlighter-rouge&quot;&gt;FILE2&lt;/code&gt; 存在而 &lt;code class=&quot;highlighter-rouge&quot;&gt;FILE1&lt;/code&gt; 不存在&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[ FILE1 -ef FILE2 ]&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FILE1&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;FILE2&lt;/code&gt; 指向同一个设备、同一个 inode 编号&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;针对选项、字符串、参数的条件测试：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;表达式&lt;/th&gt;
      &lt;th&gt;为 &lt;code class=&quot;highlighter-rouge&quot;&gt;真&lt;/code&gt; 的测试结果&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[ -o OPTIONNAME ]&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;shell 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;OPTIONNAME&lt;/code&gt; 选项已启用&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[ -z STRING ]&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;STRING&lt;/code&gt; 字符串的长度为 0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[ -n STRING ] or [ STRING ]&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;STRING&lt;/code&gt; 字符串的长度不是 0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[ STRING1 == STRING2 ]&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;两个字符串相同。&lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt; 可用 &lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt; 代替&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[ STRING1 != STRING2 ]&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;两个字符串不同&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[ STRING1 &amp;lt; STRING2 ]&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;在当前语系中，&lt;code class=&quot;highlighter-rouge&quot;&gt;STRING1&lt;/code&gt; 排序在 &lt;code class=&quot;highlighter-rouge&quot;&gt;STRING2&lt;/code&gt; 的前面&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[ STRING1 &amp;gt; STRING2 ]&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;在当前语系中，&lt;code class=&quot;highlighter-rouge&quot;&gt;STRING1&lt;/code&gt; 排序在 &lt;code class=&quot;highlighter-rouge&quot;&gt;STRING2&lt;/code&gt; 的后面&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[ ARG1 OP ARG2 ]&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;OP&lt;/code&gt; 代表操作符，可以是 &lt;code class=&quot;highlighter-rouge&quot;&gt;-eq&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;-ne&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;-lt&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;-le&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;-gt&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;-ge&lt;/code&gt; 之一。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;可以用以下操作符来组合表达式：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;表达式&lt;/th&gt;
      &lt;th&gt;为 &lt;code class=&quot;highlighter-rouge&quot;&gt;真&lt;/code&gt; 的测试结果&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[ ! EXPR ]&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;EXPR&lt;/code&gt; 为假&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[ ( EXPR ) ]&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;返回 &lt;code class=&quot;highlighter-rouge&quot;&gt;EXPR&lt;/code&gt; 的值，用于覆盖操作符的普通优先级&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[ EXPR1 -a EXPR2 ]	&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;EXPR1&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;EXPR2&lt;/code&gt; 均为真&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[ EXPR1 -o EXPR2 ]&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;EXPR1&lt;/code&gt; 或 &lt;code class=&quot;highlighter-rouge&quot;&gt;EXPR2&lt;/code&gt; 为真&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;这种 &lt;code class=&quot;highlighter-rouge&quot;&gt;[ ... ]&lt;/code&gt; 格式，或 &lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt; 内建命令可以对条件表达式进行测试。&lt;/p&gt;

&lt;h5 id=&quot;7112-then-后面的命令&quot;&gt;7.1.1.2 &lt;code class=&quot;highlighter-rouge&quot;&gt;then&lt;/code&gt; 后面的命令&lt;/h5&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;then&lt;/code&gt; 后面的 &lt;code class=&quot;highlighter-rouge&quot;&gt;CONSEQUENT-COMMANDS&lt;/code&gt; 可以是任何有效的 UNIX 命令、可执行程序、可执行脚本、shell 语句，当然除了 &lt;code class=&quot;highlighter-rouge&quot;&gt;fi&lt;/code&gt;。&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;一定要记住，&lt;code class=&quot;highlighter-rouge&quot;&gt;then&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;fi&lt;/code&gt; 在 shell 中被当作单独的语句，因此，如果在命令行中同一行使用时，它们之间必须用分号 &lt;code class=&quot;highlighter-rouge&quot;&gt;;&lt;/code&gt; 来分隔。&lt;/p&gt;

&lt;p&gt;在脚本中，&lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; 语句的不同部分通常可以自动分隔。&lt;/p&gt;

&lt;h5 id=&quot;7113-检测文件&quot;&gt;7.1.1.3 检测文件&lt;/h5&gt;

&lt;p&gt;检测文件是否存在：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; /var/log/messages &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/var/log/messages exists.&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;7114-检测-shell-选项&quot;&gt;7.1.1.4 检测 shell 选项&lt;/h5&gt;

&lt;p&gt;可以在启动脚本中添加：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; noclobber &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;then
	&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Your files are protected against accidental overwriting using redirection.&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;712-if-的常见应用&quot;&gt;7.1.2 &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; 的常见应用&lt;/h4&gt;

&lt;h5 id=&quot;7121-测试退出状态&quot;&gt;7.1.2.1 测试退出状态&lt;/h5&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;?&lt;/code&gt; 变量会保存上一个前台命令的退出状态。&lt;/p&gt;

&lt;p&gt;直接测试 &lt;code class=&quot;highlighter-rouge&quot;&gt;?&lt;/code&gt; 的值：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;grep $USER /etc/passwd
if [ $? -eq 0 ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;用表达式测试：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if ! grep $USER /etc/passwd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;7122-数字的比较&quot;&gt;7.1.2.2 数字的比较&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if [ &quot;$num&quot; -gt &quot;150&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;7123-字符串比较&quot;&gt;7.1.2.3 字符串比较&lt;/h5&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if [ &quot;$(whoami)&quot; != 'root' ]; then
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[ &quot;$(whoami)&quot; != 'root' ] &amp;amp;&amp;amp; ( echo you are using a non-privileged account; exit 1 )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;比较语句中也可以使用正则表达式：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if [[ &quot;$gender&quot; == f* ]]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;👉 &lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt; 命令&lt;/p&gt;

&lt;p&gt;大部分程序员更喜欢用 &lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt; 内建命令来进行测试，其效果与方括号是一样的：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;test &quot;$(whoami)&quot; != 'root' &amp;amp;&amp;amp; (echo you are using a non-privileged account; exit 1)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;👉 不能用 &lt;code class=&quot;highlighter-rouge&quot;&gt;exit&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;因为在子 shell 中调用 &lt;code class=&quot;highlighter-rouge&quot;&gt;exit&lt;/code&gt; 会导致无法传递变量。&lt;/p&gt;

&lt;p&gt;因此，如果不希望 bash 产生子 shell，可以用 &lt;code class=&quot;highlighter-rouge&quot;&gt;{ }&lt;/code&gt;，而不用 &lt;code class=&quot;highlighter-rouge&quot;&gt;( )&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&quot;72-if-高级应用&quot;&gt;7.2 &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; 高级应用&lt;/h3&gt;

&lt;h4 id=&quot;721-if--then--else-结构&quot;&gt;7.2.1 &lt;code class=&quot;highlighter-rouge&quot;&gt;if / then / else&lt;/code&gt; 结构&lt;/h4&gt;

&lt;h5 id=&quot;7211-范例&quot;&gt;7.2.1.1 范例&lt;/h5&gt;

&lt;p&gt;该结构可以根据不同的测试结果，分别进行不同的操作。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$gender&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;f*&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;then &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Pleasure to meet you, Madame.&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;How come the lady hasn't got a drink yet?&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;单层方括号与双层方括号的区别：&lt;/p&gt;

&lt;p&gt;双层 &lt;code class=&quot;highlighter-rouge&quot;&gt;[[  ]]&lt;/code&gt; 可以防止变量值被执行 &lt;strong&gt;字段分割&lt;/strong&gt;，还可以防止 &lt;strong&gt;路径扩展&lt;/strong&gt;。&lt;/p&gt;

&lt;h5 id=&quot;7212-检测命令行参数&quot;&gt;7.2.1.2 检测命令行参数&lt;/h5&gt;

&lt;p&gt;在命令行中为变量赋值，比从脚本中赋值来的更加优雅。&lt;/p&gt;

&lt;p&gt;通常使用位置参数 &lt;code class=&quot;highlighter-rouge&quot;&gt;$1&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;$2&lt;/code&gt; 等来完成，&lt;code class=&quot;highlighter-rouge&quot;&gt;$#&lt;/code&gt; 表示命令行参数的总数，&lt;code class=&quot;highlighter-rouge&quot;&gt;$0&lt;/code&gt; 表示脚本名称。&lt;/p&gt;

&lt;p&gt;例脚本内容为：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;idealweight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$[$height&lt;/span&gt; - 110]

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$weight&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-le&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$idealweight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;You should eat a bit more fat.&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;You should eat a bit more fruit.&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;调用脚本：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash &lt;span class=&quot;nt&quot;&gt;-x&lt;/span&gt; weight.sh 55 169
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;7213-测试参数的数量&quot;&gt;7.2.1.3 测试参数的数量&lt;/h5&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$#&lt;/code&gt; 表示命令行参数的总数。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$# &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; 2 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Usage: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; weight_in_kilos length_in_centimeters&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;exit
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;7214-测试文件是否存在&quot;&gt;7.2.1.4 测试文件是否存在&lt;/h5&gt;

&lt;p&gt;许多脚本中经常用到这个测试。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;FILENAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Properties for &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$FILENAME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$FILENAME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Size is &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-lh&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$FILENAME&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{ print $5 }'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Type is &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;file &lt;span class=&quot;nv&quot;&gt;$FILENAME&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;cut&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;:&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f2&lt;/span&gt; -&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Inode number is &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$FILENAME&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;cut&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f1&lt;/span&gt; -&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$FILENAME&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; Mounted | &lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{ print &quot;On&quot;,$1&quot;, \
which is mounted as the&quot;,$6,&quot;partition.&quot;}'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;File does not exist.&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;722-if--then--elif--else-结构&quot;&gt;7.2.2 &lt;code class=&quot;highlighter-rouge&quot;&gt;if / then / elif / else&lt;/code&gt; 结构&lt;/h4&gt;

&lt;p&gt;基本结构：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;TEST-COMMANDS&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
	&lt;/span&gt;CONSEQUENT-COMMANDS&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;elif &lt;/span&gt;MORE-TEST-COMMANDS&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
	&lt;/span&gt;MORE-CONSEQUENT-COMMANDS&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else &lt;/span&gt;ALTERNATE-CONSEQUENT-COMMANDS&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;723-if-语句的嵌套&quot;&gt;7.2.3 &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; 语句的嵌套&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; 可以嵌套多层 &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt;。&lt;/p&gt;

&lt;h4 id=&quot;724-布尔运算&quot;&gt;7.2.4 布尔运算&lt;/h4&gt;

&lt;p&gt;如果条件很复杂，可以用布尔运算符来连接多个条件：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&amp;amp;&lt;/code&gt; ：表示 &lt;strong&gt;与&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;||&lt;/code&gt; ：表示 &lt;strong&gt;或&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt; +%Y&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$year&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; % 400&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$year&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; % 4 == &quot;&lt;/span&gt;0&lt;span class=&quot;s2&quot;&gt;&quot;) &amp;amp;&amp;amp; (&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$year&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; % 100 != &quot;&lt;/span&gt;0&lt;span class=&quot;s2&quot;&gt;&quot;) )); then
	echo &quot;&lt;/span&gt;leap year&lt;span class=&quot;s2&quot;&gt;&quot;
else
	echo &quot;&lt;/span&gt;not leap year&lt;span class=&quot;s2&quot;&gt;&quot;
fi
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;725-exit-语句&quot;&gt;7.2.5 &lt;code class=&quot;highlighter-rouge&quot;&gt;exit&lt;/code&gt; 语句&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;exit&lt;/code&gt; 语句会终止脚本的执行，经常用于用户发来的输入请求有误时，或某个语句没有成功运行，或发生其它错误时。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;exit&lt;/code&gt; 可以接一个参数，该参数必须是整数，代表退出状态码，它会被传递给父进程，并保存到 &lt;code class=&quot;highlighter-rouge&quot;&gt;$?&lt;/code&gt; 变量中。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;exit 0&lt;/code&gt; 表示脚本运行成功，任何其他值都用于针对不同的错误进行不同的操作。如果 &lt;code class=&quot;highlighter-rouge&quot;&gt;exit&lt;/code&gt; 命令没有跟参数，父 shell 会使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;$?&lt;/code&gt; 变量的当前值。&lt;/p&gt;

&lt;h3 id=&quot;73-case-语句&quot;&gt;7.3 &lt;code class=&quot;highlighter-rouge&quot;&gt;case&lt;/code&gt; 语句&lt;/h3&gt;

&lt;h4 id=&quot;731-简化条件&quot;&gt;7.3.1 简化条件&lt;/h4&gt;

&lt;p&gt;虽然可以使用嵌套的 &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; 语句，但如果不同的可能性太多，就会越来越不方便。对于更复杂的条件，建议使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;case&lt;/code&gt; 语句：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; EXPRESSION &lt;span class=&quot;k&quot;&gt;in
&lt;/span&gt;CASE1&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	COMMAND-LIST
	&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
CASE2&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	COMMAND-LIST
	&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
 ...
CASEN&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	COMMAND-LIST
	&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;esac&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;8-编写交互式脚本&quot;&gt;8. 编写交互式脚本&lt;/h2&gt;

&lt;h3 id=&quot;81-显示用户消息&quot;&gt;8.1 显示用户消息&lt;/h3&gt;

&lt;h4 id=&quot;811&quot;&gt;8.1.1&lt;/h4&gt;

&lt;p&gt;有些脚本运行时不需要与用户进行任何交互，它们的优点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;每次的运行结果可预知&lt;/li&gt;
  &lt;li&gt;可在后台运行&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;然而有些脚本需要用户的输入，或需要给用户提供输出，它们的优点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;可以做的更灵活&lt;/li&gt;
  &lt;li&gt;脚本运行时可以有多种可能性&lt;/li&gt;
  &lt;li&gt;脚本运行时可以汇报其运行进度&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;编写交互式脚本时，要尽可能地添加注释。如果脚本能够提示合适的消息，则对用户更友好，更容易调试。否则就等着接投诉电话吧。因此，需要等待时可以提示用户 “当前正在计算，请稍等”，如果计算时间会很久，可以考虑在脚本的输出中添加一个进度提示。&lt;/p&gt;

&lt;p&gt;当提示用户输入时，也应该尽可能详细地说明对输入数据的要求，包括参数和用法等。&lt;/p&gt;

&lt;h4 id=&quot;812-使用-echo&quot;&gt;8.1.2 使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;echo&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;echo&lt;/code&gt; 为内建命令，它会将其参数输出，用空格分隔，在换行符处终止。返回状态永远是 0。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;echo&lt;/code&gt; 可以用的选项：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-e&lt;/code&gt; ：识别反斜线转义序列，如 &lt;code class=&quot;highlighter-rouge&quot;&gt;\n&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;\a&lt;/code&gt; 等&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-n&lt;/code&gt; ：行尾不加换行符，输出会紧接着下一个提示符&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以下为 &lt;code class=&quot;highlighter-rouge&quot;&gt;echo&lt;/code&gt; 可用的转义序列：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;序列&lt;/th&gt;
      &lt;th&gt;作用&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\a&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;警示字符，提示音&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\b&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;回退字符&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\c&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;取消输出中最后一个参数后面的换行符。 &lt;code class=&quot;highlighter-rouge&quot;&gt;\c&lt;/code&gt; 序列后面的所有字符都将被忽略。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\e&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;转义符，用于转义控制字符&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\f&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;馈页&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\n&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;换行&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\r&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;回车&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\t&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;水平制表符&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\v&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;垂直制表符&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\\&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;反斜线&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\0NNN&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;3 位 8 进制数字&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\NNN&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;3 位二进制数字&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\xHH&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;2 位十六进制数字&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
  &lt;p&gt;【 关于 &lt;code class=&quot;highlighter-rouge&quot;&gt;\e&lt;/code&gt; 转义符 】
ASCII 码的前 32 个字符被保留，做为控制字符，也叫转义序列。这些控制字符不是为了输出可见信息，而是为了控制使用 ASCII 码的设备（打印机、显示器等），或为数据流提供元信息（如磁带中的数据流）。
转义序列通常可以通过 &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl&lt;/code&gt;&lt;/strong&gt; 键与其它键的组合来 &lt;strong&gt;模拟&lt;/strong&gt;。
第 &lt;strong&gt;27&lt;/strong&gt; （十进制）个转义符，即八进制的第 33 个（\033），十六进制的 &lt;code class=&quot;highlighter-rouge&quot;&gt;0x1b&lt;/code&gt;，是转义序列符。不同的 shell、不同的语言和工具处理起来会有所不同。可以用 &lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl - [&lt;/code&gt; 来模拟，即 &lt;code class=&quot;highlighter-rouge&quot;&gt;^[&lt;/code&gt;。
在输出时，要想使用控制字符，必须在其前面加上 &lt;code class=&quot;highlighter-rouge&quot;&gt;\e&lt;/code&gt; 转义符，这样像 &lt;code class=&quot;highlighter-rouge&quot;&gt;echo -e&lt;/code&gt; 这样的命令才能识别。
常见的控制字符：
&lt;strong&gt;7&lt;/strong&gt;，响铃字符，会发出响铃以警示用户。bell，&lt;code class=&quot;highlighter-rouge&quot;&gt;BEL&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;\a&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;^G&lt;/code&gt;
&lt;strong&gt;8&lt;/strong&gt;，覆盖显示前一个字符。backspace，&lt;code class=&quot;highlighter-rouge&quot;&gt;BS&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;\b&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;^H&lt;/code&gt;
&lt;strong&gt;10&lt;/strong&gt;，换行符。line feed，&lt;code class=&quot;highlighter-rouge&quot;&gt;LF&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;\n&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;^J&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;82-捕捉用户的输入&quot;&gt;8.2 捕捉用户的输入&lt;/h3&gt;

&lt;h4 id=&quot;821-read-命令&quot;&gt;8.2.1 &lt;code class=&quot;highlighter-rouge&quot;&gt;read&lt;/code&gt; 命令&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;read&lt;/code&gt; 是内建命令，与 &lt;code class=&quot;highlighter-rouge&quot;&gt;echo&lt;/code&gt; 相反，它要读取用户的输入。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;read [options] NAME1 NAME2 ... NAMEN&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;read&lt;/code&gt; 命令会从命令行读取一行，或者从文件描述符中读取。读取到的第一个字段被分配给变量 &lt;code class=&quot;highlighter-rouge&quot;&gt;NAME1&lt;/code&gt;，以此类推。&lt;/p&gt;

&lt;p&gt;变量值中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;IFS&lt;/code&gt; 用于分割输入行。&lt;/p&gt;

&lt;p&gt;反斜线用于转义或继续上行输入。&lt;/p&gt;

&lt;p&gt;如果在 &lt;code class=&quot;highlighter-rouge&quot;&gt;read&lt;/code&gt; 命令中没有指定 &lt;code class=&quot;highlighter-rouge&quot;&gt;NAME1&lt;/code&gt; 这些变量，读取的行会赋予变量 &lt;code class=&quot;highlighter-rouge&quot;&gt;REPLY&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;read&lt;/code&gt; 通常返回代码为 0。除非遇到 &lt;code class=&quot;highlighter-rouge&quot;&gt;EOF&lt;/code&gt; 字符，或超时，或参数中的文件描述符无效。&lt;/p&gt;

&lt;h5 id=&quot;read-命令的选项&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;read&lt;/code&gt; 命令的选项&lt;/h5&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;选项&lt;/th&gt;
      &lt;th&gt;作用&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-a ANAME&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;字段会被依次分配给数组变量 &lt;code class=&quot;highlighter-rouge&quot;&gt;ANAME&lt;/code&gt;，索引从 0 开始。为该数组赋值之前，会先清空该数组。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-d DELIM&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;用来结束输入行的不再是换行符，而是 &lt;code class=&quot;highlighter-rouge&quot;&gt;DELIM&lt;/code&gt; 中的第一个字符&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-e&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;用 &lt;code class=&quot;highlighter-rouge&quot;&gt;readline&lt;/code&gt; 命令来读取输入行&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-n NCHARS&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;read&lt;/code&gt; 命令在读取到 &lt;code class=&quot;highlighter-rouge&quot;&gt;NCHARS&lt;/code&gt; 这个字符后立即返回，而不会读完整行输入&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-p PROMPT&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;在读取输入之前，先在终端上显示一个提示信息 &lt;code class=&quot;highlighter-rouge&quot;&gt;PROMPT&lt;/code&gt;，只对从终端读取输入有效&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-r&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;反斜线不再有转义和继续上一行的作用&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-s&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;安静模式，如果从终端读取输入，键入的文字不会被回显&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-t TIMEOUT&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;设置超时，指定时间内如果没有能够读取到一行输入就超时。仅适用于从终端和管道读取输入。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-u FD&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;从文件描述符 FD 中读取输入&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;822-用户输入的提示信息&quot;&gt;8.2.2 用户输入的提示信息&lt;/h4&gt;

&lt;p&gt;在使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;read&lt;/code&gt; 命令来读取用户输入时，要确保用户明白你需要的数据是什么。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Enter your name and press [ENTER]: &quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;name
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Enter your gender and press [ENTER]: &quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; 1 gender
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;823-重定向与文件描述符&quot;&gt;8.2.3 重定向与文件描述符&lt;/h4&gt;

&lt;h5 id=&quot;8231-一般用法&quot;&gt;8.2.3.1 一般用法&lt;/h5&gt;

&lt;p&gt;脚本中也可以发生重定向，如从文件中读取输入，或把输出发送给文件。&lt;/p&gt;

&lt;p&gt;文件的输入和输出是由文件描述符完成的，最常用的是标准输入、标准输出、标准错误，分别为 0，1，2。&lt;/p&gt;

&lt;p&gt;bash 也可以把网络主机上的 TCP 或 UDP &lt;strong&gt;端口做为文件描述符&lt;/strong&gt; 来使用。&lt;/p&gt;

&lt;p&gt;执行某个命令时，以下步骤会依次发生：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如果上一个命令的标准输出正通过管道被定向到当前命令的标准输入，&lt;code class=&quot;highlighter-rouge&quot;&gt;/proc/&amp;lt;current_process_ID&amp;gt;/fd/0&lt;/code&gt; 会更新，指向与 &lt;code class=&quot;highlighter-rouge&quot;&gt;/proc/&amp;lt;previous_process_ID/fd/1&lt;/code&gt; 相同的匿名管道。&lt;/li&gt;
  &lt;li&gt;如果当前命令的标准输出通过管道被重定向到下一个命令的标准输入，&lt;code class=&quot;highlighter-rouge&quot;&gt;/proc/&amp;lt;current_process_ID/fd/1&lt;/code&gt; 会更新，指向另一个匿名管道。&lt;/li&gt;
  &lt;li&gt;针对当前命令的重定向是从左向右处理的&lt;/li&gt;
  &lt;li&gt;一条命令后面的重定向 &lt;code class=&quot;highlighter-rouge&quot;&gt;N&amp;gt;&amp;amp;M&lt;/code&gt; 或 &lt;code class=&quot;highlighter-rouge&quot;&gt;N&amp;lt;&amp;amp;M&lt;/code&gt;，其效果等同于用与 &lt;code class=&quot;highlighter-rouge&quot;&gt;/proc/self/fd/M&lt;/code&gt; 相同的目标，来创建或更新符号链接 &lt;code class=&quot;highlighter-rouge&quot;&gt;/proc/self/fd/N&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;重定向 &lt;code class=&quot;highlighter-rouge&quot;&gt;N&amp;gt; file&lt;/code&gt; 或 &lt;code class=&quot;highlighter-rouge&quot;&gt;N&amp;lt; file&lt;/code&gt; ，其效果等同于用目标文件创建或更新符号链接 &lt;code class=&quot;highlighter-rouge&quot;&gt;/proc/self/fd/N&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;N&amp;gt;&amp;amp;-&lt;/code&gt; 其效果等同于删除符号链接 &lt;code class=&quot;highlighter-rouge&quot;&gt;/proc/self/fd/N&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;只有到现在，当前的命令才执行&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;从命令行中执行脚本时，不会发生太多的改变，因为子 shell 进程使用的文件描述符与父 shell 相同。如果父进程不存在，如通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;cron&lt;/code&gt; 来运行脚本时，标准的文件描述符是管道或其它临时文件，除非使用重定向。&lt;/p&gt;

&lt;h5 id=&quot;8232-对错误进行重定向&quot;&gt;8.2.3.2 对错误进行重定向&lt;/h5&gt;

&lt;p&gt;重定向标准错误时，一定要记住，&lt;strong&gt;顺序至关重要&lt;/strong&gt;。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 2&amp;gt; /var/tmp/unaccessible-in-spool
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;把错误重定向到文件。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /var/tmp/spoollist 2&amp;gt;&amp;amp;1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;把标准输出和标准错误都重定向到文件：&lt;/p&gt;

&lt;p&gt;先把标准输出重定向到文件，再把标准错误重定向到标准输出。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 2 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&amp;amp; 1 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /var/tmp/spoollist
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;先把标准错误重定向到当前的标准输出，再把当前的标准输出重定向到文件。因此最终只有标准输出被重定向到文件。&lt;/p&gt;

&lt;p&gt;为了方便，经常把错误重定向到 &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/null&lt;/code&gt;。&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&amp;gt; FILE&lt;/code&gt;&lt;/strong&gt;  等效于 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt; FILE 2&amp;gt;&amp;amp;1&lt;/code&gt;，使用起来更简单。&lt;/p&gt;

&lt;h4 id=&quot;824-文件输入与输出&quot;&gt;8.2.4 文件输入与输出&lt;/h4&gt;

&lt;h5 id=&quot;8241-使用文件描述符&quot;&gt;8.2.4.1 使用文件描述符&lt;/h5&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/fd&lt;/code&gt; 目录包含了所有的描述符，如 0，1，2 等。打开文件 &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/fd/N&lt;/code&gt; 相当于复制文件描述符 N。如果当前系统提供 &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/stdin&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/stdout&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/stderr&lt;/code&gt;，你会看到它们只是指向 &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/fd/0&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/fd/1&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/fd/2&lt;/code&gt; 的符号链接。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/fd&lt;/code&gt; 中的文件主要是在 shell 中使用，通过该机制，以路径为参数的那些程序可以像对待其它路径一样来操作这些描述符。 如果 &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/fd&lt;/code&gt; 在当前系统不可用，可以用 &lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt; 来代替标准输入或标准输出。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;filter body.txt.gz | &lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;header.txt - footer.txt | lp
filter body.txt | &lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;header.txt /dev/fd/0 footer.txt | lp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;以上两条命令是等效的，将三个文档打印出来。&lt;/p&gt;

&lt;h5 id=&quot;8242-read-和-exec&quot;&gt;8.2.4.2 &lt;code class=&quot;highlighter-rouge&quot;&gt;read&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;exec&lt;/code&gt;&lt;/h5&gt;

&lt;h6 id=&quot;为文件分配描述符&quot;&gt;为文件分配描述符&lt;/h6&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;exec&lt;/code&gt; 命令可用来替换当前的 shell，或更改当前 shell 的描述符。&lt;/p&gt;

&lt;p&gt;例如，可以用来给文件分配一个描述符：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;exec fdN&amp;gt; file&lt;/code&gt;  给文件分配描述符，用于输出&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;exec fdN&amp;lt; file&lt;/code&gt;  给文件分配描述符，用于输入&lt;/p&gt;

&lt;p&gt;然后就可以在 shell 中直接使用描述符了：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;4&amp;gt; result.txt

filter body.txt | &lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;header.txt /dev/fd/0 footer.txt &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&amp;amp; 4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;给文件 &lt;code class=&quot;highlighter-rouge&quot;&gt;result.txt&lt;/code&gt; 分配描述符 4，用于输出，然后把三个文件的输出及错误全部保存到该文件。&lt;/p&gt;

&lt;p class=&quot;notice--warning&quot;&gt;描述符 5 可能会造成问题，因为 bash 用 &lt;code class=&quot;highlighter-rouge&quot;&gt;exec&lt;/code&gt; 创建子 shell 时，其子进程会继承描述符 5，最好保留这个描述符不要使用。&lt;/p&gt;

&lt;h6 id=&quot;读取脚本&quot;&gt;读取脚本&lt;/h6&gt;

&lt;p&gt;该脚本会把重要的配置文件制作索引，将它们放到一个备份文件中。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;CONFIG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/var/tmp/sysconfig.out
&lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CONFIG&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; 2&amp;gt;/dev/null

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Output will be saved in &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CONFIG&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.&quot;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;7&amp;lt;&amp;amp;0
&lt;span class=&quot;c&quot;&gt;# 创建描述符 7，用于输入，与描述符 0 的目标相同&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 相当于把描述符 0 的值先保存到 7 里&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &amp;lt; /etc/passwd
&lt;span class=&quot;c&quot;&gt;# 更新描述符 0 为 /etc/passwd 文件，此时标准输入为一个文件&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;rootpasswd
&lt;span class=&quot;c&quot;&gt;# 从标准输入读取数据，相当于读取 passwd 文件的第一行内容&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Your root account info:&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$CONFIG&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 把一行说明信息追加到配置文件中&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$rootpasswd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CONFIG&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 把从 passwd 读取到的第一行数据追加到配置文件&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;0&amp;lt;&amp;amp;7 7&amp;lt;&amp;amp;-
&lt;span class=&quot;c&quot;&gt;# 把原来保存在描述符 7 里的值还给 0，恢复之前的描述符 0&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 删除描述符 7&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Enter comment or [ENTER] for no comment: &quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;comment&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$comment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CONFIG&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 此时 read 就会从命令行读取了&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;8243-关闭文件描述符&quot;&gt;8.2.4.3 关闭文件描述符&lt;/h5&gt;

&lt;p&gt;因为子进程会继承打开文件的描述符，所以不再需要时要及时将其关闭：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;7&amp;lt;&amp;amp;-
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;8244-here-文档&quot;&gt;8.2.4.4 Here 文档&lt;/h5&gt;

&lt;p&gt;编写脚本时，调用的程序或脚本经常需要输入。shell 可以通过 here 文档来读取输入，直到某行只包含关键字符串，且其后面没有空白字符。到此行读取的所有内容将一起做为标准输入。&lt;/p&gt;

&lt;p&gt;使用 here 文档就可以免于调用单独的文件了，而且比用一堆 &lt;code class=&quot;highlighter-rouge&quot;&gt;echo&lt;/code&gt; 也简单一些。&lt;/p&gt;

&lt;p&gt;虽然名字叫 here 文档，实际上它是脚本中的一种 &lt;strong&gt;结构&lt;/strong&gt; 而已。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Start here document&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;BROWSERS&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
mozilla
links
lynx
konqueror
opera
netscape
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;BROWSERS
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# End here document&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;……….&lt;/p&gt;</content><author><name>Hawk Zhang</name><email>imhawkz@gmail.com</email></author><category term="shell" /><category term="bash" /><category term="sed" /><category term="awk" /><summary type="html">正则表达式，SED，AWK，条件结构，交互式脚本</summary></entry><entry><title type="html">Bash 入门 01</title><link href="https://linotes.netlify.com/programming/bash01/" rel="alternate" type="text/html" title="Bash 入门 01" /><published>2017-05-03T00:00:00+08:00</published><updated>2017-05-03T00:00:00+08:00</updated><id>https://linotes.netlify.com/programming/bash01</id><content type="html" xml:base="https://linotes.netlify.com/programming/bash01/">&lt;p&gt;Bash Guide for Beginners is a good book.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.tldp.org/LDP/Bash-Beginners-Guide/html/index.html&quot;&gt;《 Bash Guide for Beginners 》&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;1-bash-与-bash-脚本&quot;&gt;1. Bash 与 Bash 脚本&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;空白字符：空格或制表符&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;11-常用的-shell-程序&quot;&gt;1.1 常用的 shell 程序&lt;/h3&gt;

&lt;p&gt;UNIX 的 shell 程序可以解释用户的命令，无论是用户直接输入的，还是从 shell 脚本读取的。&lt;/p&gt;

&lt;p&gt;Shell 脚本是 &lt;strong&gt;解释&lt;/strong&gt; 型的，而不是编译型的。Shell 从脚本的每一行读取命令，并在系统中搜索这些命令。&lt;/p&gt;

&lt;p&gt;脚本中可以使用可执行文件。&lt;/p&gt;

&lt;p&gt;除了向内核传送命令之外，shell 的主要任务是提供一个用户环境，该环境可用 shell 配置文件来单独配置。&lt;/p&gt;

&lt;h4 id=&quot;shell-类型&quot;&gt;shell 类型&lt;/h4&gt;

&lt;h5 id=&quot;sh&quot;&gt;sh&lt;/h5&gt;

&lt;p&gt;即 Bourne Shell。它是最早的 shell，现在仍在使用。&lt;/p&gt;

&lt;p&gt;它是基本的 shell，特性不多。虽不是标准的 shell，但为了 UNIX 程序的兼容性，仍存在于每个 Linux 系统中。&lt;/p&gt;

&lt;h5 id=&quot;bash&quot;&gt;bash&lt;/h5&gt;

&lt;p&gt;Bourne Again shell。标准的 GNU shell，直观而又灵活。&lt;/p&gt;

&lt;p&gt;初学者最明智的选择，同时对高级和专业用户来说也是一个强有力的工具。在 Linux 上，bash 是普通用户的标准 shell。这个 shell 因此称为 Bourne shell 的超集，一套附件和插件。&lt;/p&gt;

&lt;p&gt;bash 与 sh 是兼容的：在 sh 中可以工作的命令，在 bash 中也能工作，反之则不然。&lt;/p&gt;

&lt;h5 id=&quot;csh&quot;&gt;csh&lt;/h5&gt;

&lt;p&gt;C shell。语法类似于 C 语言，某些时候程序员会使用。&lt;/p&gt;

&lt;h5 id=&quot;tcsh&quot;&gt;tcsh&lt;/h5&gt;

&lt;p&gt;Turbo C shell。普通 C shell 的超集，加强了的用户友好度和速度。&lt;/p&gt;

&lt;h5 id=&quot;ksh&quot;&gt;ksh&lt;/h5&gt;

&lt;p&gt;Korn shell。有时被有 UNIX 背景的人所赏识。&lt;/p&gt;

&lt;p&gt;Bourne shell 的一个超集，有着对初学者来说就是一场恶梦的标准配置。&lt;/p&gt;

&lt;h4 id=&quot;相关文件&quot;&gt;相关文件&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/shells&lt;/code&gt;  文件中保存了当前系统存在的 shell。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/passwd&lt;/code&gt;  文件中，每个用户都有自己默认 shell 的设置。&lt;/p&gt;

&lt;h4 id=&quot;shell-的切换&quot;&gt;shell 的切换&lt;/h4&gt;

&lt;p&gt;要从一个 shell 转换到另外一个，只需在当前终端输入新 shell 的文件名。&lt;/p&gt;

&lt;p&gt;系统在 &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt; 变量设置的目录中查找。&lt;/p&gt;

&lt;p&gt;新的 shell 会启用新的提示符，因为每个 shell 都有自己的外观。&lt;/p&gt;

&lt;h3 id=&quot;12-bash-的优势&quot;&gt;1.2 Bash 的优势&lt;/h3&gt;

&lt;h4 id=&quot;gnu-shell&quot;&gt;GNU shell&lt;/h4&gt;

&lt;p&gt;GNU 计划为类 UNIX 系统管理提供遵守 UNIX 标准的免费软件。&lt;/p&gt;

&lt;p&gt;Bash 是兼容 sh 的 shell，而且从 Korn shell (ksh) 和 C shell (csh) 整合了一些有用的特性。它遵循 IEEE POSIX P1003.2/ISO 9945.2 Shell 和工具标准。提供了基于 sh 的编程和交互的功能改进；其中包括命令行编辑，无限制的历史命令，作业控制，shell 函数和别名，无大小限制的索引数组，和以 2 到 64 为基础的整数算法。Bash 可以不经修改地运行多数 sh 脚本。&lt;/p&gt;

&lt;p&gt;和其他的 GNU 项目一样，Bash 主动开始保留、保护和促进使用、学习、拷贝、修改和再发布软件的自由。普遍认为这样的情况激发了创造力。这也是 Bash 程序可以而许多其他 shell 无法提供的额外特性的缘由。&lt;/p&gt;

&lt;h4 id=&quot;bash-独有的特性&quot;&gt;Bash 独有的特性&lt;/h4&gt;

&lt;h5 id=&quot;bash-启动脚本&quot;&gt;Bash 启动脚本&lt;/h5&gt;

&lt;p&gt;启动脚本是指当 Bash 启动时会读取并执行的脚本。&lt;/p&gt;

&lt;h6 id=&quot;以交互登陆-shell-调用或者使用-login&quot;&gt;以交互登陆 shell 调用，或者使用 ‘–login’&lt;/h6&gt;

&lt;p&gt;读取的文件：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/profile&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.bash_profile&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt; ~/.bash_login&lt;/code&gt; 或 &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.profile&lt;/code&gt;： 读取第一个存在的可读取的文件&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.bash_logout&lt;/code&gt; 退出的时候&lt;/p&gt;

&lt;p&gt;如果配置文件存在但无法读取，将会显示错误消息。一个文件不存在，Bash 会查找下一个。&lt;/p&gt;

&lt;h6 id=&quot;以交互非登陆-shell-调用&quot;&gt;以交互非登陆 shell 调用&lt;/h6&gt;

&lt;p&gt;读取的文件：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.bashrc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;此文件通常指向 &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.bash_profile&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; ~/.bashrc &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; ~/.bashrc&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h6 id=&quot;非交互调用&quot;&gt;非交互调用&lt;/h6&gt;

&lt;p&gt;所有脚本使用非交互 shell。这些脚本通常仅仅是为了完成特定任务。&lt;/p&gt;

&lt;p&gt;读取的文件：&lt;/p&gt;

&lt;p&gt;由变量 &lt;code class=&quot;highlighter-rouge&quot;&gt;BASH_ENV&lt;/code&gt; 定义&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt; 无法查找脚本文件，所以运行脚本时，最好文件名。&lt;/p&gt;

&lt;h6 id=&quot;以-sh-命令调用&quot;&gt;以 sh 命令调用&lt;/h6&gt;

&lt;p&gt;Bash 尝试 sh 的相似行为，同时也遵循 POSIX 标准。&lt;/p&gt;

&lt;p&gt;读取的文件：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/profile&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.profile&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;当以交互方式调用时，环境变量 &lt;code class=&quot;highlighter-rouge&quot;&gt;ENV&lt;/code&gt; 能指向额外的启动信息。&lt;/p&gt;

&lt;h6 id=&quot;posix-模式&quot;&gt;POSIX 模式&lt;/h6&gt;

&lt;p&gt;本选项在使用内建的命令 &lt;code class=&quot;highlighter-rouge&quot;&gt;set&lt;/code&gt; 时会启用：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; posix
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;或用 &lt;code class=&quot;highlighter-rouge&quot;&gt;--posix&lt;/code&gt; 选项来调用 bash 时也会启用 POSIX 模式。&lt;/p&gt;

&lt;p&gt;Bash 会尽可能遵循 POSIX 的 shell 标准。 设置 &lt;code class=&quot;highlighter-rouge&quot;&gt;POSIXLY_CORRECT&lt;/code&gt; 变量可以达到目的。&lt;/p&gt;

&lt;p&gt;读取的文件：&lt;/p&gt;

&lt;p&gt;由变量 &lt;code class=&quot;highlighter-rouge&quot;&gt;ENV&lt;/code&gt; 定义。&lt;/p&gt;

&lt;h6 id=&quot;远程调用&quot;&gt;远程调用&lt;/h6&gt;

&lt;p&gt;以 rshd 调用时读取的文件：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.bashrc&lt;/code&gt;&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;【 不要使用 r 系列工具 】使用 rlogin, telnet, rsh 和 rcp 这类工具存在一定的危险。由于他们在网络上传输数据是 &lt;strong&gt;未经加密&lt;/strong&gt; 的，所以他们本质上是不安全的。如果你需要远程执行和文件传输之类的工具，推荐使用 SSH。&lt;/p&gt;

&lt;h6 id=&quot;uid-不等于-euid-时调用&quot;&gt;UID 不等于 EUID 时调用&lt;/h6&gt;

&lt;p&gt;这种情况不会读取任何启动脚本。&lt;/p&gt;

&lt;h5 id=&quot;交互式-shell&quot;&gt;交互式 shell&lt;/h5&gt;

&lt;p&gt;交互式 shell 通常可从终端读取用户的输入，也可以把输出写到终端：输入和输出都与终端相连。&lt;/p&gt;

&lt;p&gt;如果 bash 命令不带任何选项地启动，就会启动 Bash 的交互行为。&lt;/p&gt;

&lt;h6 id=&quot;判断方法&quot;&gt;判断方法&lt;/h6&gt;

&lt;p&gt;如何判断当前 shell 是不是交互式的：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$-&lt;/span&gt;
himBH
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;只要返回的结果中包含 &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt; 即代表是交互式的 shell。&lt;/p&gt;

&lt;p&gt;另外，非交互式 shell 不需要命令提示符，所以变量 &lt;code class=&quot;highlighter-rouge&quot;&gt;PS1&lt;/code&gt; 未设置。&lt;/p&gt;

&lt;h6 id=&quot;交互式-shell-的行为特征&quot;&gt;交互式 shell 的行为特征&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;bash 会读取启动脚本&lt;/li&gt;
  &lt;li&gt;默认启用作业控制&lt;/li&gt;
  &lt;li&gt;默认设置命令提示符。同时会启用 &lt;code class=&quot;highlighter-rouge&quot;&gt;PS1&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;PS2&lt;/code&gt; 变量，&lt;code class=&quot;highlighter-rouge&quot;&gt;PS2&lt;/code&gt; 为多行命令的提示符，当用户命令不完整时，回车后也会出现。&lt;/li&gt;
  &lt;li&gt;默认使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;readline&lt;/code&gt; 命令从命令行读取命令&lt;/li&gt;
  &lt;li&gt;读取命令时，bash 如果收到 EOF，它会先检查 &lt;code class=&quot;highlighter-rouge&quot;&gt;ignoreeof&lt;/code&gt; 选项的值，如果它没有设置才会退出&lt;/li&gt;
  &lt;li&gt;默认会启用命令历史和历史扩展，shell 退出时会把命令历史保存到 &lt;code class=&quot;highlighter-rouge&quot;&gt;HISTFILE&lt;/code&gt; 变量所代表的文件中，默认为 &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.bash_history&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;默认启用别名扩展&lt;/li&gt;
  &lt;li&gt;如果没有设置 trap，&lt;code class=&quot;highlighter-rouge&quot;&gt;SIGTERM&lt;/code&gt; 信号会被忽略&lt;/li&gt;
  &lt;li&gt;如果没有设置 trap，&lt;code class=&quot;highlighter-rouge&quot;&gt;SIGINT&lt;/code&gt;  信号会被捕捉并处理。&lt;code class=&quot;highlighter-rouge&quot;&gt;^C&lt;/code&gt; 会中断某些内建的命令，但不会导致交互 shell 的退出&lt;/li&gt;
  &lt;li&gt;如果启用了 &lt;code class=&quot;highlighter-rouge&quot;&gt;huponexit&lt;/code&gt; 选项，则退出 shell 时会向所有作业发送 &lt;code class=&quot;highlighter-rouge&quot;&gt;SIGHUP&lt;/code&gt; 信号&lt;/li&gt;
  &lt;li&gt;bash 读取到命令会立即执行&lt;/li&gt;
  &lt;li&gt;bash 会定期检查邮件&lt;/li&gt;
  &lt;li&gt;bash 可以配置成遇到未引用的变量就退出，该行为在交互模式下是禁用的&lt;/li&gt;
  &lt;li&gt;shell 内建命令遇到重定向错误时，不会导致 shell 的退出&lt;/li&gt;
  &lt;li&gt;特殊的内建命令在 POSIX 模式返回错误时，不会导致 shell 的退出&lt;/li&gt;
  &lt;li&gt;如果 &lt;code class=&quot;highlighter-rouge&quot;&gt;exec&lt;/code&gt; 执行失败，不会导致 shell 的退出&lt;/li&gt;
  &lt;li&gt;解析到语法错误，不会导致 shell 的退出&lt;/li&gt;
  &lt;li&gt;默认对内建命令 &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; 的参数开启简单的拼写检查&lt;/li&gt;
  &lt;li&gt;默认情况下，超过 &lt;code class=&quot;highlighter-rouge&quot;&gt;TMOUT&lt;/code&gt; 变量指定的时间，bash 会自动退出，即超时&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;条件表达式&quot;&gt;条件表达式&lt;/h5&gt;

&lt;p&gt;可以在 &lt;code class=&quot;highlighter-rouge&quot;&gt;[[ ]]&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;[ ]&lt;/code&gt; 中使用条件表达式。&lt;/p&gt;

&lt;p&gt;表达式可以是 &lt;strong&gt;一元&lt;/strong&gt; 或 &lt;strong&gt;二元&lt;/strong&gt; 的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;一元条件表达式&lt;/strong&gt; 经常用来检验文件的状态：&lt;/p&gt;

&lt;p&gt;只需要一个对象，如一个文件，就能执行操作。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;二元条件表达式&lt;/strong&gt; 需要两个对象来执行操作：&lt;/p&gt;

&lt;h5 id=&quot;shell-运算&quot;&gt;shell 运算&lt;/h5&gt;

&lt;p&gt;shell 可以对算术表达式求值，使用 shell 扩展或内建命令 &lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt; 来完成。&lt;/p&gt;

&lt;p&gt;赋值时需用等宽整数，不会进行溢出检查，除以 0 会被捕获，并标记为错误。&lt;/p&gt;

&lt;h5 id=&quot;别名&quot;&gt;别名&lt;/h5&gt;

&lt;p&gt;可以用一个简单的字符串来代替另一堆相对复杂的字符串，通过一张别名列表来管理，相关命令为 &lt;code class=&quot;highlighter-rouge&quot;&gt;alias&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;unalias&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;bash 需要把 &lt;strong&gt;一行命令读取完毕&lt;/strong&gt;，才会开始执行其中的命令。而别名的扩展是发生在 &lt;strong&gt;读取命令时&lt;/strong&gt;，而非执行命令时。因此，要想让别名生效，至少要从下一行起。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ls -l'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; l
bash: l: &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;not found...
&lt;span class=&quot;c&quot;&gt;# 别名未生效&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ls -l'&lt;/span&gt;
l
total 2
drwxrwxr-x. 5 neo neo  36 May 17 16:41 aa
drwxrwxr-x. 5 neo neo  36 May 17 16:41 bb
&lt;span class=&quot;c&quot;&gt;# 读取完一整行之后，别名生效&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;对于函数来说，因为函数相当于 &lt;strong&gt;一个&lt;/strong&gt; 复合的命令，因此同样地，需要等到整个函数的定义全部读取完毕，别名才被扩展。&lt;/p&gt;

&lt;h5 id=&quot;数组&quot;&gt;数组&lt;/h5&gt;

&lt;p&gt;bash 支持一维数组变量。&lt;/p&gt;

&lt;p&gt;任何变量都可以用在数组中。&lt;/p&gt;

&lt;p&gt;用 &lt;code class=&quot;highlighter-rouge&quot;&gt;delcare&lt;/code&gt; 内建命令来显示声明数组。&lt;/p&gt;

&lt;p&gt;数组没有大小的限制，成员无需索引，无需连续赋值。&lt;/p&gt;

&lt;h5 id=&quot;目录栈&quot;&gt;目录栈&lt;/h5&gt;

&lt;p&gt;目录栈用于保存最近访问的目录的列表。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pushd dir1&lt;/code&gt;  内建命令用于把指定目录加入列表&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;popd dir2&lt;/code&gt;  内建命令用于把指定目录移出列表&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dirs&lt;/code&gt;  命令可查看列表内容&lt;/p&gt;

&lt;h5 id=&quot;命令提示符&quot;&gt;命令提示符&lt;/h5&gt;

&lt;p&gt;交互式 bash 使用提示符，可以自定义。&lt;/p&gt;

&lt;h5 id=&quot;bash-受限模式&quot;&gt;bash 受限模式&lt;/h5&gt;

&lt;p&gt;如果调用 &lt;code class=&quot;highlighter-rouge&quot;&gt;rbash&lt;/code&gt;，或调用 bash 时使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;--restricted&lt;/code&gt; 选项，会发生以下事情：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;内建命令 &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; 被禁用&lt;/li&gt;
  &lt;li&gt;无法修改 &lt;code class=&quot;highlighter-rouge&quot;&gt;SHELL&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;ENV&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;BASH_ENV&lt;/code&gt; 这些变量的值&lt;/li&gt;
  &lt;li&gt;命令中禁止包含斜线&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;source&lt;/code&gt; 命令（&lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt;）后面的文件名禁止包含斜线&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;hash -p&lt;/code&gt;  内建命令不接受斜线&lt;/li&gt;
  &lt;li&gt;禁止在启动时导入函数&lt;/li&gt;
  &lt;li&gt;启动时会忽略 &lt;code class=&quot;highlighter-rouge&quot;&gt;SHELLOPTS&lt;/code&gt; 变量&lt;/li&gt;
  &lt;li&gt;禁止使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;|&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&amp;lt;&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&amp;amp;&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&amp;gt;&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&amp;gt;&lt;/code&gt; 进行输出重定向&lt;/li&gt;
  &lt;li&gt;禁用内建命令 &lt;code class=&quot;highlighter-rouge&quot;&gt;exec&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;内建命令 &lt;code class=&quot;highlighter-rouge&quot;&gt;enalbe&lt;/code&gt; 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;-f&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;-d&lt;/code&gt; 选项被禁用&lt;/li&gt;
  &lt;li&gt;受限模式无法关闭&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;13-命令的执行&quot;&gt;1.3 命令的执行&lt;/h3&gt;

&lt;p&gt;Bash 会判断要执行的程序的类型。&lt;/p&gt;

&lt;p&gt;普通程序为编译好的系统命令，运行时会产生新的进程，因为 bash 生成了一个自己的副本。该子进程拥有相同的环境，只不过 PID 不同。该过程称为 forking。&lt;/p&gt;

&lt;p&gt;forking 之后，子进程的地址空间被新的数据覆盖，是通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;exec&lt;/code&gt; 系统调用实现的。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fork-and-exec&lt;/code&gt; 机制把旧命令转化成新命令，而新程序的环境仍然与原来的相同，包括输入输出设备的配置、环境变量和优先级。这种机制用来创建所有的进程。&lt;/p&gt;

&lt;h4 id=&quot;shell-内建命令&quot;&gt;shell 内建命令&lt;/h4&gt;

&lt;p&gt;内建命令包含于 shell 自身。如果内建程序的名称在一个简单命令中处于最前面，shell 会直接执行该命令，无需生成新的进程。&lt;/p&gt;

&lt;p&gt;bash 支持三种内建命令：&lt;/p&gt;

&lt;h5 id=&quot;sh-内建命令&quot;&gt;sh 内建命令&lt;/h5&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;break&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;continue&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;eval&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;exec&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;exit&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;export&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;getopts&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;hash&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pwd&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;readonly&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;set&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;shift&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;times&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;trap&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;umask&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;unset&lt;/code&gt;&lt;/p&gt;

&lt;h5 id=&quot;bash-内建命令&quot;&gt;bash 内建命令&lt;/h5&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;alias&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bind&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;builtin&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;command&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;declare&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;echo&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;enable&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;help&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;local&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;logout&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;printf&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;read&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;shopt&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;typeset&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ulimit&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;unalias&lt;/code&gt;&lt;/p&gt;

&lt;h5 id=&quot;特殊内建命令&quot;&gt;特殊内建命令&lt;/h5&gt;

&lt;p&gt;bash 以 POSIX 模式运行时，特殊内建命令主要表现为以下三方面的不同：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;命令查找期间，特殊内建命令会先于 shell 函数被找到&lt;/li&gt;
  &lt;li&gt;如果特殊内建命令返回一个错误状态码，非交互式 shell 会退出&lt;/li&gt;
  &lt;li&gt;命令完成后，在命令之前执行的赋值语句在 shell 环境中仍然有效&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;特殊内建命令：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;break&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;continue&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;eval&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;exec&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;exit&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;export&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;readonly&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;set&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;shift&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;trap&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;unset&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;从脚本中执行程序&quot;&gt;从脚本中执行程序&lt;/h4&gt;

&lt;p&gt;如果被执行的程序是一个脚本，bash 会用 fork 创建一个新的 bash 进程，该子 shell 会逐行读取脚本，加以解释、执行，和直接从键盘上输入命令的效果是一样的。&lt;/p&gt;

&lt;p&gt;在子 shell 逐行处理脚本时，父进程会等着它，处理完脚本所有行，子 shell 就终止了，父 shell 苏醒，并显示提示符。&lt;/p&gt;

&lt;h3 id=&quot;14-shell-的标准组件&quot;&gt;1.4 Shell 的标准组件&lt;/h3&gt;

&lt;p&gt;Bash 是 GNU shell，兼容 sh，并从其他 shell 中吸取了许多有用的功能。&lt;/p&gt;

&lt;p&gt;shell 启动时会读取其配置文件。最重要的几个：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/profile&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.bash_profile&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.bashrc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Bash 在交互模式下的行为有所不同, 具有 POSIX 兼容模式和受限模式。&lt;/p&gt;

&lt;p&gt;shell 命令分为：shell 的函数、shell 内建命令以及系统中某目录中的命令。&lt;/p&gt;

&lt;p&gt;Shell 脚本由这些命令组成，并按 shell 的句法规定排列。&lt;/p&gt;

&lt;p&gt;脚本是按行读取和执行的，应该有一个逻辑结构。&lt;/p&gt;

&lt;h4 id=&quot;shell-句法&quot;&gt;Shell 句法&lt;/h4&gt;

&lt;p&gt;如果输入没有被注释掉，shell 会把读取的输入 &lt;strong&gt;分割&lt;/strong&gt; 成文字和操作符，用 &lt;strong&gt;引用规则&lt;/strong&gt; 来定义每个字符的含义。这些文字和操作符于是被 &lt;strong&gt;转化为命令&lt;/strong&gt; 和其它成分，命令会返回一个退出状态。&lt;/p&gt;

&lt;p&gt;只有在 shell 解析完输入之后，该 &lt;code class=&quot;highlighter-rouge&quot;&gt;fork-and-exec&lt;/code&gt; 机制才会起作用。解析过程如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;shell 从文件、字符串或终端 &lt;strong&gt;读取输入&lt;/strong&gt;。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;输入按引用规则被 &lt;strong&gt;拆分成&lt;/strong&gt; 文字和操作符，这些 &lt;strong&gt;记号&lt;/strong&gt;（token）用元字符（metacharacter）来分隔，同时进行了别名扩展。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;shell 把这些记号 &lt;strong&gt;解析成&lt;/strong&gt; 简单或复合的 &lt;strong&gt;命令&lt;/strong&gt;。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Bash 进行多种 shell &lt;strong&gt;扩展&lt;/strong&gt;，把扩展后的记号转换成文件名列表、命令和参数。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;需要时进行 &lt;strong&gt;重定向&lt;/strong&gt;，把重定向操作符和被重定向的对象从参数列表中移除。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;执行命令。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;需要时，shell 会等待命令的完成，并收集其退出状态。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;shell-命令&quot;&gt;shell 命令&lt;/h4&gt;

&lt;p&gt;简单的 shell 命令由 &lt;strong&gt;命令&lt;/strong&gt; 和 &lt;strong&gt;参数&lt;/strong&gt; 组成，由 &lt;strong&gt;空格&lt;/strong&gt; 分隔。&lt;/p&gt;

&lt;p&gt;再复杂的命令也是由多个简单的命令以某种方式组合在一起的，如管道、循环、条件结构等。&lt;/p&gt;

&lt;h4 id=&quot;shell-函数&quot;&gt;shell 函数&lt;/h4&gt;

&lt;p&gt;使用 shell 函数，可以把多个命令组合在一起，便于稍后用一个名字来执行。函数执行起来就像一个普通的命令，如果把函数名作为命令来运行，与该函数名关联的命令列表就会被执行。&lt;/p&gt;

&lt;p&gt;shell 函数是在当前 shell 执行的，&lt;strong&gt;不会产生新进程&lt;/strong&gt;。&lt;/p&gt;

&lt;h4 id=&quot;shell-参数&quot;&gt;shell 参数&lt;/h4&gt;

&lt;p&gt;参数是可以保存值的实体。它可以是名字、数字或特殊值。&lt;/p&gt;

&lt;p&gt;对于 shell 来说，变量是个参数，用于保存名字。一个变量可以有值，以及零或多个属性。变量可通过内建命令 &lt;code class=&quot;highlighter-rouge&quot;&gt;declare&lt;/code&gt; 创建。&lt;/p&gt;

&lt;p&gt;如果没有给变量赋值，会给变量分配一个 &lt;strong&gt;空字符串&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;变量只能通过内建命令 &lt;code class=&quot;highlighter-rouge&quot;&gt;unset&lt;/code&gt; 来删除。&lt;/p&gt;

&lt;h4 id=&quot;shell-扩展&quot;&gt;shell 扩展&lt;/h4&gt;

&lt;p&gt;每个命令行被分割成记号以后，会进行 shell 扩展：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;括号扩展&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;~&lt;/code&gt; 扩展&lt;/li&gt;
  &lt;li&gt;参数和变量扩展&lt;/li&gt;
  &lt;li&gt;命令替换&lt;/li&gt;
  &lt;li&gt;算术扩展&lt;/li&gt;
  &lt;li&gt;单词分割&lt;/li&gt;
  &lt;li&gt;文件名扩展&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;重定向&quot;&gt;重定向&lt;/h4&gt;

&lt;p&gt;在执行命令之前，借助一个特殊符号，其输入和输出可以被重定向。&lt;/p&gt;

&lt;p&gt;重定向也可用于在当前执行环境中打开或关闭文件。&lt;/p&gt;

&lt;h4 id=&quot;命令的执行&quot;&gt;命令的执行&lt;/h4&gt;

&lt;p&gt;执行命令时，解析器标记为 &lt;strong&gt;变量赋值&lt;/strong&gt;（命令名前面）的单词和 &lt;strong&gt;重定向&lt;/strong&gt; 将被 &lt;strong&gt;保存&lt;/strong&gt; 以供后面引用，不属于变量赋值或重定向功能的词将被 &lt;strong&gt;扩展&lt;/strong&gt;；扩展后的第一个剩余单词被视为 &lt;strong&gt;命令&lt;/strong&gt; 的名称，其余的是该命令的 &lt;strong&gt;参数&lt;/strong&gt;。然后执行 &lt;strong&gt;重定向&lt;/strong&gt; 功能, 将分配给变量的字符串扩展开。如果没有找到命令名，变量会在当前 shell 环境继续生效。&lt;/p&gt;

&lt;p&gt;shell 众多任务中最重要的，就是查找命令。以下为查找的流程：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;检查命令中是否包含斜线。如果没有，先从函数列表里面找。&lt;/li&gt;
  &lt;li&gt;如果命令不是函数，再从内建命令中找。&lt;/li&gt;
  &lt;li&gt;如果都不是，从 &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt; 变量值中定义的各个路径中找。bash 使用哈希表（内存中的数据存储区块）来保存可执行文件的完整路径，可以避免粗放的 &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt; 查找。&lt;/li&gt;
  &lt;li&gt;如是还没找到，bash 打印错误消息，返回退出状态码 127。&lt;/li&gt;
  &lt;li&gt;如果找到了，或如果命令包含斜线，shell 会在单独的执行环境中执行该命令。&lt;/li&gt;
  &lt;li&gt;如果由于文件非可执行而执行失败，且文件不是目录，则假定其是 shell 脚本。&lt;/li&gt;
  &lt;li&gt;如果命令没有异步地启动，shell 会等待命令执行完毕，然后收集其退出状态。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;shell-脚本&quot;&gt;shell 脚本&lt;/h4&gt;

&lt;p&gt;调用 bash 时，如果脚本被用作第一个非选项参数（不带 &lt;code class=&quot;highlighter-rouge&quot;&gt;-c&lt;/code&gt; 或者 &lt;code class=&quot;highlighter-rouge&quot;&gt;-s&lt;/code&gt;，这两个参数会创建非交互 shell），该 shell 首先会查找脚本文件当前目录，如果没找到，则对环境变量 &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt; 进行查找。&lt;/p&gt;

&lt;h3 id=&quot;15-开发好脚本&quot;&gt;1.5 开发好脚本&lt;/h3&gt;

&lt;h4 id=&quot;好脚本的特质&quot;&gt;好脚本的特质&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;运行无错误&lt;/li&gt;
  &lt;li&gt;能完成预期的任务&lt;/li&gt;
  &lt;li&gt;程序的逻辑清晰、明确&lt;/li&gt;
  &lt;li&gt;不做不必要的工作&lt;/li&gt;
  &lt;li&gt;可被重用&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;脚本的结构&quot;&gt;脚本的结构&lt;/h4&gt;

&lt;p&gt;脚本的结构非常灵活。即使在 bash 中有很大的自由度可以发挥，仍然要确保正确的逻辑、流控制和高效，以便用户可以轻松正确地执行脚本。&lt;/p&gt;

&lt;p&gt;开始着手编写脚本时，问自己几个问题：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;我需要从用户或用户环境中获取任何信息吗？&lt;/li&gt;
  &lt;li&gt;怎么保存这些信息？&lt;/li&gt;
  &lt;li&gt;要创建文件吗？保存在哪？权限？所有人？&lt;/li&gt;
  &lt;li&gt;要用什么命令？如果脚本在其它系统运行，上面有这些命令的所需版本吗？&lt;/li&gt;
  &lt;li&gt;用户要接收通知消息吗？什么时候发送？为什么发送？&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;术语&quot;&gt;术语&lt;/h4&gt;

&lt;p&gt;常用编程术语：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;术语&lt;/th&gt;
      &lt;th&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;命令控制&lt;/td&gt;
      &lt;td&gt;测试命令的退出状态，以判断这部分代码是否应该执行&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;条件分支&lt;/td&gt;
      &lt;td&gt;代码中的逻辑点，由条件决定下一步该发生什么&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;逻辑流程&lt;/td&gt;
      &lt;td&gt;程序的总体设计。确定任务的逻辑顺序，以确保得到成功且可控的结果&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;循环&lt;/td&gt;
      &lt;td&gt;这部分代码会被执行 0 或多次&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;用户输入&lt;/td&gt;
      &lt;td&gt;程序运行时，由外部源提供的信息，需要时可保存或回调&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;关于顺序与逻辑&quot;&gt;关于顺序与逻辑&lt;/h4&gt;

&lt;p&gt;为了加速开发的进程，程序的 &lt;strong&gt;逻辑顺序&lt;/strong&gt; 应提前考虑充分。这是开发脚本的第一步。&lt;/p&gt;

&lt;p&gt;有多种方法可供使用，最常用的就是使用列表。逐项列出程序中涉及的 &lt;strong&gt;任务列表&lt;/strong&gt; 可帮助描述每段流程，可以用项目编号来引用单个的任务。&lt;/p&gt;

&lt;p&gt;用口语化的语言来 &lt;strong&gt;标记&lt;/strong&gt; 程序中的各项任务，有助于建立便于理解的 &lt;strong&gt;程序框架&lt;/strong&gt;。之后，就可以用 shell 的语言和结构来替换。&lt;/p&gt;

&lt;p&gt;下面的例子示范了这种逻辑流程的设计。描述了日志文件的轮替。&lt;/p&gt;

&lt;p&gt;设计一个重复的循环，用轮替的日志文件数量来控制：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;你想轮替日志吗？
 a. 如果是：
     i. 输入要轮替日志所在的目录
     ii. 输入日志文件基准文件名
     iii. 输入日志需要保存的天数
     iv. 修改用户的 &lt;code class=&quot;highlighter-rouge&quot;&gt;crontab&lt;/code&gt; 文件
 b. 如果不是，跳到第 3 步&lt;/li&gt;
  &lt;li&gt;你要轮替另一组日志吗？
 a. 如果是：重复第 1 步
 b. 如果不是：跳到第 3 步&lt;/li&gt;
  &lt;li&gt;退出&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;用户要提供信息，才能让程序做点什么。必须要获取用户的输入并且保存下来。有必要提醒用户他的 &lt;code class=&quot;highlighter-rouge&quot;&gt;crontab&lt;/code&gt; 文件将会被修改。&lt;/p&gt;

&lt;h2 id=&quot;2-脚本的编写与调试&quot;&gt;2. 脚本的编写与调试&lt;/h2&gt;

&lt;h3 id=&quot;21-创建脚本并运行&quot;&gt;2.1 创建脚本并运行&lt;/h3&gt;

&lt;h4 id=&quot;编写与命名&quot;&gt;编写与命名&lt;/h4&gt;

&lt;p&gt;shell 脚本是一个重复使用的命令序列，通常在命令行中输入脚本的名称来执行。或者，也可以借助 cron 让脚本实现自动化的任务。脚本的另一个用途是在系统启动和关机过程中，在初始化脚本中可以定义守护进程和服务的操作。&lt;/p&gt;

&lt;p&gt;要创建 shell 脚本，请在编辑器中打开一个新的空文件，放里面放几个命令，然后再起个一看就明白的名字，但不要与现有命令名冲突。为了方便，脚本文件通常加后缀 &lt;code class=&quot;highlighter-rouge&quot;&gt;.sh&lt;/code&gt;。即使这样，也有可能同一系统中不同位置存在同名的脚本，可用以下命令帮助确认：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;which &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; script_name
whereis script_name
locate script_name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;执行脚本&quot;&gt;执行脚本&lt;/h4&gt;

&lt;p&gt;脚本的所有人要想运行，必须给脚本赋予可执行权限。&lt;/p&gt;

&lt;p&gt;一般情况下，用 &lt;code class=&quot;highlighter-rouge&quot;&gt;./script_name&lt;/code&gt; 的方式来运行脚本。如果当前路径被加入了 &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt; 变量，则可以直接用脚本名 &lt;code class=&quot;highlighter-rouge&quot;&gt;script_name&lt;/code&gt; 来运行。&lt;/p&gt;

&lt;p&gt;可以把脚本做为参数来运行 &lt;code class=&quot;highlighter-rouge&quot;&gt;bash&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bash &lt;span class=&quot;nt&quot;&gt;-x&lt;/span&gt; script_name.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;但通常我们只在需要获取特殊行为时才会执行此操作，例如检查脚本是否可以与另一个 shell 一起工作，或打印用于调试的追踪。指定的 shell 将启动一个当前 shell 的子 shell 来执行脚本。若想让脚本以特定选项启动，或想在特定条件下来启动时，可以用这种方法。&lt;/p&gt;

&lt;p&gt;如果不希望启动一个子 shell 执行脚本，可以用 &lt;code class=&quot;highlighter-rouge&quot;&gt;source&lt;/code&gt; 来运行：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;source &lt;/span&gt;script_name.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;source&lt;/code&gt; 是内建命令，与 &lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt; 的作用相同。&lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt; 最早是 sh 命令。此时脚本不需要可执行权限，命令是在当前 shell 执行的，因此，由此对环境变量造成的任何改变，随后都可以看到。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;source &lt;/span&gt;script1.sh
&lt;span class=&quot;nt&quot;&gt;--output&lt;/span&gt; ommited--

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$VALUE&lt;/span&gt;
9
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;22-脚本基础&quot;&gt;2.2 脚本基础&lt;/h3&gt;

&lt;h4 id=&quot;221-用哪个-shell-来运行脚本&quot;&gt;2.2.1 用哪个 shell 来运行脚本&lt;/h4&gt;

&lt;p&gt;在子 shell 运行脚本时，需要指明用哪个 shell 来运行。你用来编写脚本的 shell 类型有可能不是当前系统的默认 shell，因此如果用错误的 shell 执行时，你输入的命令可能会造成错误。&lt;/p&gt;

&lt;p&gt;脚本的第一行确定要启动的 shell。第一行的前两个字符应该是 &lt;code class=&quot;highlighter-rouge&quot;&gt;#!&lt;/code&gt;，然后就是用来解释后面命令的 shell 的路径。空白行也被视为行，所以不要用空行启动脚本。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;&lt;/code&gt;  将会使用在 &lt;code class=&quot;highlighter-rouge&quot;&gt;/bin&lt;/code&gt; 目录中找到的 bash 可执行文件来执行脚本。&lt;/p&gt;

&lt;h4 id=&quot;222-添加注释&quot;&gt;2.2.2 添加注释&lt;/h4&gt;

&lt;p&gt;应该清楚一点，你不会是唯一一个会阅读你写的代码的人，许多用户和系统管理员都会运行别人写的代码。清楚明白的注释会帮助别人了解你是如何编写脚本的。&lt;/p&gt;

&lt;p&gt;注释也会让自己更轻松一些。比如说，为了实现一个特定的结果，你要在脚本中使用某些命令，因此不得不阅读大量的帮助文档。过了几周或几个月，你可能就不记得这些命令是如何工作的了，除非加了充足的注释。&lt;/p&gt;

&lt;p&gt;在一个正式的脚本中，第一行通常注释的内容是该脚本的简介，会发生什么。之后，根据需要，为每一大块命令添加必要的注释。&lt;/p&gt;

&lt;h3 id=&quot;23-调试-bash-脚本&quot;&gt;2.3 调试 bash 脚本&lt;/h3&gt;

&lt;h4 id=&quot;231-调试整个脚本&quot;&gt;2.3.1 调试整个脚本&lt;/h4&gt;

&lt;p&gt;如果脚本没有按预期的工作，就要判断是什么导致了脚本的失败。&lt;/p&gt;

&lt;p&gt;bash 提供了调试功能，最常用的是用 &lt;code class=&quot;highlighter-rouge&quot;&gt;-x&lt;/code&gt; 选项来启动子 shell，会以调试模式来运行整个脚本。在每条命令被扩展后、被执行之前，对该命令和参数的追踪都会打印到标准输出。&lt;/p&gt;

&lt;h4 id=&quot;232-调试部分脚本&quot;&gt;2.3.2 调试部分脚本&lt;/h4&gt;

&lt;p&gt;要想对脚本的局部代码进行调试，可以使用内建命令 &lt;code class=&quot;highlighter-rouge&quot;&gt;set&lt;/code&gt;，以普通模式运行，来查看局部代码的调试信息。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;简写&lt;/th&gt;
      &lt;th&gt;长形&lt;/th&gt;
      &lt;th&gt;作用&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;set -f&lt;/td&gt;
      &lt;td&gt;set -o noglob&lt;/td&gt;
      &lt;td&gt;禁止使用元字符（通配）来扩展文件名&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;set -v&lt;/td&gt;
      &lt;td&gt;set -o verbose&lt;/td&gt;
      &lt;td&gt;在 shell 读取输入时，同时显示出来&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;set -x&lt;/td&gt;
      &lt;td&gt;set -o xtrace&lt;/td&gt;
      &lt;td&gt;执行命令之前，显示命令的追踪&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p class=&quot;notice--primary&quot;&gt;用减号 &lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt; 来激活调试，用加号 &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; 停止调试。&lt;/p&gt;

&lt;h5 id=&quot;用-set-包围局部代码&quot;&gt;用 &lt;code class=&quot;highlighter-rouge&quot;&gt;set&lt;/code&gt; 包围局部代码&lt;/h5&gt;

&lt;p&gt;例如，我们不确定某个脚本文件中 &lt;code class=&quot;highlighter-rouge&quot;&gt;w&lt;/code&gt; 命令是如何运行的，则可以在代码中把 &lt;code class=&quot;highlighter-rouge&quot;&gt;w&lt;/code&gt; 命令用 &lt;code class=&quot;highlighter-rouge&quot;&gt;set&lt;/code&gt; 包围起来：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-x&lt;/span&gt;		&lt;span class=&quot;c&quot;&gt;# 从此处激活调试&lt;/span&gt;
w
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; +x		&lt;span class=&quot;c&quot;&gt;# 从此处停止调试&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;输出将是这样的：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;script1.sh
The script starts now.
Hi, willy!

I will now fetch you a list of connected &lt;span class=&quot;nb&quot;&gt;users&lt;/span&gt;:

+ w
  5:00pm  up 18 days,  7:00,  4 &lt;span class=&quot;nb&quot;&gt;users&lt;/span&gt;,  load average: 0.79, 0.39, 0.33
USER     TTY      FROM              LOGIN@   IDLE   JCPU   PCPU  WHAT
root     tty2     -                Sat 2pm  5:47m  0.24s  0.05s  &lt;span class=&quot;nt&quot;&gt;-bash&lt;/span&gt;
willy    :0       -                Sat 2pm   ?     0.00s   ?     -
+ &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; +x
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;你可以在脚本中随意地启用、停止调用。&lt;/p&gt;

&lt;h5 id=&quot;在命令行中运行-set&quot;&gt;在命令行中运行 &lt;code class=&quot;highlighter-rouge&quot;&gt;set&lt;/code&gt;&lt;/h5&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls
ls
&lt;/span&gt;aaaaaaaaa.sh   bbb.sh

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; +v
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; +v

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
aaaaaaaaa.sh   bbb.sh

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt;: &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;: No such file or directory

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;touch&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;   commented-scripts.sh    script1.sh

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls
&lt;/span&gt;commented-scripts.sh    script1.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;在脚本开头添加选项&quot;&gt;在脚本开头添加选项&lt;/h5&gt;

&lt;p&gt;可以把要使用的选项直接添加在 &lt;code class=&quot;highlighter-rouge&quot;&gt;#!&lt;/code&gt; 行后面：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash -xv&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;找到问题代码之后&quot;&gt;找到问题代码之后&lt;/h5&gt;

&lt;p&gt;一旦找到了脚本中出问题的部分代码，可以在每条不太确定的命令之前用 &lt;code class=&quot;highlighter-rouge&quot;&gt;echo&lt;/code&gt; 加上调试声明，这样会看的更清楚，哪儿不正常，为什么了。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;debug message: now attempting to start w command&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; w
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在更高级的脚本中，可以插入 &lt;code class=&quot;highlighter-rouge&quot;&gt;echo&lt;/code&gt; 来显示不同阶段同一变量的内容，以便检测出错误：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Variable VARNAME is now set to &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$VARNAME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;3-bash-环境&quot;&gt;3. bash 环境&lt;/h2&gt;

&lt;h3 id=&quot;31-shell-初始化文件&quot;&gt;3.1 shell 初始化文件&lt;/h3&gt;

&lt;h4 id=&quot;311-系统范围的配置文件&quot;&gt;3.1.1 系统范围的配置文件&lt;/h4&gt;

&lt;h5 id=&quot;etcprofile&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/profile&lt;/code&gt;&lt;/h5&gt;

&lt;p&gt;如果 bash 是使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;--login&lt;/code&gt; 选项被调用的，或是做为 &lt;code class=&quot;highlighter-rouge&quot;&gt;sh&lt;/code&gt; 被调用的，它会读取  &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/profile&lt;/code&gt; 脚本，其中通常会设置变量 &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;USER&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;MAIL&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;HOSTNAME&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;HISTSIZE&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;在某些系统中，&lt;code class=&quot;highlighter-rouge&quot;&gt;umask&lt;/code&gt; 的值是在 &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/profile&lt;/code&gt; 中设定的，其它系统中是在该文件中保有指向其它配置文件的指针，如：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/inputrc&lt;/code&gt;，系统范围的 &lt;code class=&quot;highlighter-rouge&quot;&gt;Readline&lt;/code&gt; 初始化文件，用于设定命令行提示音&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/profile.d&lt;/code&gt;  目录，其中的文件用于配置特定程序系统的范围的行为&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果希望设定的用户环境能 &lt;strong&gt;影响到所有用户&lt;/strong&gt;，就应该在 &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/profile&lt;/code&gt; 中设定。&lt;/p&gt;

&lt;p&gt;该文件会设定一些基础的 shell &lt;strong&gt;环境变量&lt;/strong&gt;，以及用户在网页浏览器中运行 Java 或 Java 程序时所需要的一些变量。&lt;/p&gt;

&lt;h5 id=&quot;etcbashrc&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/bashrc&lt;/code&gt;&lt;/h5&gt;

&lt;p&gt;如果系统支持多种 shell，建议使用该文件来进行针对 bash 的配置，因为 &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/profile&lt;/code&gt; 文件也会被其他 shell 所读取，比如 Bourne shell。如果其他 shell 不理解 bash 的语法就会产生错误，所以建议把针对不同类型 shell 的配置文件分割开。这种情况下，用户的 &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.bashrc&lt;/code&gt; 有可能指向 &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/bashrc&lt;/code&gt;，目的是为了在登陆 shell 初始化期间将 &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/bashrc&lt;/code&gt; 脚本包含进来。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/profile&lt;/code&gt; 仅仅维护 shell 的环境变量和程序的自动启动设置，而 &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/bashrc&lt;/code&gt; 包含了系统范围的对 &lt;strong&gt;shell 函数&lt;/strong&gt; 和 &lt;strong&gt;别名&lt;/strong&gt; 的定义。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/bashrc&lt;/code&gt;  可能会在 &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/profile&lt;/code&gt; 或单用户初始文件中 &lt;strong&gt;被引用&lt;/strong&gt;。&lt;/p&gt;

&lt;h4 id=&quot;312-单用户配置文件&quot;&gt;3.1.2 单用户配置文件&lt;/h4&gt;

&lt;p&gt;这些单用户配置文件有可能默认不存在，需要时可以创建。&lt;/p&gt;

&lt;h5 id=&quot;bash_profile&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.bash_profile&lt;/code&gt;&lt;/h5&gt;

&lt;p&gt;要想单独为特定用户配置 shell 环境，最好就用 &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.bash_profile&lt;/code&gt; 文件 。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; ~/.bashrc
&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; ~/.bash_login
......
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;bash_login&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.bash_login&lt;/code&gt;&lt;/h5&gt;

&lt;p&gt;通常只有在需要登陆系统的时候才会执行该文件。如果 shell 找不到 &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.bash_profile&lt;/code&gt;，就会读取该文件。&lt;/p&gt;

&lt;h5 id=&quot;profile&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.profile&lt;/code&gt;&lt;/h5&gt;

&lt;p&gt;如果找不到 &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.bash_profile&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.bash_login&lt;/code&gt;，就会读取 &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.profile&lt;/code&gt;。该文件可以保存相同的配置，也可以被其它 shell 访问。&lt;/p&gt;

&lt;h5 id=&quot;bashrc&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.bashrc&lt;/code&gt;&lt;/h5&gt;

&lt;p&gt;现在经常会用到非登陆 shell，比如在图形界面里，用 X 终端登陆时。打开这个窗口时，用户无需输入用户名和密码，也不会进行认证。&lt;/p&gt;

&lt;h5 id=&quot;bash_logout&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.bash_logout&lt;/code&gt;&lt;/h5&gt;

&lt;p&gt;退出时会执行该文件。&lt;/p&gt;

&lt;h4 id=&quot;313-修改-shell-配置文件&quot;&gt;3.1.3 修改 shell 配置文件&lt;/h4&gt;

&lt;p&gt;如果以上文件发生了修改，用户要么需要重新连接到系统，要么通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;source script_name&lt;/code&gt; 来使其生效。对文件的修改会应用到当前 shell 会话。&lt;/p&gt;

&lt;p&gt;许多 shell 脚本会在私有环境下执行：变量只有从父进程导出，才会被子进程所继承。因此，&lt;code class=&quot;highlighter-rouge&quot;&gt;source&lt;/code&gt; 一个脚本不仅会应用其对环境的修改，也会应用其对变量的设置。&lt;/p&gt;

&lt;p&gt;如果需要的话，为了便于了解哪些设置来自于哪个文件，可以在配置文件中用 &lt;code class=&quot;highlighter-rouge&quot;&gt;echo&lt;/code&gt; 添加一些声明文字，如：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Now executing .bash_profile..&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;或：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Now setting PS1 in .bashrc:&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PS1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;[some value]&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;PS1 is now set to &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PS1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样，当某个配置文件被应用时，你随时都会了解到它做了些什么。&lt;/p&gt;

&lt;h3 id=&quot;32-变量&quot;&gt;3.2 变量&lt;/h3&gt;

&lt;h4 id=&quot;321-变量的种类&quot;&gt;3.2.1 变量的种类&lt;/h4&gt;

&lt;p&gt;按照习惯，shell 变量通常使用大写字母来表示。bash 会保留变量的列表，其中有两类变量：&lt;/p&gt;

&lt;h5 id=&quot;全局变量&quot;&gt;全局变量&lt;/h5&gt;

&lt;p&gt;全局变量或环境变量在所有 shell 中可见。可以用 &lt;code class=&quot;highlighter-rouge&quot;&gt;env&lt;/code&gt; 或 &lt;code class=&quot;highlighter-rouge&quot;&gt;printenv&lt;/code&gt; 命令来查看环境变量。&lt;/p&gt;

&lt;h5 id=&quot;局部变量&quot;&gt;局部变量&lt;/h5&gt;

&lt;p&gt;局部变量只在当前 shell 可见。使用内建命令 &lt;code class=&quot;highlighter-rouge&quot;&gt;set&lt;/code&gt; 不带选项运行，可以查看所有变量和函数的列表。输出会根据当前语系进行排序，以可重用的格式来显示。&lt;/p&gt;

&lt;h5 id=&quot;按变量内容区分&quot;&gt;按变量内容区分&lt;/h5&gt;

&lt;p&gt;如果按变量内容来区分变量：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;字符变量&lt;/li&gt;
  &lt;li&gt;整数变量&lt;/li&gt;
  &lt;li&gt;常量&lt;/li&gt;
  &lt;li&gt;数组变量&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;322-创建变量&quot;&gt;3.2.2 创建变量&lt;/h4&gt;

&lt;p&gt;变量是区分大小写的，默认都用大写。有时候习惯性用小写字母来命名局部变量。然而，你可以随意使用大小写来命名变量。变量名可以包含数字，但不能在首位。如 &lt;code class=&quot;highlighter-rouge&quot;&gt;number1&lt;/code&gt; 是合法的名字，但 &lt;code class=&quot;highlighter-rouge&quot;&gt;1number&lt;/code&gt; 就不是。&lt;/p&gt;

&lt;p&gt;要在 shell 中设置一个变量，使用如下格式：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;VARNAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;value&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;等号两边与变量和值之间都不能有空格，否则会出错。为变量赋值时，建议养成 &lt;strong&gt;引用&lt;/strong&gt; 内容字符串的好习惯。这会减小出错的机率。&lt;/p&gt;

&lt;p&gt;用 &lt;code class=&quot;highlighter-rouge&quot;&gt;unset&lt;/code&gt; 删除变量之后，该变量就不再可用。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;unset &lt;/span&gt;MYVAR1
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$MYVAR1&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;323-导出变量&quot;&gt;3.2.3 导出变量&lt;/h4&gt;

&lt;p&gt;创建变量之后只是在当前 shell 可见，是局部变量，当前 shell 的子进程看不到。要想把变量传递给子 shell，需要使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;export&lt;/code&gt; 命令来将其导出，被导出之后，变量就会当作环境变量来看待了。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;VARNAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;value&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;子 shell 可以修改其继承的变量，但所作的修改不会影响父进程。&lt;/p&gt;

&lt;h4 id=&quot;324-保留变量&quot;&gt;3.2.4 保留变量&lt;/h4&gt;

&lt;h5 id=&quot;bourne-shell-的保留变量&quot;&gt;Bourne shell 的保留变量&lt;/h5&gt;

&lt;p&gt;bash 有一些变量是与 Bourne shell 相同的，某些情况下，bash 会给这些变量赋予默认值。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;变量&lt;/th&gt;
      &lt;th&gt;用途&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;CDPATH&lt;/td&gt;
      &lt;td&gt;用冒号分隔的目录列表，用于为 &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; 查找路径&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;HOME&lt;/td&gt;
      &lt;td&gt;当前用户的家目录，&lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; 的默认参数，该变量的值也用于 &lt;code class=&quot;highlighter-rouge&quot;&gt;~&lt;/code&gt; 扩展&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;IFS&lt;/td&gt;
      &lt;td&gt;一个字符列表，这些字符用于分隔字段，在扩展中用于分割单词&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;MAIL&lt;/td&gt;
      &lt;td&gt;如果该变量用作一个文件名的参数，而且 &lt;code class=&quot;highlighter-rouge&quot;&gt;MAILPATH&lt;/code&gt; 变量没有设置，bash 会检查该文件，如果其中有新的邮件就提醒用户&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;MAILPATH&lt;/td&gt;
      &lt;td&gt;用冒号分隔的文件列表，shell 会定期检查新邮件&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;OPTARG&lt;/td&gt;
      &lt;td&gt;由 &lt;code class=&quot;highlighter-rouge&quot;&gt;getopts&lt;/code&gt; 命令处理的、最近的选项参数的值&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;OPTIND&lt;/td&gt;
      &lt;td&gt;由 &lt;code class=&quot;highlighter-rouge&quot;&gt;getopts&lt;/code&gt; 命令处理的、最近的选项参数的索引号&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;PATH&lt;/td&gt;
      &lt;td&gt;用冒号分隔的目录列表，shell 用于查找命令&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;PS1&lt;/td&gt;
      &lt;td&gt;主要的命令提示符，默认值为 &lt;code class=&quot;highlighter-rouge&quot;&gt;\s-\v\$ &lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;PS2&lt;/td&gt;
      &lt;td&gt;次要的命令提示符，默认值为 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt;，用于多行&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&quot;bash-的保留变量&quot;&gt;Bash 的保留变量&lt;/h5&gt;

&lt;p&gt;以下变量为 bash 专有的变量，但对于其它 shell 就是普通的变量名，不会特殊对待它们。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;变量&lt;/th&gt;
      &lt;th&gt;用途&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;auto_resume&lt;/td&gt;
      &lt;td&gt;控制 shell 如何与用户交互，作业控制&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;BASH&lt;/td&gt;
      &lt;td&gt;用于执行当前 Bash 实例的全路径&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;BASH_ENV&lt;/td&gt;
      &lt;td&gt;调用 bash 执行脚本时，如果该变量已设置，执行脚本前，会将变量值扩展，作为启动文件来读取&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;BASH_VERSION&lt;/td&gt;
      &lt;td&gt;当前 bash 实例的版本号&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;BASH_VERSINFO&lt;/td&gt;
      &lt;td&gt;只读数组变量，其成员保存该 bash 实例的版本信息&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;COLUMNS&lt;/td&gt;
      &lt;td&gt;打印列表时，内建命令 &lt;code class=&quot;highlighter-rouge&quot;&gt;select&lt;/code&gt; 使用该变量来判断终端的宽度，接到 &lt;code class=&quot;highlighter-rouge&quot;&gt;SIGWINCH&lt;/code&gt; 信号时会自动设置&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;COMP_CWORD&lt;/td&gt;
      &lt;td&gt;当前光标下输入的单词位于 &lt;code class=&quot;highlighter-rouge&quot;&gt;COMP_WORDS&lt;/code&gt; 数组中的索引&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;COMP_LINE&lt;/td&gt;
      &lt;td&gt;当前命令行中输入的完整命令&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;COMP_POINT&lt;/td&gt;
      &lt;td&gt;相对于当前命令起始处的当前光标位置&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;COMP_WORDS&lt;/td&gt;
      &lt;td&gt;数组变量，保存当前命令行输入所有的单词&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;COMPREPLY&lt;/td&gt;
      &lt;td&gt;用于生成补全列表的数组&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DIRSTACK&lt;/td&gt;
      &lt;td&gt;数组变量，保存目录栈的内容&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;EUID&lt;/td&gt;
      &lt;td&gt;当前用户的有效 UID&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;FCEDIT&lt;/td&gt;
      &lt;td&gt;当内建命令 &lt;code class=&quot;highlighter-rouge&quot;&gt;fc&lt;/code&gt; 使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;-e&lt;/code&gt; 选项时，其使用的默认编辑器&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;FIGNORE&lt;/td&gt;
      &lt;td&gt;指定多个文件扩展名，用冒号分隔，自动补全时会忽略这些扩展名&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;FUNCNAME&lt;/td&gt;
      &lt;td&gt;数组变量，包含了整个调用链上所有函数的名字。&lt;code class=&quot;highlighter-rouge&quot;&gt;${FUNCNAME[0]}&lt;/code&gt; 代表 shell 脚本当前正在执行的函数的名字，而变量 &lt;code class=&quot;highlighter-rouge&quot;&gt;${FUNCNAME[1]}&lt;/code&gt; 则代表调用函数 ${FUNCNAME[0]} 的函数的名字，依此类推&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GLOBIGNORE&lt;/td&gt;
      &lt;td&gt;设置要忽略的模式匹配文件，多个模式用冒号分隔，文件名扩展时会忽略匹配这些模式的文件&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;GROUPS&lt;/td&gt;
      &lt;td&gt;数组变量，包含当前用户的所有的组&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;histchars&lt;/td&gt;
      &lt;td&gt;用于控制历史记录展开、快速替换和标记化的字符，最多有 3 个字符&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;HISTCMD&lt;/td&gt;
      &lt;td&gt;当前命令执行完后，它在历史命令中的排列编号&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;HISTCONTROL&lt;/td&gt;
      &lt;td&gt;用于指定是否要把某个命令加入历史列表中&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;HISTFILE&lt;/td&gt;
      &lt;td&gt;保存历史命令的文件名，默认为 &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.bash_history&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;HISTFILESIZE&lt;/td&gt;
      &lt;td&gt;历史命令文件可以保存的最大行数，默认为 500 行&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;HISTIGNORE&lt;/td&gt;
      &lt;td&gt;指定哪些命令保存到历史文件中，哪些忽略&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;HISTSIZE&lt;/td&gt;
      &lt;td&gt;历史列表中可保存的命令的数量，默认为 500 个&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;HOSTFILE&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/hosts&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;HOSTNAME&lt;/td&gt;
      &lt;td&gt;指定主机名要保存在哪个文件中，如 &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/hosts&lt;/code&gt;。shell 需要时会读取。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;HOSTTYPE&lt;/td&gt;
      &lt;td&gt;用于描述运行 bash 的当前主机硬件平台&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;IGNOREEOF&lt;/td&gt;
      &lt;td&gt;如果整个输入是一个 EOF 字符，shell 应该如何对待&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;INPUTRC&lt;/td&gt;
      &lt;td&gt;Readlin 初始化文件的名称，用来覆盖默认值 &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/inputrc&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;LANG&lt;/td&gt;
      &lt;td&gt;排除那些以 &lt;code class=&quot;highlighter-rouge&quot;&gt;LC_&lt;/code&gt; 开头的变量所设置的语系，该变量用于设置其余类别的语系&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;LC_ALL&lt;/td&gt;
      &lt;td&gt;设置语系，用于覆盖 &lt;code class=&quot;highlighter-rouge&quot;&gt;LANG&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;LC_&lt;/code&gt; 开头的所有变量&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;LC_COLLATE&lt;/td&gt;
      &lt;td&gt;文件名扩展之后，用该变量指定的语系来排序，并确定了字符整理和字符串整理的规则，这些规则控制着范围、同等类以及多字符整理元素的行为。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;LC_CTYPE&lt;/td&gt;
      &lt;td&gt;指定用于 LC_CTYPE 类别信息的语言环境。LC_CTYPE 类别确定了字符处理的规则，这些规则控制着文本数据字符（即单字节和多字节字符）的字节序列的解释、字符的分类（如，字母、数字等）以及字符类的行为。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;LC_MESSAGES&lt;/td&gt;
      &lt;td&gt;指定用于 LC_MESSAGES 类别信息的语言环境。LC_MESSAGES 类别确定了控制肯定和否定响应的规则，以及控制用于消息和菜单的语言环境（语言）的规则。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;LC_NUMERIC&lt;/td&gt;
      &lt;td&gt;指定用于 LC_NUMERIC 类别信息的语言环境。LC_NUMERIC 类别确定了控制非货币数字格式的规则。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;LINENO&lt;/td&gt;
      &lt;td&gt;脚本中当前执行的行号&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;LINES&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;select&lt;/code&gt; 命令用该变量来决定打印时的宽度&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;MACHTYPE&lt;/td&gt;
      &lt;td&gt;记录系统的硬件结构，格式为标准的 GNU 格式：CPU-COMPANY-SYSTEM&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;MAILCHECK&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MAILPATH&lt;/code&gt; 或 &lt;code class=&quot;highlighter-rouge&quot;&gt;MAIL&lt;/code&gt; 变量所指定的邮件文件，该变量指定多少秒检查一次邮件文件&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;OLDPWD&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; 命令设置的上一个工作目录&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;OPTERR&lt;/td&gt;
      &lt;td&gt;如果设为 1，bash 会显示 &lt;code class=&quot;highlighter-rouge&quot;&gt;getopt()&lt;/code&gt; 函数产生的错误&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;OSTYPE&lt;/td&gt;
      &lt;td&gt;当前操作系统类型&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;PIPESTATUS&lt;/td&gt;
      &lt;td&gt;数组变量，保存最近在前台执行的管道进程的退出状态码的列表&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;POSIXLY_CORRECT&lt;/td&gt;
      &lt;td&gt;bash 启动时，如果该变量在环境变量中，shell 会进入 POSIX 模式&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;PPID&lt;/td&gt;
      &lt;td&gt;shell 的父进程的 ID&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;PROMPT_COMMAND&lt;/td&gt;
      &lt;td&gt;如果设置该变量，变量值会被解释为一个命令，在每次打印主要提示符 &lt;code class=&quot;highlighter-rouge&quot;&gt;PS1&lt;/code&gt; 之前执行&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;PS3&lt;/td&gt;
      &lt;td&gt;变量值用于作为 &lt;code class=&quot;highlighter-rouge&quot;&gt;select&lt;/code&gt; 命令的提示符，默认为 &lt;code class=&quot;highlighter-rouge&quot;&gt;#?&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;PS4&lt;/td&gt;
      &lt;td&gt;在 bash 的调试模式中，每行命令都会被回显，该变量的值可以在每条回显的最前面显示&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;PWD&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; 命令设置的当前工作目录&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;RANDOM&lt;/td&gt;
      &lt;td&gt;该变量每次做为参数被引用时，都会随机产生一个 0 ~ 32767 的整数。为变量赋值可以为随机生成器设定种子&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;REPLY&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;read&lt;/code&gt; 命令的默认值&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SECONDS&lt;/td&gt;
      &lt;td&gt;该变量会扩展为 shell 到现在运行的秒数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SHELLOPTS&lt;/td&gt;
      &lt;td&gt;所有已启用的 shell 选项，用冒号分隔&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SHLVL&lt;/td&gt;
      &lt;td&gt;启动一个新的 bash 实例，该变量就会加 1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;TIMEFORMAT&lt;/td&gt;
      &lt;td&gt;此参数的值用作格式字符串, 用于指定应如何显示带有 &lt;code class=&quot;highlighter-rouge&quot;&gt;time&lt;/code&gt; 的管道的计时信息&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;TMOUT&lt;/td&gt;
      &lt;td&gt;如果设置的值大于 0，&lt;code class=&quot;highlighter-rouge&quot;&gt;TMOUT&lt;/code&gt; 会做为 &lt;code class=&quot;highlighter-rouge&quot;&gt;read&lt;/code&gt; 命令超时的默认值。在交互式 shell 中，出现提示符以后，变量值代表等待输入的秒数，如果超过这个时间还没有输入，bash 就会终止&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;UID&lt;/td&gt;
      &lt;td&gt;当前用户的真实 UID&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;325-特殊参数&quot;&gt;3.2.5 特殊参数&lt;/h4&gt;

&lt;p&gt;有几个参数 shell 会特殊对待，这些参数只可以被引用，不可以赋值。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;参数&lt;/th&gt;
      &lt;th&gt;用途&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$*&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;扩展为位置参数，从 1 开始。如果扩展发生在双引号中，该变量会被扩展成一个词，该词由若干个参数组成，参数之间用 IFS 的第一个字符分隔。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$@&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;扩展为位置参数，从 1 开始。如果扩展发生在双引号中，其中的每一个参数都会被单独扩展成为一个词。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$#&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;扩展成十进制的位置参数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$?&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;扩展成为最近在前台执行的管道的退出状态&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$-&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;用于保存当前 shell 所使用的所有选项，这些选项都是由 &lt;code class=&quot;highlighter-rouge&quot;&gt;set&lt;/code&gt; 命令设置的&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$$&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;扩展为 shell 的进程 ID&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$!&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;扩展为最近后台执行的进程的 ID&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$0&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;扩展为 shell 的名称或 shell 脚本的名称&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$_&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;保存前一个命令最后一个参数的变量值&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&quot;-vs-&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$*&lt;/code&gt; vs &lt;code class=&quot;highlighter-rouge&quot;&gt;$@&lt;/code&gt;&lt;/h5&gt;

&lt;p class=&quot;notice--success&quot;&gt;现实使用中 &lt;code class=&quot;highlighter-rouge&quot;&gt;$*&lt;/code&gt; 经常会带来问题，因此经常使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;$@&lt;/code&gt;。&lt;/p&gt;

&lt;h5 id=&quot;位置参数&quot;&gt;位置参数&lt;/h5&gt;

&lt;p&gt;位置参数是指脚本名后面跟的词，它们会放到 &lt;code class=&quot;highlighter-rouge&quot;&gt;$1&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;$2&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;$3&lt;/code&gt; 等变量中。需要时，可以把变量加入一个内部数组。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$#&lt;/code&gt;  保存了参数的总个数。&lt;/p&gt;

&lt;h4 id=&quot;326-变量让脚本更易于重用&quot;&gt;3.2.6 变量让脚本更易于重用&lt;/h4&gt;

&lt;p&gt;为了让得到脚本的他人能更快速地修改、使用，建议尽可能地用变量代替常量。&lt;/p&gt;

&lt;h3 id=&quot;33-对字符的引用&quot;&gt;3.3 对字符的引用&lt;/h3&gt;

&lt;h4 id=&quot;331-为什么要引用字符&quot;&gt;3.3.1 为什么要引用字符&lt;/h4&gt;

&lt;p&gt;引用是为了清除字符或词的特殊含义。&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;引用可以 &lt;strong&gt;禁用&lt;/strong&gt; shell 对某些特殊字符的 &lt;strong&gt;特殊对待&lt;/strong&gt;，可以让 shell &lt;strong&gt;忽略其保留的词&lt;/strong&gt;，从而对它们 &lt;strong&gt;禁用参数的扩展&lt;/strong&gt;。&lt;/p&gt;

&lt;h4 id=&quot;332-转义符&quot;&gt;3.3.2 转义符&lt;/h4&gt;

&lt;p&gt;转义符用于移除 &lt;strong&gt;单个字符&lt;/strong&gt; 的特殊含义。没被引用的 &lt;code class=&quot;highlighter-rouge&quot;&gt;\&lt;/code&gt; 在 bash 中是一个转义符。它会保持其后面这个字符的原始值，&lt;strong&gt;换行符除外&lt;/strong&gt;。如果 &lt;code class=&quot;highlighter-rouge&quot;&gt;\&lt;/code&gt; 后面紧跟着换行符，代表下一行的内容与本行是连续的，输入流中的这个 &lt;code class=&quot;highlighter-rouge&quot;&gt;\&lt;/code&gt; 会被移除并忽略，从而 &lt;code class=&quot;highlighter-rouge&quot;&gt;\&lt;/code&gt; 在此起了连接两行的作用。&lt;/p&gt;

&lt;h4 id=&quot;333-单引号&quot;&gt;3.3.3 单引号&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;' '&lt;/code&gt; 单引号用于保持被引用内容中 &lt;strong&gt;所有字符&lt;/strong&gt; 的原始值。&lt;/p&gt;

&lt;p&gt;单引号不能嵌套使用，哪怕加了转义符也不可以。&lt;/p&gt;

&lt;h4 id=&quot;334-双引号&quot;&gt;3.3.4 双引号&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot; &quot;&lt;/code&gt; 双引号用于保持被引用内容中 &lt;strong&gt;大部分&lt;/strong&gt; 字符的原始值，除了 &lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;` `&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;\&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;` `&lt;/code&gt; 在双引号中保持其原义，即变量替换和命令替换。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\&lt;/code&gt; 只有在 &lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;` `&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot; &quot;&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;\&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;换行符&lt;/code&gt; 前面时才会保持原义。在双引号中，如果 &lt;code class=&quot;highlighter-rouge&quot;&gt;\&lt;/code&gt; 后面跟的是这些符号之一，&lt;code class=&quot;highlighter-rouge&quot;&gt;\&lt;/code&gt; 会从输入流中被删除。&lt;/p&gt;

&lt;p&gt;双引号可以嵌套使用，但被引用的双引号需被转义。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo &quot;I'd say: \&quot;Go for it!\&quot;&quot;
I'd say: &quot;Go for it!&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;ansi-c-引用&quot;&gt;ANSI-C 引用&lt;/h4&gt;

&lt;p&gt;bash 还有一种引用的机制：在字符中使用类 ANSI-C 的转义序列，语法为：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$'string'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;string&lt;/code&gt; 中如果含有以下转义序列，会被转义：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;转义码&lt;/th&gt;
      &lt;th&gt;含义&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\&quot;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;双引号&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\'&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;单引号&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\\&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;反斜线&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\a&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;终端警告字符（提示音）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\b&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;回退&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\e&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;转义&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\f&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;馈页&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\n&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;换行&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\r&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;光标到行首&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\t&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;水平制表符&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\v&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;垂直制表符&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\cx&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;ctrl-x&lt;/code&gt; 字符，如 &lt;code class=&quot;highlighter-rouge&quot;&gt;$'\cZ'&lt;/code&gt; 会输出 &lt;code class=&quot;highlighter-rouge&quot;&gt;ctrl-z&lt;/code&gt;  的控制序列&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;336-语系&quot;&gt;3.3.6 语系&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$&quot;string&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这种引用称为 I18N。&lt;/p&gt;

&lt;p&gt;如果对该字符串存在可用的翻译，会用其译文来代替原有的文字。如果没有，或如果语系设置为 &lt;code class=&quot;highlighter-rouge&quot;&gt;C&lt;/code&gt; 或 &lt;code class=&quot;highlighter-rouge&quot;&gt;POSIX&lt;/code&gt;，该 &lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt; 符号会被忽略，结果就变成普通的双引号引用字符串。&lt;/p&gt;

&lt;p&gt;如果字符串被译文所替换，则结果是双引号引用。&lt;/p&gt;

&lt;h3 id=&quot;34-shell-扩展&quot;&gt;3.4 shell 扩展&lt;/h3&gt;

&lt;h4 id=&quot;简介&quot;&gt;简介&lt;/h4&gt;

&lt;p&gt;命令被拆分成记号以后，这些记号或词汇会被扩展或解析。共可进行 8 类扩展，在所有扩展完成之后，会进行引用的移除。&lt;/p&gt;

&lt;h4 id=&quot;342-大括号扩展&quot;&gt;3.4.2 大括号扩展&lt;/h4&gt;

&lt;p&gt;大括号扩展是一种能够生成任意字符串的机制。&lt;/p&gt;

&lt;p&gt;大括号扩展的模式是这样的：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;有一个可选的 &lt;strong&gt;前缀&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;然后是一组 &lt;strong&gt;字符串&lt;/strong&gt; 或表达式，它们包含在大括号中，用 &lt;strong&gt;逗号&lt;/strong&gt; 分隔&lt;/li&gt;
  &lt;li&gt;最后是一个可选的 &lt;strong&gt;后缀&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;前缀{字,符,串}后缀
前缀{表,达,式}后缀
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;大括号扩展允许嵌套。每个扩展字符串的结果是不会排序的，依然按照从左到右的顺序依次扩展。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ echo sp{el,il,al}l
spell spill spall
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;大括号扩展是先于其他扩展进行的，其他扩展眼中的特殊字符都会被保留下来，这个过程是严格的文本性质的。对于扩展的内容和括号内的文本，bash 绝对不会应用任何的语法解释。为了避免与参数扩展造成冲突，大括号扩展不会识别字符串中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;${&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;正确的形式：大括号扩展必须包含未引用的成对的大括号，以及至少一个未引用的逗号。&lt;/p&gt;

&lt;p&gt;如果大括号扩展的形式错误，扩展之后不会产生任何变化。&lt;/p&gt;

&lt;h4 id=&quot;343--扩展&quot;&gt;3.4.3 &lt;code class=&quot;highlighter-rouge&quot;&gt;~&lt;/code&gt; 扩展&lt;/h4&gt;

&lt;p&gt;如果词汇的开头是个未引用的波浪线 &lt;code class=&quot;highlighter-rouge&quot;&gt;~&lt;/code&gt;，所有的字符一直到第一个未引用斜线，或所有的字符（如果没有未引用斜线）被看作波浪线 &lt;strong&gt;前缀&lt;/strong&gt;。&lt;/p&gt;

&lt;h5 id=&quot;neo&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;~neo&lt;/code&gt;&lt;/h5&gt;

&lt;p&gt;前缀中如果没有字符被引用，则其中紧随 &lt;code class=&quot;highlighter-rouge&quot;&gt;~&lt;/code&gt; 后面的字符串被看作有可能是登陆名。&lt;/p&gt;

&lt;p&gt;如果该登陆名是空字符串，&lt;code class=&quot;highlighter-rouge&quot;&gt;~&lt;/code&gt; 会被替换成 &lt;code class=&quot;highlighter-rouge&quot;&gt;HOME&lt;/code&gt; 变量的值。&lt;/p&gt;

&lt;p&gt;如果 &lt;code class=&quot;highlighter-rouge&quot;&gt;HOME&lt;/code&gt; 未设置，则用执行 shell 的用户的家目录替换，否则用指定登陆名的家目录替换。&lt;/p&gt;

&lt;p&gt;如果登陆名无效或扩展失败，则命令不会受影响，不会变。&lt;/p&gt;

&lt;h5&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;~+&lt;/code&gt;&lt;/h5&gt;

&lt;p&gt;如果前缀是 &lt;code class=&quot;highlighter-rouge&quot;&gt;~+&lt;/code&gt;，用变量 &lt;code class=&quot;highlighter-rouge&quot;&gt;PWD&lt;/code&gt; 的值替换前缀。&lt;/p&gt;

&lt;h5 id=&quot;-&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;~-&lt;/code&gt;&lt;/h5&gt;

&lt;p&gt;如果前缀是 &lt;code class=&quot;highlighter-rouge&quot;&gt;~-&lt;/code&gt;，用变量 &lt;code class=&quot;highlighter-rouge&quot;&gt;OLDPWD&lt;/code&gt; 的值，如果预先设置的话，就进行替换。&lt;/p&gt;

&lt;h5 id=&quot;6&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;~6&lt;/code&gt;&lt;/h5&gt;

&lt;p&gt;如果前缀是个数字 n，则把 &lt;code class=&quot;highlighter-rouge&quot;&gt;~n&lt;/code&gt; 替换成目录堆栈的第 n 个目录。&lt;/p&gt;

&lt;h5 id=&quot;pathtest&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$PATH:~/test&lt;/code&gt;&lt;/h5&gt;

&lt;p&gt;给变量赋值时，如果值是以 &lt;code class=&quot;highlighter-rouge&quot;&gt;：&lt;/code&gt; 或 &lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt; 开头，也会进行扩展，因此可以用 &lt;code class=&quot;highlighter-rouge&quot;&gt;~&lt;/code&gt; 和文件名的组合来为 &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;MAILPATH&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;CDPATH&lt;/code&gt; 赋值，shell 会把扩展后的值赋给变量。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;:~/test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;~/test&lt;/code&gt; 会先扩展为 &lt;code class=&quot;highlighter-rouge&quot;&gt;$HOME/test&lt;/code&gt;，如果 &lt;code class=&quot;highlighter-rouge&quot;&gt;$HOME&lt;/code&gt; 为 &lt;code class=&quot;highlighter-rouge&quot;&gt;/home/franky&lt;/code&gt;，则 &lt;code class=&quot;highlighter-rouge&quot;&gt;/home/franky/test&lt;/code&gt; 会加入 &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt; 变量的内容中。&lt;/p&gt;

&lt;h4 id=&quot;344-shell-参数与变量扩展&quot;&gt;3.4.4 shell 参数与变量扩展&lt;/h4&gt;

&lt;p&gt;🍎 本节要特别感谢 &lt;a href=&quot;https://blog.csdn.net/astrotycoon/article/details/78109827&quot;&gt;astrotycoon&lt;/a&gt; 的文章！&lt;/p&gt;

&lt;h5 id=&quot;参数的概念&quot;&gt;参数的概念&lt;/h5&gt;

&lt;p&gt;在 shell 编程中，参数是个 &lt;strong&gt;大概念&lt;/strong&gt;，也是个笼统的概念，它是个实体，其中存储着各式各样的值。&lt;/p&gt;

&lt;p&gt;可以通过三类方式来引用参数，从而得到参数中存储的值：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;通过 &lt;strong&gt;名称&lt;/strong&gt; 来引用参数，这样的参数称之为 &lt;strong&gt;变量&lt;/strong&gt;。&lt;/p&gt;

    &lt;p&gt;一个变量拥有自己的值和诸多属性，属性可以通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;declare&lt;/code&gt; 来设定，可以通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;unset&lt;/code&gt; 来取消一个变量。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;通过 &lt;strong&gt;数字&lt;/strong&gt; 来引用参数，这样的参数称之为 &lt;strong&gt;位置参数&lt;/strong&gt;。&lt;/p&gt;

    &lt;p&gt;位置参数在脚本被调用时自动初始化为传递给脚本的参数。脚本中调用函数时，位置参数会临时替换成传递给函数的参数。可以用 &lt;code class=&quot;highlighter-rouge&quot;&gt;set&lt;/code&gt; 命令来改变位置参数的值，但无法通过赋值语句来改变。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;还有一类参数，被称之为 &lt;strong&gt;特殊参数&lt;/strong&gt;。&lt;/p&gt;

    &lt;p&gt;只能通过 shell 内部预定义的特殊符号来引用它们，并且只能引用，不能用赋值语句来重新赋值。预定义的特殊符号包括：&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;  &lt;code class=&quot;highlighter-rouge&quot;&gt;@&lt;/code&gt;  &lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt;  &lt;code class=&quot;highlighter-rouge&quot;&gt;?&lt;/code&gt;  &lt;code class=&quot;highlighter-rouge&quot;&gt;!&lt;/code&gt;  &lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt;  &lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt;  &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;参数扩展&quot;&gt;参数扩展&lt;/h5&gt;

&lt;p&gt;参数扩展就是通过符号 &lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt; 获得参数中存储的值。在获得最终结果之前，要对参数及数值进行一系列的操作，如删除、截取、替换等。&lt;/p&gt;

&lt;p&gt;参数扩展最简单的形式为：&lt;code class=&quot;highlighter-rouge&quot;&gt;$参数&lt;/code&gt; 或 &lt;code class=&quot;highlighter-rouge&quot;&gt;${参数}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;被扩展的参数名可以用大括号括起来，大括号是可选的，但 &lt;strong&gt;建议总是加上&lt;/strong&gt;。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;使用大括号时，关闭的大括号不能被转义、被引用，也不能处于算术表达式、命令替换、参数替换中。&lt;/li&gt;
  &lt;li&gt;大括号中参数的值将被替换。&lt;/li&gt;
  &lt;li&gt;如果参数是大于一位的位置参数，如 &lt;code class=&quot;highlighter-rouge&quot;&gt;$15&lt;/code&gt;，则必须要使用大括号，即 &lt;code class=&quot;highlighter-rouge&quot;&gt;${$15}&lt;/code&gt;，否则 &lt;code class=&quot;highlighter-rouge&quot;&gt;$$15&lt;/code&gt; 会被认为是 &lt;code class=&quot;highlighter-rouge&quot;&gt;$1&lt;/code&gt; 后面跟着一个 5。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;WORD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;car
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;WORD&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;s and &lt;span class=&quot;nv&quot;&gt;$WORDs&lt;/span&gt;
cars and
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p class=&quot;notice--success&quot;&gt;所以如果需要把变量名与紧随的字符区分开，就一定要使用大括号。&lt;/p&gt;

&lt;h6 id=&quot;常用的参数扩展方法&quot;&gt;常用的参数扩展方法&lt;/h6&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;表达式&lt;/th&gt;
      &lt;th&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${var}&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;变量 &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt; 的值，同 &lt;code class=&quot;highlighter-rouge&quot;&gt;$var&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${var-$DEFAULT}&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;如果 &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt; 未设置，表达式求值结果为 &lt;code class=&quot;highlighter-rouge&quot;&gt;$DEFAULT&lt;/code&gt; &lt;sup&gt;*&lt;/sup&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${var:-$DEFAULT}&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;如果 &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt; 未设置或为空，表达式求值结果为 &lt;code class=&quot;highlighter-rouge&quot;&gt;$DEFAULT&lt;/code&gt; &lt;sup&gt;*&lt;/sup&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${var=$DEFAULT}&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;如果 &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt; 未设置，表达式求值结果为 &lt;code class=&quot;highlighter-rouge&quot;&gt;$DEFAULT&lt;/code&gt; &lt;sup&gt;*&lt;/sup&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${var:=$DEFAULT}&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;如果 &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt; 未设置或为空，表达式求值结果为 &lt;code class=&quot;highlighter-rouge&quot;&gt;$DEFAULT&lt;/code&gt; &lt;sup&gt;*&lt;/sup&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${var+$OTHER}&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;如果 &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt; 已设置，表达式求值结果为 &lt;code class=&quot;highlighter-rouge&quot;&gt;$OTHER&lt;/code&gt;，否则为空&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${var:+$OTHER}&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;如果 &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt; 已设置，表达式求值结果为 &lt;code class=&quot;highlighter-rouge&quot;&gt;$OTHER&lt;/code&gt;，否则为空&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${var?$ERR_MSG}&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;如果 &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt; 未设置，打印 &lt;code class=&quot;highlighter-rouge&quot;&gt;$ERR_MSG&lt;/code&gt;，退出脚本，退出状态为 1。&lt;sup&gt;*&lt;/sup&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${var:?$ERR_MSG}&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;如果 &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt; 未设置，打印 &lt;code class=&quot;highlighter-rouge&quot;&gt;$ERR_MSG&lt;/code&gt;，退出脚本，退出状态为 1。&lt;sup&gt;*&lt;/sup&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${!varprefix*}&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;匹配之前所有以 &lt;code class=&quot;highlighter-rouge&quot;&gt;varprefix&lt;/code&gt; 开头声明的变量&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${!varprefix@}&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;匹配之前所有以 &lt;code class=&quot;highlighter-rouge&quot;&gt;varprefix&lt;/code&gt; 开头声明的变量&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; 如果 &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt; 已设置，表达式求值结果为 &lt;code class=&quot;highlighter-rouge&quot;&gt;$var&lt;/code&gt;。&lt;/p&gt;

&lt;h5 id=&quot;间接扩展&quot;&gt;间接扩展&lt;/h5&gt;

&lt;p&gt;间接扩展也称间接引用，是指用一个变量的值来传递另一个变量的名字。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;VAR1&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;VAR1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;42
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!NAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
42
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果参数的第一个字符是个感叹号 &lt;code class=&quot;highlighter-rouge&quot;&gt;!&lt;/code&gt;，则参数其余的字符做为变量名，但该变量扩展成变量值以后，该变量值代表另一个变量的名字。&lt;/p&gt;

&lt;h5 id=&quot;子串扩展&quot;&gt;子串扩展&lt;/h5&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${parameter:offset}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${parameter:offset:length}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;从 offset 位置开始，截取长度为 length 的子字符串，如果没有提供 length，则是从 offset 开始到结尾。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如果 offset 是负值，开始位置是从字符串末尾开始算起，取长度为 length 的子串。&lt;/li&gt;
  &lt;li&gt;如果 length 是负值，则 length 不再代表字符串长度，而代表另一个 offset，位置从字符串末尾开始，扩展的结果是 offset ~ length 之间的子串。&lt;/li&gt;
  &lt;li&gt;如果 parameter 是 &lt;code class=&quot;highlighter-rouge&quot;&gt;@&lt;/code&gt;，即所有的位置参数时，offset 必须从 1 开始。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当 offset 是负值时，负号 &lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt; 与前面的冒号 &lt;code class=&quot;highlighter-rouge&quot;&gt;:&lt;/code&gt; 必须用空格分开，或者把负数用括号括起来：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo ${MYSTRING: -34:13}
echo ${MYSTRING:(-34):13}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;查找并替换&quot;&gt;查找并替换&lt;/h5&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${parameter/pattern/string}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${parameter//pattern/string}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${parameter/pattern}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${parameter//pattern}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;匹配后的子串会用 string 替换掉。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;parameter 之后如果是 &lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt;，则只替换匹配到的 &lt;strong&gt;第一个&lt;/strong&gt; 子串；parameter 之后如果是 &lt;code class=&quot;highlighter-rouge&quot;&gt;//&lt;/code&gt;，则替换 &lt;strong&gt;所有&lt;/strong&gt; 匹配到的子串。&lt;/li&gt;
  &lt;li&gt;当 string 为空时，则相当于将匹配的子串 &lt;strong&gt;删除&lt;/strong&gt;。&lt;/li&gt;
  &lt;li&gt;特殊符号 &lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;%&lt;/code&gt; 在这种情况下分别锚定字符串的 &lt;strong&gt;开始&lt;/strong&gt; 和 &lt;strong&gt;结尾&lt;/strong&gt;。&lt;/li&gt;
  &lt;li&gt;如果 bash 的 nocasematch 选项是打开的，则匹配的过程大小写是不敏感的。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ MYSTRING&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Be liberal in what you accept, and conservative in what you send&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;MYSTRING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/in/by&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
Be liberal by what you accept, and conservative &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;what you send
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;MYSTRING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;//in/by&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
Be liberal by what you accept, and conservative by what you send
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;MYSTRING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/conservative/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
Be liberal &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;what you accept, and &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;what you send

&lt;span class=&quot;nv&quot;&gt;$ MYSTRING&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;xxxxxxxxxxxxxxx
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;MYSTRING&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
xxxxxxxxxxxxxxx
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;MYSTRING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/#x/y&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
yxxxxxxxxxxxxxx
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;MYSTRING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/%x/y&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
xxxxxxxxxxxxxxy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;bash 的这个查找替换功能跟 &lt;code class=&quot;highlighter-rouge&quot;&gt;sed&lt;/code&gt; 的很像，不同的是这里的 pattern 不是正则表达式。&lt;/p&gt;

&lt;h5 id=&quot;查找并删除&quot;&gt;查找并删除&lt;/h5&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${parameter#pattern}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${parameter##pattern}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${parameter%pattern}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${parameter%%pattern}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;删除匹配到的子串。其中操作符 &lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt; 与 &lt;code class=&quot;highlighter-rouge&quot;&gt;%&lt;/code&gt; 的作用为：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt;  行首起，匹配第一个&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;##&lt;/code&gt; 行首起，匹配所有&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;%&lt;/code&gt;  行尾起，匹配第一个&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;%%&lt;/code&gt; 行尾起，匹配所有&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;例如：&lt;code class=&quot;highlighter-rouge&quot;&gt;file=/dir1/dir2/dir3/my.file.txt&lt;/code&gt;  定义变量&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${file#*/}&lt;/code&gt; ：&lt;code class=&quot;highlighter-rouge&quot;&gt;dir1/dir2/dir3/my.file.txt &lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${file##*/}&lt;/code&gt; ：&lt;code class=&quot;highlighter-rouge&quot;&gt;my.file.txt&lt;/code&gt; ，相当于 &lt;code class=&quot;highlighter-rouge&quot;&gt;basename ${file}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${file#*.}&lt;/code&gt; ：&lt;code class=&quot;highlighter-rouge&quot;&gt;file.txt&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${file##*.}&lt;/code&gt; ：&lt;code class=&quot;highlighter-rouge&quot;&gt;txt&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${file%/*}&lt;/code&gt; ：&lt;code class=&quot;highlighter-rouge&quot;&gt;/dir1/dir2/dir3&lt;/code&gt;，相当于 &lt;code class=&quot;highlighter-rouge&quot;&gt;dirname ${file}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${file%%/*}&lt;/code&gt; ：空值&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${file%.*}&lt;/code&gt; ：&lt;code class=&quot;highlighter-rouge&quot;&gt;/dir1/dir2/dir3/my.file&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${file%%.*}&lt;/code&gt; ：&lt;code class=&quot;highlighter-rouge&quot;&gt;/dir1/dir2/dir3/my&lt;/code&gt;&lt;/p&gt;

&lt;h5 id=&quot;获取参数长度&quot;&gt;获取参数长度&lt;/h5&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${#parameter}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;返回 parameter 值的长度。&lt;/p&gt;

&lt;h5 id=&quot;大小写转换&quot;&gt;大小写转换&lt;/h5&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${parameter^}&lt;/code&gt;  ：将第一个字符转成大写&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${parameter^^}&lt;/code&gt;  ：将所有字符转成大写&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${parameter,}&lt;/code&gt;  ： 将第一个字符转成小写&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;${parameter,,}&lt;/code&gt;  ： 将所有字符转成小写&lt;/p&gt;

&lt;h4 id=&quot;345-命令替换&quot;&gt;3.4.5 命令替换&lt;/h4&gt;

&lt;p&gt;可以用一个命令的输出来替换命令本身。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$(command)&lt;/code&gt; 或 &lt;code class=&quot;highlighter-rouge&quot;&gt;`command`&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;扩展时，bash 先执行该命令，然后用其输出来替换命令本身，末尾的换行符会被删除，中间的换行符不会删。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如果使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;`command`&lt;/code&gt; 形式：如果 &lt;code class=&quot;highlighter-rouge&quot;&gt;\&lt;/code&gt; 后面是 &lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;`&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;\&lt;/code&gt;，会将其转义，否则就是 &lt;code class=&quot;highlighter-rouge&quot;&gt;\&lt;/code&gt; 本身。&lt;/li&gt;
  &lt;li&gt;如果使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;$(command)&lt;/code&gt; 形式：括号里的所有字符都正常处理。&lt;/li&gt;
  &lt;li&gt;命令替换可嵌套，如果用反引号形式，里面的那层反引号需要用 &lt;code class=&quot;highlighter-rouge&quot;&gt;\&lt;/code&gt; 转义。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果命令替换出现在双引号里面，不会对结果进行词汇分割和文件名扩展。&lt;/p&gt;

&lt;h4 id=&quot;346-算术表达式&quot;&gt;3.4.6 算术表达式&lt;/h4&gt;

&lt;p&gt;算术表达式会对表达式进行计算，并用计算结果进行替换。&lt;/p&gt;

&lt;p&gt;基本形式：  &lt;code class=&quot;highlighter-rouge&quot;&gt;$(( EXPRESSION ))&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;表达式中的所有记号都会经历参数扩展、命令替换、去除引用。&lt;/p&gt;

&lt;p&gt;算术表达式可以嵌套。&lt;/p&gt;

&lt;p&gt;计算表达式时会用等宽整数，不会进行溢出检查，除以 0 会被捕获，并标记为错误。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;运算符&lt;/th&gt;
      &lt;th&gt;含义&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;VAR++&lt;/code&gt;  &lt;code class=&quot;highlighter-rouge&quot;&gt;VAR--&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;后缀自增、自减&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;++VAR&lt;/code&gt;  &lt;code class=&quot;highlighter-rouge&quot;&gt;--VAR&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;前缀自增、自减&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;加、减&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;%&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;乘、除、余数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;**&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;求幂&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;!&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;逻辑否&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&amp;amp;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;逻辑与&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;||&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;逻辑或&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;!=&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;等于、不等于&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&lt;/code&gt;  &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;=&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;=&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;比较运算符&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;~&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;按位取反&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&amp;lt;&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&amp;gt;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;按位左移、按位右移&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;按位与&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;|&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;按位或&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;^&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;按位异或&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;expr1 ? expr2 : expr3&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;条件计算&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;*=&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;/=&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;%=&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;+=&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;-=&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&amp;lt;=&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&amp;gt;=&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;=&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;^=&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;|=&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;赋值&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;shell 变量也可作为运算对象。计算前会先进行参数扩展。在表达式中，shell 变量也可以由名称引用，而不使用参数扩展语法。变量的值在引用时作为算术表达式求值。一个 shell 变量不需要开启它的整数属性就可以用于表达式。&lt;/p&gt;

&lt;h5 id=&quot;进制表示&quot;&gt;进制表示&lt;/h5&gt;

&lt;p&gt;由 0 开头的常数被看作八进制数字。&lt;/p&gt;

&lt;p&gt;由 0x 或 0X 开头的为十六进制。&lt;/p&gt;

&lt;p&gt;否则就使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;[BASE'#']N&lt;/code&gt; 的形式：BASE 是一个 2~64 的二进制数字，代表是什么进制，N 是该进制的数字。如果 &lt;code class=&quot;highlighter-rouge&quot;&gt;BASE'#'&lt;/code&gt; 被省略，则认为是十进制的数字。大于 9 的数字依次用小写字母、大写字母、&lt;code class=&quot;highlighter-rouge&quot;&gt;@&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;_&lt;/code&gt; 来表示。如果 BASE 小于等于 36，大小写可以相互混用，来代表 10~35 的数字。&lt;/p&gt;

&lt;p&gt;运算符按优先顺序进行计算，括号中的子表达式最先计算，可以覆盖上面的规则。&lt;/p&gt;

&lt;p&gt;只要可能，就建议尽量使用这种形式的表达式：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$[ EXPRESSION ]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;但这种形式只能计算，不能进行条件的测试。&lt;/p&gt;

&lt;h4 id=&quot;347-进程替换&quot;&gt;3.4.7 进程替换&lt;/h4&gt;

&lt;p&gt;用管道将一个命令的标准输出传递给另一个命令的标准输入，这是个强大的技术。但是，如果要用管道来传递 &lt;strong&gt;多个命令&lt;/strong&gt; 的标准输出该怎么做？这时候进程替换就派上用场了。进程替换可以把一个（或多个）进程的输出送到另一个进程的标准输入。&lt;/p&gt;

&lt;h5 id=&quot;原理&quot;&gt;原理&lt;/h5&gt;

&lt;p class=&quot;notice--info&quot;&gt;进程替换是 &lt;strong&gt;进程间通讯&lt;/strong&gt; 的一种形式，允许一个命令的输入或输出看上去 &lt;strong&gt;像个文件&lt;/strong&gt; 一样。bash 会将 &lt;strong&gt;命令&lt;/strong&gt; 在线 &lt;strong&gt;替换&lt;/strong&gt; 成一个 &lt;strong&gt;文件名&lt;/strong&gt;，借助这种方法，原来只能接受文件做为参数的命令，现在可以直接从另一个程序读取输入，或把输出直接写到另一个程序。&lt;/p&gt;

&lt;p&gt;进程替换是 &lt;strong&gt;重定向&lt;/strong&gt; 的一种形式，一个进程的输入或输出显示为一个 &lt;strong&gt;临时文件&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;进程替换与参数扩展、命令替换和算术扩展是 &lt;strong&gt;同时&lt;/strong&gt; 进行的。&lt;/p&gt;

&lt;h5 id=&quot;语法&quot;&gt;语法&lt;/h5&gt;

&lt;p&gt;格式： &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;(command_list)&lt;/code&gt; 或 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;(command_list)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&lt;/code&gt; 或 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt; 与括号之间没有空格，加上空格或报错。&lt;/p&gt;

&lt;p&gt;括号中的命令执行以后，其：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;形式为 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;( )&lt;/code&gt; 的标准输出文件描述符  或&lt;/li&gt;
  &lt;li&gt;形式为 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;( )&lt;/code&gt; 的标准输入文件描述符&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;被连接到一个 FIFO 文件上，或 &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/fd/&lt;/code&gt; 目录中的某个文件上。然后，文件描述符所连接的文件名被用来替换 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;( )&lt;/code&gt; 或 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;( )&lt;/code&gt; 结构。&lt;/p&gt;

&lt;p&gt;有些程序只支持从文件获取输入，不支持从标准输入获取，因此无法从管道获取输入。借助进程替换，这些程序就可以接收来自于其它程序的数据了。&lt;/p&gt;

&lt;h5 id=&quot;范例&quot;&gt;范例&lt;/h5&gt;

&lt;p&gt;这个例子最便于理解进程替换格式的含义：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &amp;lt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
aa
bbb
cccc

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &amp;lt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
/dev/fd/63
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;(ls)&lt;/code&gt; 改变了 ls 的输出定向。原本 &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt; 的输出是到标准输出的，但 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;(ls)&lt;/code&gt; 把输出指向了一个临时文件，用描述符 &lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/fd/63&lt;/code&gt; 来表示。&lt;/p&gt;

&lt;p&gt;文件名作为 &lt;code class=&quot;highlighter-rouge&quot;&gt;cat&lt;/code&gt; 的参数时，会将文件内容打印出来，即 &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt; 的文件列表。&lt;/p&gt;

&lt;p&gt;文件名作为 &lt;code class=&quot;highlighter-rouge&quot;&gt;echo&lt;/code&gt; 的参数时，只会把*文件名本身打印出来。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /usr/share/dict/linux.words | &lt;span class=&quot;nb&quot;&gt;wc
 &lt;/span&gt;479828  479828 4953680
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;wc&lt;/span&gt; &amp;lt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /usr/share/dict/linux.words&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 479828  479828 4953680 /dev/fd/63
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;diff &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; &amp;lt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ps&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &amp;lt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ps &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;diff &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; .bashrc &amp;lt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ssh remote &lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; .bashrc&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rsync &lt;span class=&quot;nt&quot;&gt;-arv&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--log-file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-vF&lt;/span&gt; .tmp &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;log.txt&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; src/ host::dst/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ps &lt;span class=&quot;nt&quot;&gt;-ef&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;tee&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'$1==&quot;tom&quot;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;toms-procs.txt&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
               &lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'$1==&quot;root&quot;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;roots-procs.txt&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;348-字段分割&quot;&gt;3.4.8 字段分割&lt;/h4&gt;

&lt;p&gt;Word Splitting&lt;/p&gt;

&lt;p&gt;如果 &lt;code class=&quot;highlighter-rouge&quot;&gt;IFS&lt;/code&gt; 的值为空（null），就不会进行字段分割。&lt;/p&gt;

&lt;p&gt;如果没有发生扩展，也不会进行字段分割。&lt;/p&gt;

&lt;p&gt;在参数扩展、命令替换及算术扩展之后，shell 扫描得到的结果，找到双引号，对里面的内容进行字段分割。&lt;/p&gt;

&lt;p&gt;shell 把 &lt;code class=&quot;highlighter-rouge&quot;&gt;$IFS&lt;/code&gt; 的每一个字符都做为分隔符，在这些分隔符上进行分割，把其它扩展的结果分割成单独的字段。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如果 &lt;code class=&quot;highlighter-rouge&quot;&gt;IFS&lt;/code&gt; 没有设置，或其值是 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;space&amp;gt;&amp;lt;tab&amp;gt;&amp;lt;newline&amp;gt;&lt;/code&gt; 这个默认值，则 &lt;code class=&quot;highlighter-rouge&quot;&gt;IFS&lt;/code&gt; 字符的任何排列都可以用来切割字段。&lt;/li&gt;
  &lt;li&gt;如果 &lt;code class=&quot;highlighter-rouge&quot;&gt;IFS&lt;/code&gt; 中含有非默认值，而且 &lt;code class=&quot;highlighter-rouge&quot;&gt;IFS&lt;/code&gt; 中包含空白字符（空格或制表符），则词汇开头和结尾的空白字符序列会被忽略。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;IFS&lt;/code&gt; 中的非空白字符与空白字符的组合也可以用来分割。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;IFS&lt;/code&gt; 空白字符的序列可以用来分割。&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;范例-1&quot;&gt;范例&lt;/h5&gt;

&lt;p&gt;这东西必须得有实例才能直观地理解。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'   one , tow,      three    '&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;%s&amp;gt;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$x&lt;/span&gt;
&amp;lt;one&amp;gt;
&amp;lt;two&amp;gt;
&amp;lt;three&amp;gt;
&lt;span class=&quot;c&quot;&gt;#  IFS 没有设置，使用默认值&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#+ 无论这些空白是纯空格，纯制表符，&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#+ 还是空格与制表符的组合，都看作单一分隔符&lt;/span&gt;


&lt;span class=&quot;nv&quot;&gt;IFS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;','&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'  one , tow,three  '&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;%s&amp;gt;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$x&lt;/span&gt;
&amp;lt;  one &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&amp;lt; two&amp;gt;
&amp;lt;three  &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# IFS 只有逗号时，空格也被看作普通字符&lt;/span&gt;


&lt;span class=&quot;nv&quot;&gt;IFS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;' ,'&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'  one , tow,three  '&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;%s&amp;gt;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$x&lt;/span&gt;
&amp;lt;one&amp;gt;
&amp;lt;two&amp;gt;
&amp;lt;three&amp;gt;
&lt;span class=&quot;c&quot;&gt;# IFS 为空格和逗号时，空格与逗号的任何组合都被看作单一的分隔符&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;349-文件名扩展&quot;&gt;3.4.9 文件名扩展&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;set -f&lt;/code&gt; 会禁止 bash 使用通配符做文件名。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如果 bash 没有开启 &lt;code class=&quot;highlighter-rouge&quot;&gt;-f&lt;/code&gt; 选项，词汇分割之后，它就会在字段中查找 &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;?&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;[&lt;/code&gt; 这些字符。如果找到，该字段即被当作文件名 &lt;strong&gt;匹配模板&lt;/strong&gt;。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如果有匹配的文件名：文件列表会按字母排序，然后替换掉模板本身。&lt;/li&gt;
  &lt;li&gt;如果没有匹配的文件名：&lt;code class=&quot;highlighter-rouge&quot;&gt;nullglob&lt;/code&gt; 选项没有开启，该字段就不做任何改动；若 &lt;code class=&quot;highlighter-rouge&quot;&gt;nullglob&lt;/code&gt; 选项开启，该字段会被删除。&lt;/li&gt;
  &lt;li&gt;如果 &lt;code class=&quot;highlighter-rouge&quot;&gt;nocaseglob&lt;/code&gt; 选项开启，匹配时会忽略大小写。&lt;/li&gt;
  &lt;li&gt;如果选项 &lt;code class=&quot;highlighter-rouge&quot;&gt;dotglob&lt;/code&gt; 没有开启，文件名开头的 &lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt; 或  &lt;code class=&quot;highlighter-rouge&quot;&gt;./&lt;/code&gt; 必须显式匹配：&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; 不可匹配 &lt;code class=&quot;highlighter-rouge&quot;&gt;.file&lt;/code&gt;，只有 &lt;code class=&quot;highlighter-rouge&quot;&gt;.*&lt;/code&gt; 才能匹配；同理，只有 &lt;code class=&quot;highlighter-rouge&quot;&gt;./*&lt;/code&gt; 才能匹配 &lt;code class=&quot;highlighter-rouge&quot;&gt;./file&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;在匹配文件名的过程中，&lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt; 始终要显式匹配：&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; 不能匹配 &lt;code class=&quot;highlighter-rouge&quot;&gt;/dir&lt;/code&gt;，只有 &lt;code class=&quot;highlighter-rouge&quot;&gt;/*&lt;/code&gt; 才能匹配。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GLOBIGNORE&lt;/code&gt; 变量可以用来限制文件名如何匹配模板：如果设置了该变量，匹配的文件名中，如果同时也匹配该变量，该文件名会被移除。文件名 &lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;..&lt;/code&gt; 不受该变量的限制，会被忽略。&lt;/li&gt;
  &lt;li&gt;设置 &lt;code class=&quot;highlighter-rouge&quot;&gt;GLOBIGNORE&lt;/code&gt; 变量相当于开启了 &lt;code class=&quot;highlighter-rouge&quot;&gt;dotglob&lt;/code&gt; 选项，于是以 &lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt; 开头的文件名也会被通配符匹配：&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; 可以匹配 &lt;code class=&quot;highlighter-rouge&quot;&gt;.file&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;35-别名&quot;&gt;3.5 别名&lt;/h3&gt;

&lt;h4 id=&quot;351-别名简介&quot;&gt;3.5.1 别名简介&lt;/h4&gt;

&lt;p&gt;别名就是用简短的字段来代替一个通常是更复杂的字符串。&lt;/p&gt;

&lt;p&gt;shell 平时维护了一个 &lt;strong&gt;别名列表&lt;/strong&gt;。用 &lt;code class=&quot;highlighter-rouge&quot;&gt;alias&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;unalias&lt;/code&gt; 命令来添加和删除其中的条目。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;alias&lt;/code&gt; 不加参数运行，可以查看该列表内容。&lt;/p&gt;

&lt;h5 id=&quot;别名的用途&quot;&gt;别名的用途&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;同一个命令在系统中有多个版本，用别名可以简化不同版本的调用&lt;/li&gt;
  &lt;li&gt;设置命令的默认选项&lt;/li&gt;
  &lt;li&gt;纠正易发的错误拼写&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;别名的扩展&quot;&gt;别名的扩展&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;在非交互式 shell 中不会发生别名扩展，除非使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;shopt&lt;/code&gt; 命令来启用 &lt;code class=&quot;highlighter-rouge&quot;&gt;expand_aliases&lt;/code&gt; 选项。&lt;/li&gt;
  &lt;li&gt;简单命令中的 &lt;strong&gt;第一个字段&lt;/strong&gt; 如果 &lt;strong&gt;没被引用&lt;/strong&gt;，会被检查是否是别名。如果是，则用其原始内容替换。&lt;code class=&quot;highlighter-rouge&quot;&gt;'ll' /tmp&lt;/code&gt; 不会被扩展。&lt;/li&gt;
  &lt;li&gt;除了别名中不能包含 &lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt; 以外，别名与原始内容可以包含任何有效的 shell 输入，包括 shell 元字符。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;原始内容&lt;/strong&gt; 中的第一个字段会被 &lt;strong&gt;再次&lt;/strong&gt; 检查，看是不是其它别名。但同一个别名只会扩展一次：如把 &lt;code class=&quot;highlighter-rouge&quot;&gt;ls -F&lt;/code&gt; 做名别名 &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt;，bash 会正常执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;ls -F&lt;/code&gt;，而不会没完没了地递归扩展下去。&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;默认情况下，bash 只会检查一行命令中的 &lt;strong&gt;第一个字段&lt;/strong&gt; 是不是别名。但是，如果第一个别名的原始内容其 &lt;strong&gt;最后一个字符是空白字符&lt;/strong&gt;，则会检查紧挨着的 &lt;strong&gt;第二个字段&lt;/strong&gt; 是否别名：
  如：&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo ll&lt;/code&gt;，bash 默认只会检查 &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo&lt;/code&gt; 是否别名，而不会检查 &lt;code class=&quot;highlighter-rouge&quot;&gt;ll&lt;/code&gt;。要想让 &lt;code class=&quot;highlighter-rouge&quot;&gt;ll&lt;/code&gt; 别名被检查，可以重新给 &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo&lt;/code&gt; 加个别名：&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nb&quot;&gt;alias sudo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'sudo '&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;别名 &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo&lt;/code&gt; 的原始内容为 &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo &lt;/code&gt;，其最后一个为空白字符，因此跟随它后面的命令也会被检查。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;352-创建与删除别名&quot;&gt;3.5.2 创建与删除别名&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ls -l'&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;unalias &lt;/span&gt;ll
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;bash 总是要把一行命令完整地读取完毕，然后才会执行其中的命令。因此，别名的扩展发生于 &lt;strong&gt;读取命令时&lt;/strong&gt;，而非执行命令时。&lt;/p&gt;

&lt;p&gt;因此，创建别名时，不要指望在同一行马上就使用：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ls -l'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; ll
bash: ll: &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;not found...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;刚创建的别名，至少要在创建别名的这一行命令的下一行才能开始生效。&lt;/p&gt;

&lt;p&gt;因此，要把创建别名的命令单独放在一行，不建议放到复合命令中去。&lt;/p&gt;

&lt;p&gt;别名不会被子进程所继承。&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;别名扩展是在执行函数之后进行的，因此相对来说解析的稍慢一些。虽然别名更容易理解，但还是建议 &lt;strong&gt;尽量使用函数&lt;/strong&gt; 而不使用别名。&lt;/p&gt;

&lt;h3 id=&quot;36-bash-其它选项&quot;&gt;3.6 bash 其它选项&lt;/h3&gt;

&lt;h4 id=&quot;361-查看选项&quot;&gt;3.6.1 查看选项&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;set -o&lt;/code&gt; 可以查看所有 shell 选项。&lt;/p&gt;

&lt;h4 id=&quot;362-修改选项&quot;&gt;3.6.2 修改选项&lt;/h4&gt;

&lt;p&gt;shell 的这些选项，可以在调用 shell 的时候设定，也可以在 shell 运行期间修改，还可以把选项直接写到启动脚本里。&lt;/p&gt;

&lt;h5 id=&quot;调用-shell-时设定&quot;&gt;调用 shell 时设定&lt;/h5&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bash &lt;span class=&quot;nt&quot;&gt;--posix&lt;/span&gt; script.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;运行期间修改&quot;&gt;运行期间修改&lt;/h5&gt;

&lt;p&gt;要想临时修改当前环境，或想在脚本中修改选项，最好就是用 &lt;code class=&quot;highlighter-rouge&quot;&gt;set&lt;/code&gt; 命令，&lt;code class=&quot;highlighter-rouge&quot;&gt;- 选项&lt;/code&gt; 为启用，&lt;code class=&quot;highlighter-rouge&quot;&gt;+ 选项&lt;/code&gt; 为禁用。&lt;/p&gt;</content><author><name>Hawk Zhang</name><email>imhawkz@gmail.com</email></author><category term="bash" /><category term="环境" /><summary type="html">Bash 与 Bash 脚本，脚本的编写与调试，Bash 环境</summary></entry><entry><title type="html">Python 编程导论</title><link href="https://linotes.netlify.com/programming/programming_intro/" rel="alternate" type="text/html" title="Python 编程导论" /><published>2017-05-01T00:00:00+08:00</published><updated>2017-05-01T00:00:00+08:00</updated><id>https://linotes.netlify.com/programming/programming_intro</id><content type="html" xml:base="https://linotes.netlify.com/programming/programming_intro/">&lt;p&gt;本笔记的教材为 MIT Open Course ：&lt;a href=&quot;https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/&quot;&gt;Introduction to Computer Science and Programming&lt;/a&gt;，by Prof. Eric Grimson, John Guttag.&lt;/p&gt;

&lt;p&gt;像计算机科学家一样思考。&lt;/p&gt;

&lt;p&gt;用语言来 &lt;strong&gt;描述&lt;/strong&gt; 我们想让计算机做什么，描述整个的过程。&lt;/p&gt;

&lt;h2 id=&quot;第一课--第三课&quot;&gt;第一课 ~ 第三课&lt;/h2&gt;

&lt;h3 id=&quot;高级语言--低级语言&quot;&gt;高级语言 / 低级语言&lt;/h3&gt;

&lt;p&gt;低级语言：汇编语言，通过简单的操作，把数据从内存的某个位置移动到另一个位置。类似这样的操作。&lt;/p&gt;

&lt;p&gt;高级语言：功能更复杂。&lt;/p&gt;

&lt;h3 id=&quot;通用语言--专用语言&quot;&gt;通用语言 / 专用语言&lt;/h3&gt;

&lt;h3 id=&quot;解释型语言--编译型语言&quot;&gt;解释型语言 / 编译型语言&lt;/h3&gt;

&lt;h4 id=&quot;解释型语言&quot;&gt;解释型语言：&lt;/h4&gt;

&lt;p&gt;源码被检查之后，交给解释器，然后给出输出。基本上是在运行时直接进行操作。&lt;/p&gt;

&lt;p&gt;解释型语言比较容易调试，因为还能看到源代码。&lt;/p&gt;

&lt;h4 id=&quot;编译型语言&quot;&gt;编译型语言：&lt;/h4&gt;

&lt;p&gt;有一个中间步骤，源码需要先送给一个检查器或编译器，或两者合一，产生出来的是对象代码，object code。&lt;/p&gt;

&lt;p&gt;这个步骤会进行两个重要的操作：一是帮助检查代码错误，二是在实际运行之前，经常会转换为更高效的指令序列。&lt;/p&gt;

&lt;p&gt;编译型语言执行起来更快。&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Python 是通用的，高级语言，解释型语言。&lt;/strong&gt;
—&lt;/p&gt;

&lt;h2 id=&quot;python-语法&quot;&gt;Python 语法&lt;/h2&gt;

&lt;h3 id=&quot;语法&quot;&gt;语法&lt;/h3&gt;

&lt;p&gt;语法是指在该语言中，什么才是 &lt;strong&gt;合法&lt;/strong&gt; 的表达。&lt;/p&gt;

&lt;p&gt;“cat dog boy” 就不是合法的表达。&lt;/p&gt;

&lt;h3 id=&quot;语义&quot;&gt;语义&lt;/h3&gt;

&lt;h4 id=&quot;static-semantics&quot;&gt;static semantics&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;什么&lt;/strong&gt; 样的程序是 &lt;strong&gt;有意义&lt;/strong&gt; 的，什么样的表达是有意义的。&lt;/p&gt;

&lt;p&gt;有时候语法正确，却没有任何语义：”My desk is Suson”&lt;/p&gt;

&lt;p&gt;虽然从语法上讲是合法的，但不具有任何语义，通常没人给桌子起名字。&lt;/p&gt;

&lt;p&gt;静态语义帮助我们判断哪些表达式、代码具有的意义。&lt;/p&gt;

&lt;h4 id=&quot;full-semantics&quot;&gt;full semantics&lt;/h4&gt;

&lt;p&gt;这个程序是 &lt;strong&gt;做什么&lt;/strong&gt; 的？如果运行某程序，它会实现什么？&lt;/p&gt;

&lt;h3 id=&quot;数据类型&quot;&gt;数据类型&lt;/h3&gt;

&lt;p&gt;Python 会自动进行数据类型的检查，如果不符合要求会给出提示。&lt;/p&gt;

&lt;h4 id=&quot;数字&quot;&gt;数字&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;整形：5&lt;/li&gt;
  &lt;li&gt;浮点：3.14&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;字符串&quot;&gt;字符串&lt;/h4&gt;

&lt;h4 id=&quot;布尔&quot;&gt;布尔&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt; / &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;类型转换&quot;&gt;类型转换&lt;/h4&gt;

&lt;p&gt;把一种类型的数据转换为其它类型。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;str()&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;int()&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;数据类型是动态的&quot;&gt;数据类型是动态的&lt;/h4&gt;

&lt;p&gt;在 Python 中，数据类型是 &lt;strong&gt;动态&lt;/strong&gt; 的。可能该变量一开始是数字，接下来就可以变成字符串。但仍然建议不要随意修改数据类型，以避免更多的错误产生。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'string'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;操作符&quot;&gt;操作符&lt;/h3&gt;

&lt;p&gt;操作符用来连接操作对象。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;用来连接数字时，会进行数学运算；连接字符串时，Python 把两个字符串整合到一起。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;str(5) + 'abc'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;先把数字转换为字符串，再与其它字符串连接。&lt;/p&gt;

&lt;p&gt;为了把不同类型的数据连接到一起，通常需要进行类型转换。&lt;/p&gt;

&lt;h4 id=&quot;-&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;只能连接数字，进行减法数学运算。&lt;/p&gt;

&lt;h4 id=&quot;-1&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;连接数字时，进行乘法运算。&lt;/p&gt;

&lt;p&gt;连接字符串和数字：如果是 &lt;code class=&quot;highlighter-rouge&quot;&gt;字符串 * 整形数字N&lt;/code&gt;，则字符串被重复 N 次。其它连接均会返回 “类型错误”。&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;操作符连接不同类型对象的行为，称为 &lt;strong&gt;过载&lt;/strong&gt;，即 overloaded，因为有点超出操作符本身的能力范围了。&lt;/p&gt;

&lt;h4 id=&quot;-2&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;只能连接数字，进行除法运算。&lt;/p&gt;

&lt;h4 id=&quot;操作符的优先级&quot;&gt;操作符的优先级&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;( )&lt;/code&gt; &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;**&lt;/code&gt; &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;*,/&lt;/code&gt; &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;+-&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;变量&quot;&gt;变量&lt;/h3&gt;

&lt;p&gt;用变量来保存数据。&lt;/p&gt;

&lt;p&gt;var = ‘what the hell?’&lt;/p&gt;

&lt;p&gt;通过赋值语句，把变量与值 &lt;strong&gt;绑定&lt;/strong&gt; 到一起。&lt;/p&gt;

&lt;p&gt;关于变量使用的 &lt;strong&gt;场合&lt;/strong&gt;：只要变量值在当前位置是合法的，如数据类型可以在当前环境使用，该变量就可以放在这儿。&lt;/p&gt;

&lt;h4 id=&quot;变量名&quot;&gt;变量名&lt;/h4&gt;

&lt;p&gt;尽量起有意义的变量名，便于代码的理解。如 &lt;code class=&quot;highlighter-rouge&quot;&gt;firstname&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;lastname&lt;/code&gt;，比 &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt; 好很多。&lt;/p&gt;

&lt;h3 id=&quot;表达式&quot;&gt;表达式&lt;/h3&gt;

&lt;p&gt;把操作对象用操作符组合在一起就形成了表达式。&lt;/p&gt;

&lt;p&gt;在 shell 中直接键入表达式，Python 会自动进行对应的操作，如运算、连接字符串等，然后直接输出结果。而在脚本中的表达式则不会自动输出，必须显式使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;print()&lt;/code&gt; 语句来实现输出。&lt;/p&gt;

&lt;h4 id=&quot;比较表达式&quot;&gt;比较表达式&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;4 &amp;gt; 2&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;abc&quot; == &quot;abc&quot;&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;z&quot; &amp;gt; &quot;a&quot;&lt;/code&gt; 返回的值为 &lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;3 &amp;lt;= 2&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;z&quot; &amp;gt; &quot;za&quot;&lt;/code&gt; 返回 &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;赋值表达式&quot;&gt;赋值表达式&lt;/h4&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;B is &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;, C is &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;变量名 C 会指向具体的值 20，而不是指向变量 B。因此，虽然 B 变成了 3，但 C 仍然是 20。&lt;/p&gt;

&lt;p&gt;赋值，可以理解为把变量名与某处的值链接起来，或把变量名指向值。&lt;/p&gt;

&lt;h3 id=&quot;语句&quot;&gt;语句&lt;/h3&gt;

&lt;p&gt;Python 可以解释的合法的命令。&lt;/p&gt;

&lt;p&gt;常见的有赋值语句、&lt;code class=&quot;highlighter-rouge&quot;&gt;print()&lt;/code&gt; 等。&lt;/p&gt;

&lt;h2 id=&quot;代码的组织方式&quot;&gt;代码的组织方式&lt;/h2&gt;

&lt;h3 id=&quot;基本要素&quot;&gt;基本要素&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;数据&lt;/th&gt;
      &lt;th&gt;操作符&lt;/th&gt;
      &lt;th&gt;命令&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;数字&lt;br /&gt;字符串&lt;br /&gt;布尔&lt;/td&gt;
      &lt;td&gt;+ - * /&lt;br /&gt; and, or&lt;/td&gt;
      &lt;td&gt;赋值&lt;br /&gt;输入/输出&lt;br /&gt;条件结构&lt;br /&gt;循环结构&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;代码的运行顺序&quot;&gt;代码的运行顺序&lt;/h3&gt;

&lt;h4 id=&quot;线性程序&quot;&gt;线性程序&lt;/h4&gt;

&lt;p&gt;Straight Line Program&lt;/p&gt;

&lt;p&gt;程序代码按顺序 &lt;strong&gt;逐行&lt;/strong&gt; 执行。&lt;/p&gt;

&lt;h4 id=&quot;分支程序&quot;&gt;分支程序&lt;/h4&gt;

&lt;p&gt;基于某些测试的结果，指令的运行顺序是可以 &lt;strong&gt;变化&lt;/strong&gt; 的。&lt;/p&gt;

&lt;p&gt;测试通常是针对变量的值进行的。&lt;/p&gt;

&lt;h3 id=&quot;条件结构&quot;&gt;条件结构&lt;/h3&gt;

&lt;p&gt;在测试条件结构时，一定要把 &lt;strong&gt;所有可能&lt;/strong&gt; 都测试到。&lt;/p&gt;

&lt;h4 id=&quot;条件的构成&quot;&gt;条件的构成&lt;/h4&gt;

&lt;p class=&quot;notice--info&quot;&gt;&lt;strong&gt;测试条件&lt;/strong&gt; 最终会归结为 &lt;strong&gt;一个布尔值&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;条件可以是 &lt;strong&gt;一个简单的表达式&lt;/strong&gt;，如 &lt;code class=&quot;highlighter-rouge&quot;&gt;a&amp;lt;z&lt;/code&gt;，其结果要么 &lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt;，要么 &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;也可以是 &lt;strong&gt;多个表达式&lt;/strong&gt; 用 &lt;code class=&quot;highlighter-rouge&quot;&gt;and&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;or&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;not&lt;/code&gt; 连接而成的 &lt;strong&gt;布尔组合&lt;/strong&gt;。&lt;/p&gt;

&lt;h4 id=&quot;条件结构常见的语法&quot;&gt;条件结构常见的语法&lt;/h4&gt;

&lt;h5 id=&quot;if-&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;if ...&lt;/code&gt;&lt;/h5&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instructions&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;..........&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;........&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;无需像其它语言一样用 endif 之类的来关闭。&lt;/p&gt;

&lt;h5 id=&quot;if--else-&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;if ... else ...&lt;/code&gt;&lt;/h5&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instructions&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;..........&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;........&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instructions&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;..........&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;........&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;elif&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;elif&lt;/code&gt;&lt;/h5&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;或：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instructions&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;..........&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;........&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instructions&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;..........&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;........&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instructions&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;..........&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;........&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;嵌套&quot;&gt;嵌套&lt;/h5&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instructions&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;..........&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;........&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instructions&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;..........&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;........&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instructions&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;..........&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;........&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;循环结构&quot;&gt;循环结构&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;循环&lt;/strong&gt;，loop，也叫 &lt;strong&gt;迭代&lt;/strong&gt;，iteration。&lt;/p&gt;

&lt;h4 id=&quot;循环结构分析&quot;&gt;循环结构分析&lt;/h4&gt;

&lt;h5 id=&quot;组成循环的要素&quot;&gt;组成循环的要素&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;选择用于 &lt;strong&gt;计数&lt;/strong&gt; 的变量：循环中，必须有个变量的值随着每次循环会发生 &lt;strong&gt;变化&lt;/strong&gt;，次数必须是 &lt;strong&gt;有限&lt;/strong&gt; 的，否则会成为死循环；&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;初始化&lt;/strong&gt; 变量：变量须提前在 &lt;strong&gt;循环外&lt;/strong&gt; 初始化；&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;结束循环&lt;/strong&gt; 的测试：需要有一个用于结束循环的测试，通常测试变量值；&lt;/li&gt;
  &lt;li&gt;组建循环内代码块：修改变量；&lt;/li&gt;
  &lt;li&gt;循环结束后做什么&lt;/li&gt;
&lt;/ul&gt;

&lt;p class=&quot;notice--success&quot;&gt;在设计一个循环时，必须确认循环会 &lt;strong&gt;中止&lt;/strong&gt;，而且一定会返回一个 &lt;strong&gt;合理的&lt;/strong&gt; 答案。&lt;/p&gt;

&lt;h5 id=&quot;流程图&quot;&gt;流程图&lt;/h5&gt;

&lt;p&gt;流程图是构建完善的循环结构的合适工具。&lt;/p&gt;

&lt;h5 id=&quot;防御性编程&quot;&gt;防御性编程&lt;/h5&gt;

&lt;p&gt;Defensive programming，是防御式设计的一种具体体现，它是为了保证，对程序的不可预见的使用，不会造成程序功能上的损坏。它可以被看作是为了减少或消除墨菲定律效力的想法。防御式编程主要用于可能被滥用，恶作剧或无意地造成灾难性影响的程序上。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;确保分析了所有可能的执行路径&lt;/li&gt;
  &lt;li&gt;确保每条路径都有合理的输出&lt;/li&gt;
  &lt;li&gt;所有可能的输入都有对应的路径，不会造成错误或死循环&lt;/li&gt;
  &lt;li&gt;不要指望用户能给你期望的输入，要把用户当傻子，会犯错&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上的编程原则可以称为 &lt;strong&gt;穷举法&lt;/strong&gt;，exhaustive enumeration，即考虑所有的可能性。&lt;/p&gt;

&lt;h4 id=&quot;while-循环&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;while&lt;/code&gt; 循环&lt;/h4&gt;

&lt;p&gt;满足条件就 &lt;strong&gt;一直&lt;/strong&gt; 循环&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;.....&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;......&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;......&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;## 计算两个不同大小的数之间所有因数&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'divisor '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;for-循环&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; 循环&lt;/h4&gt;

&lt;p&gt;就给定的条件 &lt;strong&gt;有限&lt;/strong&gt; 地循环&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;......&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;......&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如 ：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;## 另一种列出两数之间因数的方法&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'divisor '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;元组&quot;&gt;元组&lt;/h4&gt;

&lt;p&gt;tuple，元组，泛指 &lt;strong&gt;有限&lt;/strong&gt; 个元素所组成的 &lt;strong&gt;序列&lt;/strong&gt;，是复合数据结构的一种。它是 &lt;strong&gt;不可修改&lt;/strong&gt; 的。&lt;/p&gt;

&lt;h5 id=&quot;元组的创建&quot;&gt;元组的创建&lt;/h5&gt;

&lt;p&gt;元组由三部分组成：边界符、分隔符和元素。通常采用的边界符是小括号 &lt;code class=&quot;highlighter-rouge&quot;&gt;( )&lt;/code&gt;，分隔符是逗号 &lt;code class=&quot;highlighter-rouge&quot;&gt;,&lt;/code&gt;。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;索引&quot;&gt;索引&lt;/h5&gt;

&lt;p&gt;用索引来访问元组中每个位置的元素，索引从 0 开始。因此索引只能访问 &lt;strong&gt;单个&lt;/strong&gt; 的元素。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 第 2 个元素&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 最后一个元素&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;#####　切片&lt;/p&gt;

&lt;p&gt;用切片来访问指定 &lt;strong&gt;索引范围&lt;/strong&gt; 的元素。&lt;/p&gt;

&lt;p&gt;在切片操作中，不包含区间范围的最后一个元素，这是 Python 的风格。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 读取前 3 个元素&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;foo[1:3]&lt;/code&gt; 是从第 1 个元素开始提取，到第 3 个前面的截止。即提取第 1、2 个元素。&lt;/p&gt;

&lt;p&gt;如果尝试读取索引之外的元素，会返回索引错误消息。&lt;/p&gt;

&lt;h4 id=&quot;字符串的索引和切片&quot;&gt;字符串的索引和切片&lt;/h4&gt;

&lt;p&gt;字符串中的每个字符可以类似于元组中的元素一样被索引或切片。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'what the fuck'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;'w'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;'what t'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sumDigits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1952&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sumDigits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sumDigits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;第-4-课-通过函数分解和抽象递归介绍&quot;&gt;第 4 课 ：通过函数分解和抽象，递归介绍&lt;/h2&gt;

&lt;h3 id=&quot;函数&quot;&gt;函数&lt;/h3&gt;

&lt;p&gt;把所有代码都放在一起来运行不利于运行、调试、升级，需要把这些代码进行分解、抽象成为函数。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;把代码拆分成多个模块&lt;/li&gt;
  &lt;li&gt;忽略细节：对于某一段代码，只需要知道给它什么输入，它会有什么输出&lt;/li&gt;
  &lt;li&gt;创建新的要素&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;关键字&quot;&gt;关键字&lt;/h4&gt;

&lt;h5 id=&quot;def&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;def&lt;/code&gt;&lt;/h5&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;def&lt;/code&gt; 在 Python 中用于标识一个函数的开始，后面接着函数名称。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;return&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt;&lt;/h5&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt; 意味着到此处停止程序的运行，同时返回随后跟随的变量。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;return None&lt;/code&gt; 中的 None 是个特殊的值，意味着没有任何值可以返回。但 None 仍然可以用来与其它变量进行比较。&lt;/p&gt;

&lt;h4 id=&quot;函数的调用&quot;&gt;函数的调用&lt;/h4&gt;

&lt;p&gt;要调用一个函数，需要知道函数的名称和参数，如 &lt;code class=&quot;highlighter-rouge&quot;&gt;abs(55)&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;调用函数时，传入的参数与函数参数进行本地绑定，local binding，即只在函数内部生效。&lt;/p&gt;

&lt;p&gt;本地绑定不影响全局绑定。本地和全局是针对函数和 Python 解释器来讲的。本地指函数内部，全局指整个解释器环境。&lt;/p&gt;

&lt;h3 id=&quot;穷举算法&quot;&gt;穷举算法&lt;/h3&gt;

&lt;p&gt;brute-force algorithm&lt;/p&gt;

&lt;p&gt;农夫养猪和鸡，头加起来有 20 个，脚加起来有 56 个，计算猪和鸡各有多少。&lt;/p&gt;

&lt;p&gt;可通过枚举所有的可能性来计算：&lt;/p&gt;

&lt;p&gt;0 只鸡，20 只猪，算一下是否对的上？&lt;/p&gt;

&lt;p&gt;1 只鸡，19 只猪，是否正确？&lt;/p&gt;

&lt;p&gt;2 只鸡，18 只猪？&lt;/p&gt;

&lt;p&gt;……&lt;/p&gt;

&lt;p&gt;写个程序来实现上面的循环：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numLegs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numHeads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numChicks&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numHeads&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;numPigs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numHeads&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numChicks&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;totLegs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numPigs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numChicks&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;totLegs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numLegs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numPigs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numChicks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;



&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;barnYard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;heads&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Enter number of heads: '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;legs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Enter number of legs: '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pigs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chickens&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;legs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pigs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'There is no solution'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Number of pigs:'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pigs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Number of chickens:'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chickens&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;递归&quot;&gt;递归&lt;/h3&gt;

&lt;p&gt;recursion&lt;/p&gt;

&lt;p&gt;在尝试用程序解决一个问题时，除了循环，有时候还需要用另一种思路来考虑问题，递归。简单地说，递归就是函数 &lt;strong&gt;自己调用自己&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;递归函数的优点是定义简单，逻辑清晰。理论上，所有的递归函数都可以写成循环的方式，但循环的逻辑不如递归清晰。&lt;/p&gt;

&lt;p&gt;递归算法与迭代算法的设计思路区别在于：函数或算法是否具备收敛性，当且仅当一个算法存在预期的收敛效果时，采用递归算法才是可行的，否则，就不能使用递归算法。&lt;/p&gt;

&lt;p&gt;递归其实是方便了程序员难为了机器。它只要得到数学公式就能很方便的写出程序。优点就是易理解，容易编程。但递归是用栈机制实现的（c++），每深入一层，都要占去一块栈数据区域，对嵌套层数深的一些算法，递归会力不从心，空间上会以内存崩溃而告终，而且递归也带来了大量的函数调用，这也有许多额外的时间开销。所以在深度大时，它的时空性就不好了。&lt;/p&gt;

&lt;p&gt;循环其缺点就是不容易理解，编写复杂问题时困难。优点是效率高。运行时间只因循环次数增加而增加，没什么额外开销。空间上没有什么增加。&lt;/p&gt;

&lt;h2 id=&quot;第-5-课浮点数字连续细化查找根&quot;&gt;第 5 课：浮点数字，连续细化，查找根&lt;/h2&gt;

&lt;h3 id=&quot;浮点数字&quot;&gt;浮点数字&lt;/h3&gt;

&lt;p&gt;在 Python 中，浮点数字遵循 IEEE 754 标准。&lt;/p&gt;

&lt;p&gt;按标准规定，浮点数由三部分组成：&lt;strong&gt;符号、尾数、阶&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;mantissa，尾数，也称有效位。exponent，阶，即指数。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这三部分合在一起来表示计算机中的浮点数。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;尾数 ：1 ≤ 尾数 ＜ 2&lt;/li&gt;
  &lt;li&gt;阶 ：-1022 ~ 1023&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在 CPython 中，浮点数总是 64 位的。&lt;/p&gt;

&lt;p&gt;浮点数的结构：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;符号&lt;/th&gt;
      &lt;th&gt;阶&lt;/th&gt;
      &lt;th&gt;尾数&lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;单精度&lt;/td&gt;
      &lt;td&gt;1 位&lt;/td&gt;
      &lt;td&gt;8 位&lt;/td&gt;
      &lt;td&gt;23 位&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;双精度&lt;/td&gt;
      &lt;td&gt;1 位&lt;/td&gt;
      &lt;td&gt;11 位&lt;/td&gt;
      &lt;td&gt;52 位&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Python 默认的是十进制 17 位小数的精度，前 16 位是准确的，第 17 位开始不准确。&lt;/p&gt;

&lt;h3 id=&quot;范例&quot;&gt;范例&lt;/h3&gt;

&lt;p&gt;1/8 = 0.125&lt;/p&gt;

&lt;p&gt;用十进制表示：1.25 * 10&lt;sup&gt;-1&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;用二进制表示：1.0 * 10&lt;sup&gt;-3&lt;/sup&gt; ，即  0.001&lt;/p&gt;</content><author><name>Hawk Zhang</name><email>imhawkz@gmail.com</email></author><category term="python" /><category term="编程" /><summary type="html">以 Python 为例，学习编程基础。</summary></entry></feed>